













fmod CELLULAR-AUTOMATA-DATA is





    sorts State States State? .
    ---------------------------
    subsort State < States State? .

    vars S S'   : State .
    var  SS SS' : States .






    op _->_ : State States  -> State? [prec 56] .
    ---------------------------------------------

    op .States : -> States .
    op __      : States States -> States [assoc comm id: .States prec 55] .
    -----------------------------------------------------------------------









    sorts CellId Cell Cells .
    -------------------------
    subsort Cell < Cells .

    var  C    : Cell .
    var  CS   : Cells .
    vars N N' : CellId .

    op _::_ : CellId State? -> Cell [prec 57] .
    -------------------------------------------

    op .Cells : -> Cells [ctor] .
    op _;_    : Cells Cells -> Cells [assoc comm idem id: .Cells prec 60 format(d n d d)] .
    ---------------------------------------------------------------------------------------
    eq C ; C = C .








    sort CellKey .
    --------------
    var CK : CellKey .

    op _[_] : CellKey State  -> States .
    op _[_] : CellKey CellId -> States .
    ------------------------------------
    eq N :: S -> CK[N] SS
     = N :: S -> CK[S] SS .

    eq N :: S -> CK[N'] SS ; N' :: S' -> SS'
     = N :: S -> CK[S'] SS ; N' :: S' -> SS' .





    op neighbors : CellId -> State? .
    ---------------------------------







    sort Conf .
    -----------

    op [_] : Cells -> Conf .
    ------------------------
    eq [ N :: S                 ; CS ]
     = [ N :: S -> neighbors(N) ; CS ] .

    op {_} : Cells -> Conf .
    ------------------------
    eq { N :: S -> S' ; CS }
     = { N :: S'      ; CS } .
endfm








mod CELLULAR-AUTOMATA is
   protecting CELLULAR-AUTOMATA-DATA .

    var CS : Cells .

    rl [tock] : [ CS ] => { CS } .
    rl [tick] : { CS } => [ CS ] .
endm















mod PERIODIC-GRID is
   protecting INT .
    extending CELLULAR-AUTOMATA .

    vars N M : Int .





    sort Point .
    ------------
    subsort Point < CellId .

    op <_,_> : Int Int -> Point .
    op pt    : Int     -> Point .
    -----------------------------
    eq pt(N) = < N quo width , N rem width > .





   ops width height : -> Nat .
   ---------------------------
   ceq < N , M > = < N - height , M         > if N >= height .
   ceq < N , M > = < N          , M - width > if M >= width .
   ceq < N , M > = < N + height , M         > if N < 0 .
   ceq < N , M > = < N          , M + width > if M < 0 .






   ops up down left right : -> CellKey .
   -------------------------------------
    eq neighbors(< N , M >)
     = up    [< N - 1 , M     >]
       left  [< N     , M - 1 >]
       down  [< N + 1 , M     >]
       right [< N     , M + 1 >] .
endm


