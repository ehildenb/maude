load ../full-maude/full-maude-alpha115.maude
load prelude-aux.maude

fmod MOD-EXTRA is
  pr UNIT .
  op protecting? : Module Module -> Bool .
  op protecting? : ModuleExpression ImportList -> Bool .
  var ME ME' : ModuleExpression . var IL : ImportList . var M M' : Module .
  eq protecting?(M,M') = protecting?(getName(M'),getImports(M)) .
  eq protecting?(ME,protecting ME' . IL) = ME == ME' or-else protecting?(ME,IL) .
  eq protecting?(ME,including  ME' . IL) = protecting?(ME,IL) .
  eq protecting?(ME,extending  ME' . IL) = protecting?(ME,IL) .
  eq protecting?(ME,nil) = false .
endfm

fmod OPDECL-TYPING is
  pr META-LEVEL .
  pr TERM-HANDLING .
  pr TYPE-EXTRA .
  pr OPDECL-EXTRA .

  op subterms : Term -> TermList .
  op termListSorts : Module TermList -> TypeList .
  op findOps : Module OpDeclSet Qid TypeList Type -> OpDeclSet .
  op findOps : Module OpDeclSet Term -> OpDeclSet .
  op overloaded? : OpDeclSet -> Bool .

  var M : Module .
  var OD : OpDecl .
  var ODS : OpDeclSet .
  var Q : Qid .
  var TY TY' : Type .
  var AS AS' : AttrSet .
  var TYL TYL' : TypeList .
  var T : Term .
  var NTL : NeTermList .
  var C : Constant .
  var V : Variable .
  var TL : TermList .

  --- INP: Term
  --- PRE: None
  --- OUT: The list of subterms from this term
  eq subterms(Q[NTL]) = NTL .
  eq subterms(C)      = empty .
  eq subterms(V)      = empty .

  --- INP: Module TermList
  --- PRE: Term well-defined in Module
  --- OUT: A TypeList with n elements corresponding to n terms' types in termlist
  eq termListSorts(M,(T, TL))  = leastSort(M,T) termListSorts(M,TL) .
  eq termListSorts(M,empty) = nil .

  --- INP: Module OpDeclSet Qid TypeList Type
  --- PRE: TypeList and Type are defined in Module
  --- OUT: Given a term with structure Q(X1...XN) whose
  ---      least sort is Type where the sorts of X1...XN
  ---      correspond to the Types in TypeList, find all
  ---      possible operators in the OpDeclSet that
  ---      could be instantiated to get this term
  eq findOps(M,OD ODS,Q,TYL,TY) =
    if typeLeqS(M,TYL,argTypes(OD)) and qid(OD) == Q and
        typeLeqS(M,resultType(OD),TY) then
      OD
    else
      none
    fi findOps(M,ODS,Q,TYL,TY) .
  eq findOps(M,none,Q,TYL,TY) = none .

  --- INP: SModule Term
  --- PRE: Term and OpDeclSet are well-defined in Module
  --- OUT: Set of OpDecls that could top this term
  eq findOps(M,ODS,T) =
    findOps(M,ODS,root(T),termListSorts(M,subterms(T)),leastSort(M,T)) .

  --- INP: OpDeclSet
  --- PRE: None
  --- OUT: True iff no operators share the same name in OpDeclSet
  eq overloaded?(op Q : TYL -> TY [AS]. op Q : TYL' -> TY' [AS']. ODS) = true .
  eq overloaded?(ODS)                                                  = false [owise] .
endfm

fmod TERM-EXTRA is
  pr TERM-HANDLING .
  pr SUBSTITUTIONSET .
  op getName        : QidSet                 -> [QidSet] .
  op varsToTermList : QidSet                 -> [TermList] .
  op filterNotIn    : SubstitutionSet QidSet -> SubstitutionSet .
  op filterNotIn*   : Substitution QidSet    -> Substitution .
  op domain         : Substitution           -> QidSet .

  var TQ : TermQid . var Q : Qid . var QS : QidSet . var V : Variable .
  var S : Substitution . var SS : SubstitutionSet . var T : Term .

  ---
  eq getName(TQ ; Q ; QS)   = getName(TQ) ; getName(Q ; QS) .
  eq getName(none)          = none .
  eq varsToTermList(V ; QS) = V,varsToTermList(QS) .
  eq varsToTermList(none)   = empty .

  --- INP: SubsitutionSet QS:QidSet
  --- PRE: None
  --- OUT: SubstitutionSet where each substitution binding V <- T is
  ---      filtered out V occurs in QS
  eq filterNotIn(S | SS,QS)           = filterNotIn*(S,QS) | filterNotIn(SS,QS) .
  eq filterNotIn(.SubstitutionSet,QS) = .SubstitutionSet .
  eq filterNotIn*(V <- T ; S,QS)      = if V in QS then none else V <- T fi ; filterNotIn*(S,QS) .
  eq filterNotIn*(none,QS)            = none .

  --- INP: Substitution
  --- PRE: None
  --- OUT: QidSet composed of variables mapped to other values
  eq domain(V <- T ; S) = V ; domain(S) .
  eq domain(none)       = none .
endfm

--- this module provides functionality to add a set of variables into a module
--- as FRESH constants (by using the functionality of opPrefix above); the function
--- returns a new module as well as an assignment mapping each variable into its
--- fresh constant --- this assignment can later be used to decode the new term
--- back into its original form
fmod VARIABLES-TO-CONSTANTS is
  pr TERM-EXTRA .
  pr OPDECLSET-EXTRA .
  pr UNIT .
  pr QID-JOIN .
  pr UNIQUE-PREFIX .

  sort ModuleSubstPair .
  op ((_,_)) : Module Substitution -> ModuleSubstPair [ctor] .
  op mod : ModuleSubstPair -> Module .
  op sub : ModuleSubstPair -> Substitution .

  sort ConstGenStrategy .
  ops simple prefix full : -> ConstGenStrategy [ctor] .

  op  varsToConsts  : Module ConstGenStrategy QidSet                            -> [Module] .
  op  varsToConsts# : Module ConstGenStrategy QidSet                            -> [ModuleSubstPair] .
  op  varsToConsts# : Module ConstGenStrategy QidSet Qid OpDeclSet Substitution -> [ModuleSubstPair] .

  op  constsToVars  : Substitution Term                                         -> Term .
  op  constsToVars  : Substitution Qid TermList TermList                        -> TermList .
  op  constsToVars  : Substitution SubstitutionSet                              -> SubstitutionSet .

  op  repeatedNames : QidSet                                                   -> QidSet .
  op $repeatedNames : QidSet QidSet QidSet                                     -> QidSet .

  var M : Module . var V : Variable . var C : Constant . var Q : QidSet .
  var QS QS' QS'' : QidSet . var TL TL' : TermList . var T : Term . var SS : SubstitutionSet .
  var S S' : Substitution . var P : Qid . var O : OpDeclSet . var CS : ConstGenStrategy .
  var TQ : TermQid .

  --- INP: Module QidSet (Variables)
  --- PRE: QidSet should be a set of variables
  --- OUT: A new module where variables have been added as constants
  eq mod((M,S)) = M .
  eq sub((M,S)) = S .
  eq varsToConsts(M,CS,QS)                = mod(varsToConsts#(M,CS,QS)) .
  eq varsToConsts#(M,CS,QS)               = varsToConsts#(M,CS,QS,qid(opPrefix(M)),none,none) .
  eq varsToConsts#(M,simple,V ; QS,P,O,S) = varsToConsts#(M,simple,QS,P,O op getName(V)                       : nil -> getType(V) [none].,S ; V <- join(getName(V) '. getType(V))) .
  eq varsToConsts#(M,prefix,V ; QS,P,O,S) = varsToConsts#(M,prefix,QS,P,O op join(P getName(V))               : nil -> getType(V) [none].,S ; V <- join(P getName(V) '. getType(V))) .
  eq varsToConsts#(M,full,  V ; QS,P,O,S) = varsToConsts#(M,full,  QS,P,O op join(P getName(V) '| getType(V)) : nil -> getType(V) [none].,S ; V <- join(P getName(V) '| getType(V) '. getType(V))) .
  eq varsToConsts#(M,CS,none,P,O,S)       = (addOps(O,M),S) .

  --- INP: Substitution (Variables to fresh Constants) Term/SubstitutionSet
  --- PRE: None
  --- OUT: Identical to Term/SubstitutionSet except in Term/Codomain of SubstitutionSet
  ---      each occurrence of a constant in the codomain of Substitution is
  ---      replaced by the variable which is assigned to it
  eq constsToVars(S,Q[TL])         = constsToVars(S,Q,TL,empty) .
  eq constsToVars(S,V)             = V .
  eq constsToVars(S ; V <- C,C)    = V .
  eq constsToVars(S,C)             = C [owise] .
  eq constsToVars(S,Q,(T,TL),TL')  = constsToVars(S,Q,TL,(TL',constsToVars(S,T))) .
  eq constsToVars(S,Q,empty,TL')   = Q[TL'] .
  ---
  eq constsToVars(S,S | S' | SS)         = constsToVars(S,S) | constsToVars(S,S' | SS) .
  eq constsToVars(S,.SubstitutionSet)    = .SubstitutionSet .
  eq constsToVars(S,V <- T ; S')         = V <- constsToVars(S,T) ; constsToVars(S,S') .
  eq constsToVars(S,(none).Substitution) = (none).Substitution .


  --- INP: QidSet
  --- PRE: Each Qid in QidSet is a TermQid
  --- OUT: Set of names (obtained by getName) which are not unique
  eq  repeatedNames(QS)               = $repeatedNames(QS,none,none) .
  eq $repeatedNames(TQ ; QS,QS',QS'') = if getName(TQ) in QS' then $repeatedNames(QS,QS',QS'' ; getName(TQ))
                                                              else $repeatedNames(QS,QS' ; getName(TQ),QS'') fi .
  eq $repeatedNames(none,QS',QS'')    = QS'' .
endfm

fmod APPLY-SUBS is
  pr TERMSET .
  pr SUBSTITUTIONSET .

  var S : Substitution .
  var T : Term .
  var SS : SubstitutionSet .

  op apply : SubstitutionSet Term -> TermSet .
  eq apply(S | SS,T) = (T << S) | apply(SS,T) .
  eq apply(none,T) = emptyTermSet .
endfm

fmod MODULE-DATABASE-IMP{X :: TRIV} is
  pr MAP-EXTRA{X,Module} * (sort Map{X,Module} to ModuleDatabase{X}, sort MapEntry{X,Module} to ModuleEntry{X}) .
endfm
