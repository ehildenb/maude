



load cterms.maude
load mtemplate.maude
load variables.maude
















fmod SUBTHEORY-ABSTRACTION is
   protecting CTERM-SET .
   protecting MODULE-TEMPLATE .
   protecting PURIFICATION .

    var IS : ImportDeclSet . var SDS : SubsortDeclSet . vars SSDS : SubsortDeclSet .
    var OPDS : OpDeclSet . var MAS : MembAxSet . var EQS : EquationSet . var RLS : RuleSet .
    vars NeMDS NeMDS' : NeModuleDeclSet . var MDS : ModuleDeclSet . vars M M' : Module .
    vars L L' R R' : Term . vars CL' CR' : EqConj . var C : Condition . var EqC : EqCondition . var AS : AttrSet .

    op unif : EqConj -> EqCondition .
    ---------------------------------

    op subtheoryAbstract : ModuleDeclSet Module Module -> [ModuleDeclSet] .
    -----------------------------------------------------------------------
    eq subtheoryAbstract(IS SDS SSDS OPDS MAS EQS, M, M') = IS SDS SSDS OPDS MAS EQS .
    eq subtheoryAbstract(NeMDS NeMDS',             M, M') = subtheoryAbstract(NeMDS, M, M') subtheoryAbstract(NeMDS', M, M') .

   ceq subtheoryAbstract(( rl L => R [AS] . ), M, M') = ( crl L' => R' if unif(CL' /\ CR') [AS] . )
    if L' | CL' := subtheoryPurify(asTemplate(M), M', L)
    /\ R' | CR' := subtheoryPurify(asTemplate(M), M', R) .

   ceq subtheoryAbstract(( crl L => R if C [AS] . ), M, M') = ( crl L' => R' if C /\ unif(CL' /\ CR') [AS] . )
    if L' | CL' := subtheoryPurify(asTemplate(M), M', L)
    /\ R' | CR' := subtheoryPurify(asTemplate(M), M', R) .

    op subtheoryAbstract : Module Module -> [Module] .
    --------------------------------------------------
    eq subtheoryAbstract(M, M') = fromTemplate(getName(M'), subtheoryAbstract(asTemplate(M'), M, M')) .
endfm


































fmod UNCONDITIONALIZE is
   protecting META-LEVEL .
   protecting MODULE-TEMPLATE .
   protecting DETERMINISTIC-VARIABLES .

    vars Q OP : Qid . var M : Module . var FM : FModule . vars S S' CS : Sort .
    vars T T' C' : Term . var AS : AttrSet . var C : Condition . var V : Variable .
    var H : Header . var MDS : ModuleDeclSet .
    vars NeMDS NeMDS' : NeModuleDeclSet .
    var IS : ImportDeclSet . var SDS : SortDeclSet .
    var SSDS : SubsortDeclSet . var OPDS : OpDeclSet . var MAS : MembAxSet .
    var EQS : EquationSet . var RLS : RuleSet .

    op cSort : Sort -> Sort .
    -------------------------
    eq cSort(S) = qid("C" + string(S)) .

    op rmConditions : Sort Sort Qid ModuleDeclSet -> [ModuleDeclSet] .
    ------------------------------------------------------------------
    eq rmConditions(S, CS, OP, IS SDS SSDS OPDS MAS EQS) = IS SDS SSDS OPDS MAS EQS .
    eq rmConditions(S, CS, OP, NeMDS NeMDS')             = rmConditions(S, CS, OP, NeMDS) rmConditions(S, CS, OP, NeMDS') .








   ceq rmConditions(S, CS, OP, rl T => T' [AS] .) = ( rl OP[T, V] => OP[T', V] [AS] . )
    if V := #var((T, T'), CS) .

   ceq rmConditions(S, CS, OP, crl T => T' if C [AS] .) = ( rl OP[T, V] => OP[T', '_/\_[V, C']] [AS] . )
    if C' := upTerm(C)
    /\ V  := #var((T, T', C'), CS) .

    op unconditionalize : Sort Sort Qid Qid ModuleDeclSet -> [ModuleDeclSet] .
    --------------------------------------------------------------------------
   ceq unconditionalize(S, CS, OP, Q, MDS)
     = ( pr Q . )
       ( sorts cSort(S) . )
       ( op OP : S CS -> cSort(S) [none] . )
       rmConditions(S, CS, OP, MDS)
    if S' := qid("C" + string(S)) .

    op unconditionalize : Sort Sort Qid Qid Module -> [Module] .
    ------------------------------------------------------------
    eq unconditionalize(S, CS, OP, Q, M) = fromTemplate(getName(M), unconditionalize(S, CS, OP, Q, asTemplate(M))) .

    op stripConditions : ModuleDeclSet -> [ModuleDeclSet] .
    -------------------------------------------------------
    eq stripConditions(IS SDS SSDS OPDS MAS EQS)    = IS SDS SSDS OPDS MAS EQS .
    eq stripConditions(NeMDS NeMDS')                = stripConditions(NeMDS) stripConditions(NeMDS') .
    eq stripConditions(  rl T => T'      [ AS ] . ) = ( rl T => T' [ AS ] . ) .
    eq stripConditions( crl T => T' if C [ AS ] . ) = ( rl T => T' [ AS ] . ) .
endfm


