load ../theories/numbers.maude

fmod BANK-ACCOUNT-SIGNATURE is
  protecting FVP-NAT-PRED .

  sorts Msg MsgConf .
  subsort Msg < MsgConf .

  op withdraw : Nat -> Msg [ctor] .
  op mt       : -> MsgConf [ctor] .
  op _,_ : MsgConf MsgConf -> MsgConf [ctor assoc comm id: mt] .
  --------------------------------------------------------------

  sort Account .

  op < bal:_pend:_overdraft:_> : Nat Nat Bool -> Account [ctor] .
  ---------------------------------------------------------------

  sorts State .

  op _#_ : Account MsgConf -> State [ctor] .
  ------------------------------------------
endfm

fmod BANK-ACCOUNT-DEFINEDOPS is
  protecting BANK-ACCOUNT-SIGNATURE .

  var M : Nat . var MS : MsgConf .

  op debts : MsgConf -> Nat .
  ---------------------------
  eq debts(mt)               = 0 .
  eq debts(withdraw(M) , MS) = M + debts(MS) .
endfm

fmod BANK-ACCOUNT-LEMMAS is
  pr BANK-ACCOUNT-DEFINEDOPS .

  var K M N : Nat .

  --- NOTE: this predicate makes ceqs below non-terminating
  ---       taken alone, it is also non-confluent, BUT the
  ---       ceq below where it is used IS confluent
  op nonzero? : Nat -> Bool .
  eq nonzero?(0) = false .
  eq nonzero?(N) = true  [owise] .

  --- LEMMA 1: monotonicity of the less-than boolean function in two arguments
 ceq  K + M <= K + N   =   M <= N   if nonzero?(K) .

  --- LEMMA 2: monotonicity of the less-than boolean function in one argument
 ceq  K + M <= N       =   M <= N   if nonzero?(K) .
endfm

mod BANK-ACCOUNT is
  pr BANK-ACCOUNT-SIGNATURE .

  vars n m x : Nat . var p : NzNat . var msgs : MsgConf .

  *** requesting to draw money having sufficient funds; the amount requested is
  *** added to the amount of pending withdraw requests
  rl [mark-withdrawal] :
     < bal: n + m + x pend: x     overdraft: false > #               msgs
  => < bal: n + m + x pend: x + m overdraft: false > # withdraw(m) , msgs .

  rl [overdraft] :
     < bal: n pend: x              overdraft: false > # withdraw(n + p) , msgs
  => < bal: 0 pend: x monus n + p  overdraft: true  > # msgs .

  rl [withdraw] :
     < bal: n + m pend: x          overdraft: false > # withdraw(m) , msgs
  => < bal: n     pend: x monus m  overdraft: false > # msgs .

  *** more money can at any time be deposited in the account if it is not in overdraft
  rl [deposit] :
     < bal: n     pend: x overdraft: false > # msgs
  => < bal: n + m pend: x overdraft: false > # msgs [nonexec] .
endm

mod BANK-ACCOUNT-stop is
  pr BANK-ACCOUNT-DEFINEDOPS .
  pr BANK-ACCOUNT-LEMMAS .
  pr BANK-ACCOUNT .

  op [_,_] : Account MsgConf -> State [ctor] .
  rl [stop] : A:Account # M:MsgConf => [A:Account,M:MsgConf] .
endm
