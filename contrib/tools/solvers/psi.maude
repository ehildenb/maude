set include BOOL off .

fmod IDS is
    sort Id .

    ops a b c d e f g h i j k l m n o p q r s t u v w x y z : -> Id .
endfm

fmod RENAMED-RAT is
   protecting RAT * ( op true  to tt
                    , op false to ff
                    , op _<_   to _P<_
                    , op _>_   to _P>_
                    ) .
endfm

fmod PSI-INTERNAL is
   protecting IDS .
   protecting RENAMED-RAT .

    sorts DConst DExp .
    subsort Rat < DConst .
    subsorts Id DConst < DExp .

    op pi : -> DConst .
    -------------------

    op _+_ : DExp DExp -> DExp [ditto] .
    op _-_ : DExp DExp -> DExp [ditto] .
    op _*_ : DExp DExp -> DExp [ditto] .
    op _/_ : DExp DExp -> DExp [ditto] .
    op _^_ : DExp DExp -> DExp [ditto] .
    ------------------------------------

    op [_<_] : DExp DExp -> DExp .
    op [_>_] : DExp DExp -> DExp .
    op [_≤_] : DExp DExp -> DExp .
    op [_≥_] : DExp DExp -> DExp .
    op [_=_] : DExp DExp -> DExp [comm] .
    op [_≠_] : DExp DExp -> DExp [comm] .
    -------------------------------------

    op ln        : DExp -> DExp .
    op sin       : DExp -> DExp .
    op cos       : DExp -> DExp .
    op floor     : DExp -> DExp .
    op ceil      : DExp -> DExp .
    op dirac     : DExp -> DExp .
    op gaussAnti : Id DExp -> DExp .
    --------------------------------

    sort Binder .
    -------------

    op __._ : Binder Id DExp -> DExp [prec 20] .
   ops sum int lim : -> Binder .
   -----------------------------

    sort Subst .
    ------------

    vars DE DE' : DExp . var DC : DConst .
    vars X Y : Id . var S : Subst . var BIND : Binder .

    op [_/_] : DExp Id    -> Subst .
    op __    : DExp Subst -> DExp [prec 55] .
    -----------------------------------------
    eq X [ DE / Y ] = if X == Y then DE else X fi .

    eq DC         S = DC .
    eq (DE + DE') S = (DE S) + (DE' S) .
    eq (DE - DE') S = (DE S) + (DE' S) .
    eq (DE * DE') S = (DE S) * (DE' S) .
    eq (DE / DE') S = (DE S) * (DE' S) .
    eq (DE ^ DE') S = (DE S) ^ (DE' S) .

    eq [ DE < DE' ] S = [ (DE S) < (DE' S) ] .
    eq [ DE > DE' ] S = [ (DE S) > (DE' S) ] .
    eq [ DE ≤ DE' ] S = [ (DE S) ≤ (DE' S) ] .
    eq [ DE ≥ DE' ] S = [ (DE S) ≥ (DE' S) ] .
    eq [ DE = DE' ] S = [ (DE S) = (DE' S) ] .
    eq [ DE ≠ DE' ] S = [ (DE S) ≠ (DE' S) ] .

    eq ln(DE)           S = ln(DE S) .
    eq sin(DE)          S = sin(DE S) .
    eq cos(DE)          S = cos(DE S) .
    eq floor(DE)        S = floor(DE S) .
    eq ceil(DE)         S = ceil(DE S) .
    eq dirac(DE)        S = dirac(DE S) .
    eq gaussAnti(X, DE) S = gaussAnti(X S, DE S) .

    eq BIND X . DE [ DE' / Y ] = if X == Y then BIND X . DE else BIND X . (DE [ DE' / Y ]) fi .
endfm

fmod PSI-DSL is
   protecting PSI-INTERNAL .
   protecting RENAMED-RAT .

    sort Exp .
    ----------
    subsort DExp < Exp .

    op _+_  : Exp Exp -> Exp [ditto] .
    op _-_  : Exp Exp -> Exp [ditto] .
    op _*_  : Exp Exp -> Exp [ditto] .
    op _/_  : Exp Exp -> Exp [ditto] .
    op _^_  : Exp Exp -> Exp [ditto] .

   ops true false : -> Exp .
    op _&&_  : Exp Exp -> Exp [assoc comm] .
    op _||_  : Exp Exp -> Exp [assoc comm] .
    ----------------------------------------

    op _<_   : Exp Exp -> Exp .
    op _>_   : Exp Exp -> Exp .
    op _≤_   : Exp Exp -> Exp .
    op _≥_   : Exp Exp -> Exp .
    op _===_ : Exp Exp -> Exp [comm] .
    op _≠_   : Exp Exp -> Exp [comm] .
    ----------------------------------

    sorts NeIdList IdList NeExpList ExpList .
    -----------------------------------------
    subsorts Id  < NeIdList  < IdList .
    subsorts Exp < NeExpList < ExpList .
    subsort NeIdList < NeExpList .
    subsort IdList   < ExpList .

    op .IdList : -> IdList .
    op _,_     : IdList     IdList ->    IdList [assoc id: .IdList] .
    op _,_     : IdList   NeIdList ->  NeIdList [ditto] .
    op _,_     : ExpList   ExpList ->   ExpList [ditto] .
    op _,_     : ExpList NeExpList -> NeExpList [ditto] .
    -----------------------------------------------------

    op _(_) : Id ExpList -> Exp .
    -----------------------------

    op bernoulli  : Exp     -> Exp .
    op poisson    : Exp     -> Exp .
    op uniformInt : Exp Exp -> Exp .
    op uniform    : Exp Exp -> Exp .
    op gauss      : Exp Exp -> Exp .
    op pareto     : Exp Exp -> Exp .
    op beta       : Exp Exp -> Exp .
    op gamma      : Exp Exp -> Exp .
    --------------------------------

    sort Function .
    ---------------

    op fun_(_) =_ : Id IdList Exp  -> Function [prec 50] .
    ------------------------------------------------------

    sort Program .
    --------------
    subsort Function < Program .

    op __ : Program Program -> Program [assoc prec 70] .
    ----------------------------------------------------

    --- No imperative support yet
--- ;     sort Stmt .
--- ;     -----------
--- ;
--- ;     op skip :           -> Stmt .
--- ;     op _;_  : Stmt Stmt -> Stmt [assoc id: skip prec 55] .
--- ;     ------------------------------------------------------
--- ;
--- ;     op _:=_     : Id  Exp -> Stmt [prec 50] .
--- ;     op _=_      : Id  Exp -> Stmt [prec 50] .
--- ;     op observe_ : Exp     -> Stmt [prec 50] .
--- ;     op assert_  : Exp     -> Stmt [prec 50] .
--- ;     op return_  : Exp     -> Stmt [prec 50] .
--- ;     -----------------------------------------
--- ;
--- ;     op if_{_} else {_} : Exp Stmt Stmt -> Stmt .
--- ;     op for_in [_.._] {_} : Id Exp Exp Stmt -> Stmt .
--- ;     ------------------------------------------------
--- ;
--- ;     sort Procedure .
--- ;     ----------------
--- ;     subsort Procedure < Program .
--- ;
--- ;     op def _(_) {_} : Id IdList Stmt -> Procedure .
--- ;     -----------------------------------------------

    --- No array support yet
--- ;     op _[_] : Id  Exp -> Exp [prec 35] .
--- ;     op _:= array(_,_) : Id  Exp Exp -> Stmt [prec 50] .
--- ;     op _[_] =_        : Id  Exp Exp -> Stmt [prec 50] .

    --- No mariginalization yet
--- ;    ops Expectation FromMarginal SampleFrom : -> Sample .
--- ;     op _(_) : Sample ExpList -> Exp .   --- TODO: should be Exp or Stmt?
endfm
