--- file: var-unif.maude
--- reqs:
--- info: this file wraps the built-in metaMatch, metaUnify, and metaVariantUnify commands
---       and provides a simpler interface where variable renaming is done auto-magically

fmod UNIFIERS is
  pr VARIABLES-TO-CONSTANTS .
  pr SUBSTITUTIONSET        .
  pr TERMSET-FM             .
  pr TERMSET-RENAME         .
  pr TERMSUBSTSETPAIR       .
  pr SUBSTITUTION-STREAM    .
  ---
  op  unifiers   : Module VariableSet NeTermSet -> SubstitutionSet  .
  op  unifiers   : TermSubstPairSet             -> SubstitutionSet  .
  op #unifiers   : Module VariableSet NeTermSet -> TermSubstSetPair .
  op #unifiers   : Module TermSubstPairSet      -> TermSubstSetPair .
  op #unifiers   : TermSubstPairSet             -> TermSubstSetPair .
  ---
  op  unifiers   : Module UnificationProblem                      -> SubstitutionSet .
  op #unifiers   : Module UnificationProblem Nat UnificationPair? -> Stream{Substitution} .
  ---
  op  matches    : Module Term Term                   -> SubstitutionSet .
  op #matches    : Module Term Term Nat Substitution? -> Stream{Substitution} .
  ---
  op  toUnifProb : NeTermSet      -> UnificationProblem .
  op  toUnifProb : Term NeTermSet -> UnificationProblem .

  var M    : Module .
  var UP   : UnificationProblem .
  var I J  : Nat .
  var S S' : Substitution .
  var SS   : SubstitutionSet .
  var T T' : Term .
  var NTS  : NeTermSet .
  var QS   : QidSet .
  var TPS  : TermSubstPairSet .
  var TP   : TermSubstPair .
  var SharedVars : VariableSet .

  --- TODO: Does this even work/make sense? Revisit this later.
  --- INP: Module QidSet NeTermSet
  --- PRE: NeTermSet has at least two elements; is well-formed in Module
  --- OUT: A unification problem unifying all of the terms in NeTermSet where
  ---      all variables have been renamed except for QS
  --- NB:  #unifiers returns the renamed set of unified terms each with a
  ---      substitution that unifies it with the rest of the terms
  eq   unifiers(M,QS,T | NTS)    = unifiers(#unifiers(M,QS,T | NTS)) .
  eq   unifiers((T,SS))          = SS .
  eq  #unifiers(M,QS,T | NTS)    = #unifiers(M,#renameAllExcept(M,QS,T | NTS)) .
  eq  #unifiers(M,TPS)           = #unifiers(TPS << unifiers(M,toUnifProb(tsp-term(TPS)))) .
  eq  #unifiers(TP | TPS)        = (tsp-term(TP),tsp-sub(TP | TPS)) .

  --- INP: Module UnificationProblem
  --- PRE: Unification problem is well-formed in Module
  --- OUT: A complete set of unifiers
  --- NB:  #unifiers returns a stream of unifiers (useful for applications where the
  ---      process may take a long time)
  eq  unifiers(M,UP)             = set(#unifiers(M,UP,0,metaUnify(M,UP,0,0))) .
  eq #unifiers(M,UP,I,{S,J})     = S & #unifiers(M,UP,s(I),metaUnify(M,UP,s(J),s(I))) .
  eq #unifiers(M,UP,I,noUnifier) = end .

  --- INP: Module Term1 Term2
  --- PRE: Terms are well-formed in Module
  --- OUT: A complete set of matching substitutions from Term1 to Term2
  --- NB:  #matches returns a stream of matches (useful for applications where the
  ---      process may take a long time)
  eq  matches(M,T,T')            = set(#matches(M,T,T',0,metaMatch(M,T,T',nil,0))) .
  eq #matches(M,T,T',I,S)        = S & #matches(M,T,T',s(I),metaMatch(M,T,T',nil,s(I))) .
  eq #matches(M,T,T',I,noMatch)  = end .

  --- INP: NeTermSet
  --- PRE: NeTermSet has at least two elements
  --- OUT: A unification problem unifying all of the terms in the TermSet
  eq toUnifProb(T | NTS)         = toUnifProb(T,NTS) .
  eq toUnifProb(T,T' | NTS)      = T =? T' /\ toUnifProb(T,NTS) .
  eq toUnifProb(T,T')            = T =? T' .

  --- PRE: [1] Terms are well-defined in module
  ---      [2] Terms have disjoint variables, ignoring variables passed in as optional argument
  --- OUT: The standard unification/matching results
  op safeUnify  : Module Term Term -> SubstitutionSet .
  op safeUnify  : Module VariableSet Term Term -> SubstitutionSet .
  op safeMatch  : Module Term Term -> SubstitutionSet .
  op safeMatch  : Module VariableSet Term Term -> SubstitutionSet .
 ceq safeUnify(M,SharedVars,T,T') = unifiers(M,T =? T') if intersection(vars(T),vars(T')) \ SharedVars == none .
  eq safeUnify(M,SharedVars,T,T') = errsub('Unification 'unexpected 'shared 'variable) [owise print "Safe Unify Variable Error"] .
  eq safeUnify(M,T,T')            = safeUnify(M,none,T,T') .
 ceq safeMatch(M,SharedVars,T,T') = matches(M,T,T') if intersection(vars(T),vars(T')) \ SharedVars == none .
  eq safeMatch(M,SharedVars,T,T') = errsub('Match 'unexpected 'shared 'variable) [owise print "Safe Match Variable Error"] .
  eq safeMatch(M,T,T')            = safeMatch(M,none,T,T') .
endfm

fmod EQ-VARIANT is
  --- renaming needed to avoid a billion conflicts later...
  pr VARIANT * (op addOps to MHaddOps, op addEqs to MHaddEqs, op addSorts to MHaddSorts) .
  pr SUBSTITUTIONSET .

  --- sort to collect variant unifier results
  sort SubstSetNatPair .
  op  ssnp : SubstitutionSet Nat -> SubstSetNatPair [ctor] .

  --- copmute variants
  op  variants     : Module Term -> VariantTripleSet .
  op $variants     : Module Term Nat Variant? VariantTripleSet -> VariantTripleSet .
  --- compute variant unifiers
  op  var-unifiers : Module UnificationProblem -> SubstitutionSet .
  op #var-unifiers : Module UnificationProblem -> SubstSetNatPair .
  op $var-unifiers : Module UnificationProblem Nat Nat UnificationPair SubstitutionSet -> SubstSetNatPair .
  --- helper functions for variant/variant unifier generation
  op  applySubs : Variant SubstitutionSet -> VariantTripleSet .
  op  getSubs   : VariantTripleSet -> SubstitutionSet .
  op  getTerms  : VariantTripleSet -> TermSet .
  op  getss     : SubstSetNatPair -> SubstitutionSet .

  var M : Module . var T T' : Term . var I J J' : Nat . var P : Parent . var B : Bool .
  var S S' : Substitution . var SS : SubstitutionSet . var VS : VariantTripleSet . var UP : UnificationProblem .

  eq  variants(M,T)                       = $variants(M,T,0,metaGetVariant(M,T,empty,0,0),empty) .
  eq $variants(M,T,I,noVariant,VS)        = VS .
  eq $variants(M,T,I,{T',S,J,P,B},VS)     = $variants(M,T,s(I),metaGetVariant(M,T,empty,s(J),s(I)),{T',S,J,P,B} | VS) .
  eq  var-unifiers(M,UP)                  = getss(#var-unifiers(M,UP)) .
  eq #var-unifiers(M,UP)                  = $var-unifiers(M,UP,0,0,metaVariantUnify(M,UP,empty,0,0),.SubstitutionSet) .
  eq $var-unifiers(M,UP,I,J,noUnifier,SS) = ssnp(SS,J) .
  eq $var-unifiers(M,UP,I,J,{S,J'},SS)    = $var-unifiers(M,UP,s(I),s(J'),metaVariantUnify(M,UP,empty,s(J'),s(I)),SS | S) .

  eq applySubs({T,S,I,P,B},S' | SS)          = {T << S',S << S',I,P,B} | applySubs({T,S,I,P,B},SS) .
  eq applySubs({T,S,I,P,B},.SubstitutionSet) = empty .

  eq getSubs({T,S,I,P,B} | VS)  = S | getSubs(VS) .
  eq getSubs(empty)             = .SubstitutionSet .
  eq getTerms({T,S,I,P,B} | VS) = T | getTerms(VS) .
  eq getTerms(empty)            = .TermSet .
  eq getss(ssnp(SS,I))          = SS .
endfm

fmod SHOW-VARIANTS is
  pr META-LEVEL .
  pr VARIANT * (op addOps to MHaddOps, op addEqs to MHaddEqs, op addSorts to MHaddSorts) .

  ---(
  sort VariantSet .
  subsort Variant < VariantSet .
  op _|_ : VariantSet VariantSet -> VariantSet [ctor assoc comm id: mt] .
  op mt  : -> VariantSet [ctor] .
  ---)

  op showVariants : Module Term Bound -> VariantTripleSet .
  op showVariants : Module Term Bound Nat Variant? -> VariantTripleSet .
  op showVariant  : Variant -> Variant .

  var N : Nat .
  var M : Module .
  var T : Term .
  var TOT : Bound .
  var V : Variant .
  var P : Parent .
  var B : Bool .
  var S : Substitution .

  eq showVariants(M,T,TOT)                       = showVariants(M,T,TOT,0,metaGetVariant(M,T,empty,0,0)) .
  eq showVariants(M,T,s(TOT),N,V)                = showVariant(V) | showVariants(M,T,TOT,s(N),metaGetVariant(M,T,empty,0,s(N))) .
  eq showVariants(M,T,unbounded,N,V)             = showVariant(V) | showVariants(M,T,unbounded,s(N),metaGetVariant(M,T,empty,0,s(N))) .
  eq showVariants(M,T,0,N,V)                     = showVariant(V) .
  eq showVariants(M,T,TOT,N,noVariant)           = empty .
  eq showVariants(M,T,TOT,N,noVariantIncomplete) = empty .
  eq showVariant({T,S,N,P,B})                    = {T,S,N,P,B} [print "VARIANT: {" T "," S "}"] .
endfm
