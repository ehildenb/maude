
#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    #define YY_LESS_LINENO(n)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = (yy_hold_char); \
		YY_RESTORE_YY_MORE_OFFSET \
		(yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* Stack of input buffers. */
static size_t yy_buffer_stack_top = 0; /**< index of top of stack. */
static size_t yy_buffer_stack_max = 0; /**< capacity of stack. */
static YY_BUFFER_STATE * yy_buffer_stack = 0; /**< Stack as an array. */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                          ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;
static int yy_n_chars;		/* number of characters read into yy_ch_buf */
int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 0;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart (FILE *input_file  );
void yy_switch_to_buffer (YY_BUFFER_STATE new_buffer  );
YY_BUFFER_STATE yy_create_buffer (FILE *file,int size  );
void yy_delete_buffer (YY_BUFFER_STATE b  );
void yy_flush_buffer (YY_BUFFER_STATE b  );
void yypush_buffer_state (YY_BUFFER_STATE new_buffer  );
void yypop_buffer_state (void );

static void yyensure_buffer_stack (void );
static void yy_load_buffer_state (void );
static void yy_init_buffer (YY_BUFFER_STATE b,FILE *file  );

#define YY_FLUSH_BUFFER yy_flush_buffer(YY_CURRENT_BUFFER )

YY_BUFFER_STATE yy_scan_buffer (char *base,yy_size_t size  );
YY_BUFFER_STATE yy_scan_string (yyconst char *yy_str  );
YY_BUFFER_STATE yy_scan_bytes (yyconst char *bytes,int len  );

void *yyalloc (yy_size_t  );
void *yyrealloc (void *,yy_size_t  );
void yyfree (void *  );

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer(yyin,YY_BUF_SIZE ); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;

typedef int yy_state_type;

extern int yylineno;

int yylineno = 1;

extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state (void );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  );
static int yy_get_next_buffer (void );
static void yy_fatal_error (yyconst char msg[]  );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	(yytext_ptr) = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	(yy_hold_char) = *yy_cp; \
	*yy_cp = '\0'; \
	(yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 214
#define YY_END_OF_BUFFER 215
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[1314] =
    {   0,
      211,  211,  211,  211,  211,  211,  211,  211,  211,  211,
      211,  211,  211,  211,    0,    0,    0,    0,  202,  202,
        0,    0,  215,  213,  211,  212,  212,  110,  213,  108,
      110,  110,  110,  108,  109,  109,  110,  213,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,  110,
      110,  110,   16,  110,  110,  110,  110,  110,  110,  110,
      170,  213,  168,  168,  168,  170,  168,  168,  170,  213,
      170,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  170,  170,  170,  116,  213,
      112,  116,  116,  114,  113,  112,  116,  213,  116,  114,

      118,  118,  117,  118,  118,  118,  118,  185,  213,  180,
      181,  185,  172,  185,  183,  171,  175,  173,  174,  185,
      213,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  182,  190,  190,  190,  190,  190,
      188,  190,  190,  190,  190,  190,  190,  190,  190,  190,
      190,  190,  190,  190,  211,  187,  213,  212,  196,  197,
      198,  191,  195,  200,  199,  201,  202,  203,  210,  204,
      209,  209,  205,  206,  204,  207,  208,  211,  110,    0,
      110,    0,    0,    0,  110,  110,  109,    0,  110,  110,
      110,  110,  110,  110,  110,   12,  110,  110,  110,  110,

      110,  110,   46,  110,  110,   80,  110,  110,  110,  110,
      110,  110,  110,  110,   67,  110,  110,    5,  110,  110,
      110,  110,   15,  110,   79,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,   41,   77,  110,  110,  110,
      110,  110,  110,  110,  110,   81,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,    6,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  170,    0,
      169,  170,    0,    0,    0,  170,  170,  164,  167,  165,
        0,  170,  170,  170,  170,  170,  159,  170,  170,  170,
      170,  158,  147,  170,  170,  170,  170,  146,  170,  145,

      170,  170,  170,  170,  156,  170,  170,  170,  152,  170,
      147,  170,  160,  170,  170,  170,  170,  170,  119,  147,
      170,  166,  116,    0,  115,  116,    0,    0,    0,  116,
      116,    0,  111,  113,    0,    5,  211,  117,    0,    0,
        0,    0,    0,  185,    0,  184,  185,    0,    0,    0,
      185,  185,  176,    0,  185,  185,  185,  185,  185,  185,
      185,  185,  178,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  177,  190,    0,  189,  190,    0,
        0,    0,  190,  190,    0,  190,  190,  190,  186,  190,
      190,  186,  190,  190,  190,  186,  186,  190,  190,  186,

      190,  211,  187,    0,    0,    0,  196,  192,  193,  194,
      200,  202,  204,  204,  110,    0,    2,    2,  110,  110,
      110,   72,  110,  110,  110,  110,  110,  110,   71,  110,
      110,  110,  110,  110,  110,  110,  110,   17,   80,  110,
      110,  110,  110,  110,  110,  110,  110,   32,  110,  110,
      110,  110,  110,  110,  110,  110,   79,  110,  110,    6,
       30,  110,  110,  110,   42,  110,   77,  110,  110,  110,
      110,  110,  110,   11,  110,  103,   20,  110,  110,   23,
       81,  110,  110,  110,   39,  110,  110,  110,  110,  110,
      110,  110,  110,  110,  110,  110,  110,  110,  110,   78,

      110,  110,  110,  110,  110,  110,  110,  110,  170,    0,
        2,    2,  170,  170,  157,  170,  170,  161,  170,  170,
      170,  170,  170,  170,  170,  170,  124,  170,  147,  170,
      162,  170,  170,  170,  170,  170,  170,  140,  139,  170,
      153,  170,  170,  170,  170,  170,  170,  170,  170,  170,
      170,  155,  116,    0,    2,    2,    0,    0,    0,    0,
        2,    2,  185,    0,    2,    2,  185,  185,  185,  185,
      185,  185,  185,  185,  179,  185,  185,  185,  185,  185,
      185,  185,  179,  185,  185,  185,  185,  185,  190,    0,
        2,    2,  190,  190,  190,  186,  186,  190,  190,  190,

      190,  186,    0,    0,    0,    0,    2,    2,    2,    1,
        2,    2,  110,  110,  110,   58,   48,  110,  110,  110,
      110,  110,  110,  110,  110,   55,   29,  110,   21,  110,
      110,   96,   24,  110,  110,   63,  110,   25,  110,  110,
      110,  110,  110,  110,    9,   28,  110,    3,  110,  110,
      110,  110,   19,  110,    7,  110,  110,   99,   14,  110,
      110,  110,  110,   16,  110,  110,  110,  110,  110,   81,
      110,  110,   40,  110,  110,   76,   22,   26,  110,   94,
      110,  110,  104,   68,  110,  110,  110,  110,   78,  110,
        8,  110,  110,  110,   64,  110,  110,    0,    0,    2,

        2,    2,    1,    2,    2,  170,  170,  123,  170,  170,
      135,  170,  170,  162,  170,  170,  163,  170,  170,  120,
      170,  170,  170,  125,  170,  170,  126,  170,  170,  127,
        3,  170,  170,  154,  170,  170,  134,  129,  170,  170,
      148,  170,  170,  170,  170,  170,  170,  155,    0,    0,
        2,    2,    2,    1,    2,    2,    0,    0,    1,    0,
        0,    2,    2,    2,    1,    2,    2,  185,  179,  185,
      185,  185,  185,  185,  185,  179,  185,  179,  185,  185,
      185,  185,  179,  179,  185,  185,  185,    0,    0,    2,
        2,    2,    1,    2,    2,  190,  190,  186,  186,  190,

      190,  190,  190,  190,  186,  190,  190,  190,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,   93,  110,
       66,  110,   97,  110,   27,   47,   60,  110,  110,  110,
      110,  110,  110,   85,  110,   90,  110,  110,  110,  110,
      110,  110,  110,  110,   61,  110,  110,   83,  100,   35,
      110,  110,  110,  110,  110,  110,   65,   18,   57,  110,
      110,   13,  110,  110,  110,  110,  110,  110,  110,   10,
      110,   76,  110,  110,   69,   56,  110,  110,   43,   38,
      110,  110,   75,  110,   95,   50,  110,  110,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,  122,  150,

      170,  170,  170,  141,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  121,  136,  170,  170,  170,  170,
      170,  170,  170,  128,  148,  170,  132,  170,  170,  170,
      147,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,    2,    2,    1,    1,    1,    1,    1,    2,    2,
        2,  179,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,  185,  185,  185,  185,  185,  179,    2,    2,
        1,    1,    1,    1,    1,    2,    2,    2,  186,  190,
      190,  190,  190,  190,  190,    1,    1,    1,    1,    1,
        2,    2,   44,  110,  110,  110,  110,  110,  110,  110,

      110,  110,  110,  110,  110,  110,  110,  110,   87,  110,
        4,  110,  110,  110,  110,  100,   62,   74,   30,  110,
      110,  102,   65,  110,  110,  110,  110,   20,   92,   54,
      110,   37,   51,  110,  110,  110,  110,  110,   70,  110,
      110,  110,  110,   36,    1,    1,    1,    1,    1,    2,
        2,  170,  170,  138,  170,  170,    4,  133,  130,  170,
      170,  170,  170,  170,  170,  170,  139,  170,  170,  170,
      170,  170,  170,  170,  170,  170,    1,    1,    1,    1,
        1,    2,    2,    1,    1,    1,    1,    1,    2,    2,
      185,  185,  179,  185,  185,  185,  185,  185,  185,  185,

      185,  185,  185,    1,    1,    1,    1,    1,    2,    2,
      190,  190,  190,  190,  190,  190,    1,    1,  110,   66,
      110,  110,   49,   84,  110,   53,  110,  110,   21,  110,
      110,   89,  110,  110,  110,   88,  110,   73,   59,  110,
      110,  101,   86,  110,   23,  110,   22,  110,  110,   82,
       34,   45,  110,  110,    1,    1,  170,  170,  170,  170,
      170,  142,  170,  170,  170,  170,  140,  170,  143,  170,
      170,  170,  137,  170,  170,  149,  170,    1,    1,    1,
        1,  185,  185,  185,  185,  185,  185,  185,  185,  185,
      185,  185,    1,    1,  190,  190,  190,  190,  186,  110,

      110,  110,   84,  110,  110,   29,   52,   24,  110,   25,
      110,  110,  110,  110,  103,  110,   26,  110,   33,  110,
      110,  170,  170,  170,  170,  170,  170,  170,  170,  126,
      131,  170,  170,  170,  132,  151,  149,  170,  185,  185,
      185,  185,  185,  185,  185,  185,  190,  190,  190,  186,
      110,   58,   98,  110,   55,   63,  110,  110,   19,  110,
      110,  110,  106,   31,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  144,  185,  185,  185,  185,  185,  185,
      185,  190,  190,  107,  110,  110,  105,  110,  170,  170,
      170,  170,  125,  170,  129,  151,  185,  185,  185,  185,

      185,   91,  110,  122,  123,  170,  134,  185,   56,  170,
      185,  138,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        4,    5,    6,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    7,    8,    9,    8,    8,    8,    8,    8,   10,
       11,   12,   13,   14,   15,   16,    8,   17,   18,   18,
       18,   18,   18,   18,   18,   18,   18,   19,    8,   13,
       20,   21,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
        8,    8,    8,    8,    8,    8,    8,    8,    8,    8,
       22,   23,   24,    8,   25,   26,   27,   28,   29,   30,

       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       41,   42,   43,   44,   45,   46,   47,   48,   49,   50,
       51,   52,   53,   13,   54,   55,    1,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,

       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56,   56,   56,   56,   56,   56,
       56,   56,   56,   56,   56
    } ;

static yyconst flex_int32_t yy_meta[57] =
    {   0,
        1,    2,    3,    1,    3,    3,    4,    5,    6,    7,
        7,    5,    5,    8,    5,    5,    5,    5,    5,    5,
        5,    8,    9,    8,   10,   10,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    7,    7,    5,   11
    } ;

static yyconst flex_int16_t yy_base[1401] =
    {   0,
        0,    0,   56,    0,  112,    0,  167,  181,  196,    0,
      252,    0,  307,    0,  314,  322,  354,  359,  172,  186,
      368,  424,  747, 8610,  174, 8610, 8610,  309,  317, 8610,
      341, 8610,  361,  371,  373,  375,  379,  392,  385,  411,
      472,  423,  441,  484,  431,  463,  470,  467,  508,  515,
      529,  538,  474,  550,  568,  569,  565,  592,  558,  599,
      617,  321, 8610,  619,  621,  639,  642,  650,  647,  667,
      670,  713,  674,  676,  702,  678,  751,  708,  739,  759,
      773,  777,  791,  797,  811,  716,  753,  824,  832,  324,
     8610,  844,  846,  871,  873,  838,  876,  893,  884, 8610,

     8610,  916, 8610,  930,  946,  698,  693,  946,  366, 8610,
     8610,  948, 8610,  950,  954,  968,  974, 8610, 8610,  972,
      991,  994, 1000,  998, 1012, 1033, 1038, 1046, 1060, 1071,
     1084, 1086, 1092, 1041, 8610, 8610, 1097,  372, 1115, 1117,
     1120, 1128, 1137, 1183, 1118, 1154, 1156, 1160, 1186, 1191,
     1194, 1214, 1220, 1222, 1264, 8610, 1278, 1292,    0, 8610,
     8610, 8610,  464,    0, 8610, 8610,    0, 8610, 8610,    0,
     8610, 8610, 8610, 8610,  659, 8610, 8610,  188,  417,  430,
      627, 1264,  442,  405,  783, 1089, 1216, 1291,  805,  705,
     1294,  842,  886,  960,  904,  785, 1009, 1228, 1141, 1283,

     1302, 1315,  918, 1322, 1325, 1094, 1327, 1330, 1337, 1340,
     1345, 1359, 1366, 1368, 1370, 1373, 1377, 1388, 1396, 1398,
     1400, 1407, 1411, 1418, 1420, 1430, 1426, 1432, 1441, 1445,
     1452, 1454, 1463, 1465, 1475, 1477, 1483, 1486, 1489, 1498,
     1495, 1516, 1501, 1509, 1528, 1534, 1536, 1540, 1543, 1555,
     1562, 1566, 1573, 1580, 1588, 1576, 1600, 1603, 1606, 1609,
     1611, 1613, 1615, 1634, 1636, 1638, 1643, 1645, 1657,  481,
     1665, 1669, 1678,  492,  415, 1687, 1689, 1692, 1700, 1711,
     1719, 1719, 1731, 1733, 1737, 1745, 1766, 1770, 1772, 1774,
     1785, 1793, 1796, 1807, 1815, 1818, 1843, 1820, 1841, 1856,

     1862, 1864, 1870, 1875, 1883, 1872, 1894, 1897, 1915, 1912,
     1920, 1923, 1938, 1943, 1946, 1949, 1957, 1970, 1972, 1975,
     1983, 1995, 1997,  522, 2003, 2008, 2021,  528,  466, 2028,
     2032, 2057, 8610, 2061, 2028, 2040, 2086, 8610, 2100,  694,
      682,  670,  665, 2100,  535, 2102, 2104, 2086,  543,  517,
     2122, 2126, 2128, 2135, 2146, 2154, 2149, 2151, 2157, 2183,
     2186, 2191, 2189, 2204, 2212, 2217, 2225, 2230, 2236, 2250,
     2258, 2269, 2281, 2283, 2289, 2294,  563, 2307, 2309, 2327,
      587,  524, 2330, 2338, 2347,  973, 2350, 2358, 2363, 2369,
     2383, 2389, 2394, 2402, 2408, 2413, 2421, 2435, 2439, 2443,

     2447, 2478, 8610, 2492,  617,  574,    0, 8610, 8610, 8610,
        0,    0,    0, 8610, 1697,  611, 2507, 2561, 1725, 1828,
     1917, 1778, 2159, 2222, 2058, 2462, 2319, 2304, 1851, 2494,
     2497, 2517, 2256, 2515, 2529, 2525, 2548, 2543, 2555, 2568,
     2570, 2575, 2579, 2593, 2601, 2603, 2607, 2611, 2621, 2629,
     2625, 2632, 2634, 2644, 2652, 2655, 2657, 2662, 2664, 2666,
     2676, 2684, 2686, 2689, 2698, 2707, 2709, 2717, 2719, 2721,
     2729, 2731, 2740, 2750, 2755, 2758, 2761, 2763, 2769, 2773,
     2781, 2787, 2794, 2796, 2800, 2805, 2807, 2814, 2820, 2827,
     2832, 2834, 2840, 2838, 2846, 2842, 2861, 2865, 2852, 2880,

     2884, 2888, 2891, 2894, 2898, 2909, 2902, 2920, 2923,  665,
     2966, 3020, 2931, 2953, 2935, 2977, 2964, 2992, 3023, 2997,
     3020, 3031, 3054, 3060, 3062, 3066, 3081, 3085, 3089, 3093,
     3104, 3107, 3119, 3127, 3130, 3132, 3138, 3150, 3153, 3165,
     3171, 3176, 3184, 3189, 3195, 3207, 3215, 3221, 3229, 3234,
     3240, 3252, 3260,  675, 3297, 3351,  568,  558,  558,  545,
      529,  508, 3263,  684, 3405, 3459, 3274, 3266, 3300, 3315,
     3311, 3278, 3338, 3362, 3373, 3385, 3423, 3377, 3419, 3425,
     3427, 3462, 3431, 3470, 3481, 3483, 3489, 3507, 3510,  714,
     3536, 3590, 3539, 3636, 3513, 3547, 3550, 3561, 3572, 3594,

     3608, 3612,  497,  471,  726,  619,    0,  453, 3649, 3684,
      364, 3738, 2959, 3163, 3303, 3002, 2974, 3344, 3583, 3516,
     3142, 3616, 3542, 3638, 3640, 3029, 3429, 3661, 3502, 3359,
     3665, 3468, 3671, 3674, 3692, 3704, 3718, 3710, 3715, 3742,
     3747, 3744, 3752, 3757, 3762, 3775, 3777, 3780, 3784, 3787,
     3789, 3798, 3795, 3809, 3817, 3819, 3822, 3829, 3832, 3837,
     3840, 3842, 3851, 3860, 3862, 3865, 3870, 3873, 3880, 3888,
     3892, 3898, 3903, 3910, 3913, 3916, 3921, 3923, 3925, 3928,
     3934, 3946, 3953, 3956, 3960, 3965, 3967, 3978, 3985, 3988,
     3990, 3997, 4000, 4008, 4011, 4018, 4021,  749,  638,  442,

     4047,  440, 4070,  527, 4124, 4043, 4057, 4051, 4081, 4084,
     4092, 4095, 4106, 4128, 4131, 4146, 4149, 4157, 4160, 4175,
     4179, 4183, 4187, 4206, 4208, 4210, 4214, 4233, 4235, 4237,
     4256, 4261, 4264, 4258, 4282, 4284, 4287, 4290, 4308, 4311,
     4319, 4333, 4337, 4322, 4345, 4363, 4365, 4368,  765,  647,
      438, 4395,  423, 4418,  590, 4472,  429,  423,    0,  796,
      822,  398, 4407,  391, 4526,  636, 4580, 4422, 4430, 4443,
     4441, 4449, 4475, 4454, 4479, 4490, 4498, 4529, 4503, 4548,
     4552, 4567, 4591, 4594, 4602, 4606, 4620,  856,  832,  388,
     4648,  362, 4671,  719, 4725, 4628, 1033, 4642, 4653, 4674,

     4682, 4693, 4685, 4696, 4728, 4732, 4736, 4750, 4780, 2951,
        0, 4803, 4792,  332, 4857, 4809,  320, 4836, 4032, 4508,
     4212, 4341, 4134, 4181, 4243, 4293, 4398, 4561, 4411, 4634,
     4638, 4746, 4760, 4436, 4534, 4483, 4821, 4588, 4765, 4796,
     4823, 4809, 4705, 4851, 4844, 4863, 4865, 4871, 4875, 4877,
     4883, 4890, 4897, 4904, 4909, 4915, 4917, 4923, 4927, 4929,
     4947, 4949, 4952, 4955, 4957, 4959, 4970, 4978, 4980, 4982,
     4984, 4992, 5002, 5004, 5010, 5012, 5015, 5023, 5025, 5035,
     5037, 5043, 5045, 5048, 5055, 5057, 5069, 5075, 5089, 5101,
     5113, 5124,    0,  313, 5167, 5065, 5221, 5139, 5135, 5090,

     5133, 5147, 5174, 5178, 5189, 5186, 5208, 5232, 5235, 5240,
     5243, 5261, 5264, 5267, 5279, 5282, 5290, 5293, 5301, 5305,
     5313, 5319, 5327, 5316, 5339, 5341, 5353, 5361, 5364, 5366,
     5385, 5395, 5206, 5418, 5429,    0,  306, 5472, 5402, 5526,
     5444, 5456, 5486, 5580, 5498, 5634,  296, 5688, 5500, 5742,
     5511, 5530, 5389, 5452, 5548, 5551, 5507, 5584, 5562, 5592,
     5605, 5616, 5637, 5645, 5659, 5656, 5692, 5695, 5721, 5676,
     5796, 5731, 5850,  289, 5904, 5749, 5958, 5768, 5767, 5799,
     5810, 5818, 5853, 5830, 5868, 5778, 5884, 5885, 6012, 5918,
     5933, 5942, 5127, 5519, 5648, 5560, 5160, 5466, 5586, 5922,

     5945, 5614, 5681, 5573, 5964, 5736, 5864, 5966, 5722, 5805,
     5872, 5952, 5907, 5976, 5978, 5984, 5999, 6005, 6018, 6020,
     6023, 6030, 6038, 6043, 6045, 6048, 6053, 6058, 6063, 6066,
     6072, 6076, 6081, 6084, 6087, 6090, 6095, 6099, 6105, 6108,
     6113, 6117, 6120, 6123, 6151, 6164, 6159,    0, 6175, 6184,
     6193, 6183, 6195, 6131, 6207, 6209, 6215, 6220, 6233, 6239,
     6241, 6244, 6247, 6252, 6270, 6272, 6283, 6291, 6294, 6296,
     6314, 6316, 6320, 6339, 6341, 6347, 6367, 6376, 6371,    0,
     6390, 6399, 6408, 6419, 6428, 6423,    0, 6437, 6447, 6460,
     6456, 6459, 6427, 6462, 6464, 6482, 6486, 6488, 6490, 6509,

     6513, 6517, 6515, 6545, 6555, 6550,    0, 6569, 6578, 6587,
     6584, 6586, 6589, 6597, 6609, 6611, 6637, 6646, 6607, 6180,
     6636, 6326, 6393, 6642, 6541, 6646, 6650, 6654, 6664, 6668,
     6672, 6674, 6679, 6686, 6683, 6693, 6698, 6704, 6706, 6711,
     6713, 6716, 6724, 6726, 6731, 6734, 6736, 6744, 6746, 6756,
     6758, 6764, 6770, 6776, 6790, 6803, 6799, 6803, 6807, 6805,
     6827, 6830, 6832, 6845, 6850, 6853, 6856, 6868, 6876, 6882,
     6888, 6890, 6894, 6896, 6914, 6917, 6920, 6947, 6962, 6951,
     6974, 6963, 6971, 6974, 6976, 6982, 6994, 7005, 7007, 7013,
     7027, 7031, 7057, 7047, 7053, 7059, 7061, 7065, 7079, 7083,

     7091, 6986, 6909, 7093, 7102, 7016, 7104, 7106, 7111, 7124,
     7126, 7129, 7134, 7136, 7138, 7144, 7149, 7157, 7159, 7162,
     7167, 7170, 7182, 7188, 7193, 7211, 7215, 7226, 7234, 7237,
     7240, 7245, 7248, 7259, 7267, 7271, 7279, 7282, 7285, 7297,
     7300, 7305, 7308, 7319, 7327, 7330, 7338, 7341, 7353, 7356,
     7203, 7197, 7351, 7359, 7364, 7366, 7371, 7374, 7377, 7385,
     7392, 7396, 7398, 7403, 7416, 7418, 7421, 7424, 7429, 7443,
     7454, 7465, 7467, 7478, 7480, 7491, 7499, 7493, 7504, 7517,
     7522, 7535, 7540, 7410, 7532, 7537, 7447, 7545, 7558, 7571,
     7579, 7582, 7584, 7590, 7602, 7604, 7608, 7616, 7627, 7629,

     7635, 7550, 7631, 7649, 7654, 7660, 7668, 7672, 7641, 7674,
     7680, 7686, 8610, 7720, 7731, 7742, 7753, 7764, 7771, 7781,
     7788, 7798, 7805, 7815, 7822, 7832, 7839, 7849, 7860, 7871,
     7882, 7892, 7898, 7905, 7912, 7919, 7926, 7936, 7947, 7957,
     7968, 7978, 7989, 8000, 8010, 8021, 8031, 8042, 8053, 8064,
     8075, 8086, 8097, 8108, 8119, 8130, 8141, 8152, 8163, 8174,
     8185, 8196, 8207, 8218, 8229, 8240, 8251, 8262, 8273, 8284,
     8295, 8302, 8313, 8324, 8335, 8346, 8357, 8368, 8379, 8390,
     8401, 8412, 8419, 8430, 8441, 8452, 8463, 8474, 8485, 8492,
     8503, 8514, 8525, 8536, 8547, 8554, 8565, 8576, 8587, 8598

    } ;

static yyconst flex_int16_t yy_def[1401] =
    {   0,
     1313,    1, 1313,    3, 1313,    5, 1314, 1314, 1313,    9,
     1313,   11,   11,   13, 1315, 1315, 1316, 1316, 1317, 1317,
     1318, 1318, 1313, 1313, 1313, 1313, 1313, 1319, 1320, 1313,
     1319, 1313, 1319, 1319, 1319, 1319, 1319, 1313, 1319, 1319,
     1319, 1319, 1319,   41, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319,   41, 1319, 1319, 1319, 1319, 1319,
     1321, 1322, 1313, 1321, 1321, 1321, 1321, 1321, 1321, 1313,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1323, 1324,
     1313, 1323, 1323, 1323, 1323, 1323, 1323, 1313, 1323, 1313,

     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1325, 1326, 1313,
     1313, 1325, 1313, 1325, 1325, 1325, 1325, 1313, 1313, 1325,
     1313, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1313, 1313, 1327, 1328, 1327, 1327,
     1327, 1327, 1313, 1327,  144, 1327, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1313, 1313, 1313, 1313, 1329, 1313,
     1313, 1313, 1313, 1330, 1313, 1313, 1331, 1313, 1313, 1332,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1319, 1320,
     1319, 1333, 1320, 1320, 1319, 1319, 1319, 1313, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,

     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1321, 1322,
     1321, 1321, 1334, 1322, 1322, 1321, 1321, 1321, 1321, 1321,
     1313, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,

     1321, 1321, 1321, 1321, 1321,   77, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1323, 1324, 1323, 1323, 1335, 1324, 1324, 1323,
     1323, 1313, 1313, 1323, 1313, 1323, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1325, 1326, 1325, 1325, 1336, 1326, 1326,
     1325, 1325, 1325, 1313, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1327, 1328, 1327, 1327, 1337,
     1328, 1328, 1327, 1327, 1313,  144, 1327, 1327, 1327, 1327,
     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,

     1327, 1313, 1313, 1313, 1313, 1313, 1329, 1313, 1313, 1313,
     1330, 1331, 1332, 1313, 1319, 1338, 1339, 1339, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,

     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1321, 1340,
     1341, 1341, 1321, 1321, 1321, 1321,   77, 1321, 1321, 1321,
       77, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1323, 1342, 1343, 1343, 1313, 1313, 1313, 1313,
     1344, 1344, 1325, 1345, 1346, 1346, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1327, 1347,
     1348, 1348, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327,

     1327, 1327, 1313, 1313, 1338, 1338, 1344,  418, 1349, 1350,
      418, 1351, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1340, 1340,  512,

     1352,  512, 1353,  512, 1354, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321,
     1321, 1321, 1321, 1321, 1321, 1321, 1321, 1321, 1342, 1342,
      556, 1355,  556, 1356,  556, 1357, 1313, 1313, 1358, 1345,
     1345,  566, 1359,  566, 1360,  566, 1361, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325, 1325,
     1325, 1325, 1325, 1325, 1325, 1325, 1325, 1347, 1347,  592,
     1362,  592, 1363,  592, 1364, 1327,  594, 1327, 1327, 1327,

     1327, 1327, 1327, 1327, 1327, 1327, 1327, 1327, 1349, 1349,
     1358, 1350, 1365,  812, 1366, 1344,  418, 1367, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319,
     1319, 1319, 1319, 1319, 1319, 1319, 1319, 1319, 1352, 1352,
     1353, 1368,  891,  891, 1369, 1344, 1370, 1371, 1372, 1372,

     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1355, 1355, 1356, 1373,  934,  934, 1374, 1344, 1375,
     1376, 1377, 1377, 1378, 1379, 1378,  946, 1380, 1344, 1381,
     1382, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1384, 1384,
     1385, 1386, 1385,  973, 1387, 1344, 1388, 1389, 1390, 1390,
     1390, 1390, 1390, 1390, 1390, 1391, 1391, 1392, 1393, 1394,
     1395, 1395, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1368, 1368, 1392,  891, 1397, 1371,
     1371, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1373, 1373, 1392,  934,
     1398, 1376, 1376, 1379, 1379, 1392,  946, 1399, 1382, 1382,
     1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,

     1383, 1383, 1383, 1386, 1386, 1392,  973, 1400, 1389, 1389,
     1390, 1390, 1390, 1390, 1390, 1390, 1394, 1394, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1397, 1397, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1398, 1398, 1399,
     1399, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1383, 1400, 1400, 1390, 1390, 1390, 1390, 1390, 1396,

     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1372, 1372, 1383, 1383,
     1383, 1383, 1383, 1383, 1383, 1383, 1390, 1390, 1390, 1390,
     1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396, 1396,
     1396, 1396, 1396, 1396, 1372, 1372, 1372, 1372, 1372, 1372,
     1372, 1372, 1372, 1372, 1383, 1383, 1383, 1383, 1383, 1383,
     1383, 1390, 1390, 1396, 1396, 1396, 1396, 1396, 1372, 1372,
     1372, 1372, 1372, 1372, 1372, 1372, 1383, 1383, 1383, 1383,

     1383, 1396, 1396, 1372, 1372, 1372, 1372, 1383, 1396, 1372,
     1383, 1372,    0, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313

    } ;

static yyconst flex_int16_t yy_nxt[8667] =
    {   0,
       24,   25,   26,   24,   27,   25,   25,   28,   29,   30,
       30,   31,   28,   32,   33,   34,   35,   36,   28,   28,
       28,   30,   28,   30,   37,   38,   39,   40,   41,   42,
       43,   44,   45,   28,   46,   28,   47,   48,   49,   50,
       51,   52,   53,   54,   55,   56,   57,   58,   59,   60,
       28,   28,   32,   32,   28,   28,   24,   25,   26,   24,
       27,   25,   25,   61,   62,   63,   63,   64,   65,   63,
       66,   65,   61,   61,   67,   68,   61,   63,   61,   63,
       69,   70,   71,   61,   72,   73,   74,   75,   76,   61,
       77,   78,   61,   79,   80,   61,   81,   82,   61,   83,

       84,   85,   86,   87,   61,   61,   61,   61,   63,   63,
       88,   61,   24,   25,   26,   24,   27,   25,   25,   89,
       90,   91,   91,   92,   89,   91,   93,   94,   89,   95,
       96,   89,   89,   91,   89,   91,   97,   98,   89,   89,
       89,   89,   89,   89,   89,   89,   99,   89,   89,   89,
       89,   89,   89,   89,   89,   89,   89,   89,   89,   89,
       89,   89,   89,   89,  100,  100,   89,   89,  102,  103,
      104,  105,  102,  102,  168,  178,  168,  168,  106,  178,
      178,  107,  102,  103,  104,  105,  102,  102,  168,  178,
      168,  168,  106,  178,  178,  107,   24,   25,   26,   24,

       27,   25,   25,  108,  109,  110,  111,  112,  108,  113,
      114,  115,  108,  108,  116,  117,  108,  118,  108,  119,
      120,  121,  122,  108,  123,  124,  108,  125,  126,  108,
      127,  108,  108,  128,  129,  108,  130,  131,  108,  132,
      133,  134,  108,  108,  108,  108,  108,  108,  135,  135,
      108,  108,  136,   25,   26,   24,   27,   25,   25,  137,
      138,  136,  136,  139,  137,  136,  140,  141,  137,  137,
      137,  137,  137,  136,  137,  136,  142,  143,  137,  137,
      144,  137,  145,  137,  137,  137,  146,  147,  137,  137,
      148,  137,  149,  150,  137,  151,  152,  137,  153,  154,

      137,  137,  137,  137,  136,  136,  137,  137,  155,  156,
      157,  158,  155,  155, 1106,  160,  161,  180,  161,  160,
      160, 1086,  162,  160,  161,  179,  161,  160,  160,  269,
      162, 1079,  323,  181,  182,  137,  163,  137, 1047,  184,
      608,  137,  137,  275,  163,  137,  329,  137,  137,  180,
      137,  137,  185,  137,  137,  165,  166,  988,  166,  165,
      165,  166,  165,  166,  165,  181,  182,  165,  169,  180,
      171,  169,  172,  169,  344,  186,  169,  173,  174,  180,
      376,  180,  790,  180,  608,  181,  182,  180,  350,  816,
      175,  187,  187,  180,  382,  181,  182,  181,  182,  181,

      182,  181,  181,  181,  188,  181, 1313,  183,  790,  181,
      182,  762,  189,  181,  190,  181, 1313,  274,  762,  180,
      176,  177,  191,  169,  169,  180,  171,  169,  172,  169,
      192,  180,  169,  173,  174,  181,  182,  333,  179,  180,
      333,  181,  182,  751,  181,  181,  175,  181,  182,  180,
      179,  193,  184,  202,  194,  181,  182,  195,  751,  215,
      700,  216,  700,  203,  184,  181,  182, 1313,  328,  204,
      408,  180,  409,  608,  217,  180,  176,  177,  180,  169,
      180,  205,  180,  206,  207,  403,  410,  181,  182,  269,
      208,  181,  182,  221,  181,  182,  181,  182,  181,  182,

      269,  196,  218,  275,  220,  197,  219,  222,  403,  198,
      199,  223,  200,  179,  275,  201,  180,  179, 1313,  349,
      243,  209,  210,  180,  211, 1313,  381,  212,  759,  213,
      323,  214,  181,  182,  224,  225,  323,  180,  226,  181,
      182,  229,  227,  344,  329,  230,  180,  700,  228,  759,
      329,  344,  896,  181,  182,  231,  233,  350,  180,  338,
      234,  232,  181,  182,  238,  350,  180,  235,  236,  338,
      237,  376,  758,  180,  181,  182,  244,  180,  239,  757,
      245,  240,  181,  182,  241,  382,  242,  246,  604,  181,
      182,  265,  266,  181,  182,  376,  247,  179,  248,  256,

      180,  249,  257,  258,  260,  250,  251,  180,  252,  382,
      751,  253,  259,  254,  255,  939,  181,  182,  261,  415,
     1313,  605,  262,  181,  182,  270,  263,  270,  603,  270,
      276,  267,  271,  606,  271,  180,  271,  268,  264, 1313,
      698,  272,  273,  272,  273,  272,  273,  270, 1313,  749,
      270,  181,  188,  277,  271,  270,  762,  271,  270,  278,
      279,  949,  271,  272,  273,  271,  272,  273,  414,  414,
      280,  272,  281,  509,  272,  273,  272,  272,  270,  562,
      272,  561,  270,  553,  270,  271,  270,  699,  272,  271,
      272,  271,  563,  271,  272,  273,  560,  750,  272,  273,

      272,  273,  272,  273,  296,  559,  761,  343,  290,  342,
      270,  414,  414,  180,  282,  291,  270,  271,  292,  272,
      272,  270,  589,  271,  270,  293,  272,  273,  271,  181,
      182,  271,  272,  273,  415,  302,  789,  272,  273,  790,
      272,  273,  294,  283,  976,  295, 1313,  270,  606, 1313,
      284,  285,  420,  286,  271,  287,  288,  509,  289,  270,
      320,  270, 1313,  272,  273,  303,  271,  270,  271,  304,
     1313,  699, 1313,  553,  271,  272,  273,  272,  273,  321,
      297,  270,  298,  272,  273,  270,  305,  750,  271,  306,
      299,  180,  271,  180,  417,  300,  301,  272,  273,  270,

      308,  272,  273,  307,  563,  270,  271,  181,  182,  181,
      182, 1313,  271,  180,  309,  272,  273,  310,  761,  270,
      311,  272,  273, 1313,  760,  312,  271, 1313,  313,  181,
      182, 1313,  270, 1313,  788,  272,  273,  314,  315,  271,
      324,  318,  316,  317,  322,  419,  324,  325,  272,  273,
      180,  319,  324,  325,  324,  330,  326,  327, 1313,  325,
      331,  325,  326,  327,  589, 1313,  181,  182,  326,  327,
      326,  327,  332,  333,  332,  332,  332,  332,  789,  324,
     1313,  324, 1313, 1313,  324, 1313,  325,  423,  325,  334,
      334,  325,  324, 1313,  180,  326,  327,  326,  327,  325,

      326,  335,  326,  326, 1313, 1313,  326, 1313,  326,  327,
      181,  182,  180, 1313,  326,  424,  326,  337,  338,  339,
      339,  337,  337,  336, 1313, 1313,  180,  340,  181,  182,
      341,  339,  338,  339,  339,  339,  339, 1313,  426, 1313,
     1313,  340,  181,  182,  341,  326,  326,  339,  338,  339,
      339,  339,  339, 1313,  345, 1313,  345,  340,  345,  351,
      341,  346,  345,  346,  352,  346, 1313, 1313,  180,  346,
      347,  348,  347,  348,  347,  348,  345, 1313,  347,  348,
      345, 1313,  345,  346,  181,  182, 1313,  346, 1313,  346,
      425, 1313,  347,  348,  353, 1313,  347,  354,  347,  348,

      347,  347,  345,  376,  347, 1313,  345, 1313,  345,  346,
      376,  376,  347,  346,  347,  346,  376,  180,  347,  348,
      345, 1313,  347,  348,  347,  348, 1313,  346, 1313, 1313,
     1313, 1313,  358,  181,  182, 1313,  347,  348,  355,  427,
      356,  345, 1313,  347,  347,  357,  345, 1313,  346,  345,
     1313, 1313,  359,  346,  345,  360,  346,  347,  348,  361,
     1313,  346,  347,  348,  376,  347,  348,  362,  345,  363,
      347,  348,  365,  376, 1313,  346,  366,  376,  980,  345,
      376,  375, 1313,  364,  347,  348,  346, 1313, 1313, 1313,
      367, 1313,  345, 1313,  345,  347,  348,  180,  369,  346,

      345,  346,  180,  418,  368,  377, 1313,  346,  347,  348,
      347,  348,  378,  181,  182, 1313,  347,  348,  181,  182,
      372,  379,  380,  377,  370,  377,  383,  371,  377, 1313,
      378,  384,  378,  373, 1313,  378,  377,  374,  439,  379,
      380,  379,  380,  378,  379,  380,  379,  379,  376,  180,
      379, 1313,  379,  385, 1313,  376,  376,  391,  379, 1313,
      379,  376,  377, 1313,  377,  181,  182,  392,  377,  378,
      429,  378, 1313, 1313, 1313,  378, 1313, 1313,  379,  380,
      379,  380, 1313,  394,  379,  380, 1313,  389, 1313,  379,
      379,  377, 1313,  393,  377, 1313, 1313, 1313,  378,  377,

     1313,  378,  377, 1313,  395, 1313,  378,  379,  380,  378,
      379,  380, 1313,  386, 1313,  379,  380, 1313,  379,  380,
      387,  388,  377, 1313,  180,  389,  390,  396,  377,  378,
      377,  389,  187,  187,  397,  378,  180,  378,  379,  380,
      181,  182, 1313, 1313,  379,  380,  379,  380,  401, 1313,
     1313, 1313,  181,  182,  398, 1313, 1313, 1313,  428, 1313,
      399, 1313, 1313, 1313,  400,  402,  403,  404,  404,  402,
      402, 1313,  416,  181,  181,  405, 1313,  181,  406,  404,
      403,  404,  404,  404,  404,  181, 1313,  181, 1313,  405,
     1313,  180,  406,  404,  403,  404,  404,  404,  404, 1313,

      181,  181,  180,  405,  181, 1313,  406,  181,  182, 1313,
      180, 1313,  181, 1313,  181, 1313,  181,  181,  181,  182,
      430,  431,  432,  180, 1313, 1313,  181,  182,  421,  433,
      180,  422,  434,  180, 1313,  180, 1313, 1313,  180,  181,
      182, 1313,  435,  181,  181,  180,  181,  182,  180,  181,
      182,  181,  182,  180,  181,  182,  438,  440,  441,  436,
      437,  181,  182,  443,  181,  182, 1313,  180, 1313,  181,
      182, 1313, 1313, 1313,  180,  442,  180, 1313,  180, 1313,
      444,  180, 1313,  181,  182,  180, 1313, 1313,  445,  446,
      181,  182,  181,  182,  181,  182,  180,  181,  182,  257,

     1313,  181,  182,  449,  180, 1313,  180, 1313,  180, 1313,
     1313, 1313,  181,  182,  447,  180,  450, 1313,  448,  180,
      181,  182,  181,  182,  181,  182,  180,  453,  180, 1313,
     1313,  181,  182,  454,  180,  181,  182,  452,  180,  451,
      180, 1313,  181,  182,  181,  182, 1313,  455, 1313,  180,
      181,  182, 1313,  180,  181,  182,  181,  182, 1313, 1313,
      180,  460,  180,  456,  457,  181,  182, 1313,  458,  181,
      182,  180, 1313,  180, 1313,  459,  181,  182,  181,  182,
     1313, 1313, 1313,  180,  461,  180, 1313,  181,  182,  181,
      182,  180,  464,  462,  180,  463,  465,  180,  257,  181,

      182,  181,  182,  180, 1313, 1313,  180,  181,  182,  180,
      181,  182, 1313,  181,  182,  466, 1313,  180, 1313,  181,
      182, 1313,  181,  182,  180,  181,  182,  467, 1313,  468,
      470,  469,  471,  181,  182,  475,  180, 1313,  472,  473,
      181,  182,  180, 1313,  180,  474, 1313, 1313,  180, 1313,
     1313,  180,  181,  182,  476, 1313, 1313,  477,  181,  182,
      181,  182, 1313,  180,  181,  182,  483,  181,  182, 1313,
      180, 1313,  478,  482,  180,  479,  480,  484,  481,  181,
      182,  180, 1313,  486,  180,  485,  181,  182,  180, 1313,
      181,  182, 1313, 1313, 1313,  487,  180,  181,  182, 1313,

      181,  182,  488,  491,  181,  182,  492,  489,  180,  490,
      493,  180,  181,  182,  180,  494, 1313,  180, 1313,  180,
      496,  180, 1313,  180,  181,  182,  495,  181,  182, 1313,
      181,  182,  498,  181,  182,  181,  182,  181,  182,  181,
      182,  497,  180,  499,  180,  502,  180, 1313,  503, 1313,
     1313,  180, 1313,  180,  500, 1313,  501,  507,  181,  182,
      181,  182,  181,  182, 1313,  270,  504,  181,  182,  181,
      182,  508,  271,  270, 1313, 1313,  505,  270, 1313, 1313,
      271,  272,  273,  506,  271, 1313,  510,  272,  272,  272,
      273,  272, 1313,  272,  281,  270, 1313,  270,  511,  272,

      270,  272,  271,  512,  271,  180, 1313,  271,  270, 1313,
     1313,  272,  273,  272,  273,  271,  272,  273, 1313,  270,
     1313,  181,  182, 1313,  272,  273,  271,  270,  272,  272,
      272,  272,  272,  180,  271,  272,  273, 1313, 1313,  270,
      272,  270,  272,  272,  273,  270,  271, 1313,  271,  181,
      182, 1313,  271,  270, 1313,  272,  273,  272,  273,  514,
      271,  272,  273,  513,  515, 1313, 1313, 1313,  613,  272,
      273,  272,  272,  287,  270, 1313, 1313, 1313,  270, 1313,
      270,  271,  270,  516,  517,  271,  180,  271, 1313,  271,
      272,  273, 1313,  270,  272,  273,  272,  273,  272,  273,

      271,  270,  181,  182,  270, 1313, 1313,  518,  271,  272,
      273,  271,  519, 1313,  521,  270, 1313,  272,  273,  520,
      272,  273,  271,  270, 1313, 1313,  270, 1313,  270, 1313,
      271,  272,  273,  271, 1313,  271,  180, 1313, 1313,  272,
      273,  522,  272,  273,  272,  273, 1313, 1313, 1313,  270,
      523,  270,  181,  182, 1313,  524,  271,  526,  271,  180,
     1313,  527,  614,  525,  270,  272,  273,  272,  273,  529,
      270,  271,  270,  528, 1313,  181,  182,  271,  270,  271,
      272,  273, 1313,  270, 1313,  271,  272,  273,  272,  273,
      271,  270,  530, 1313,  272,  273, 1313,  532,  271,  272,

      273,  269,  270,  269,  531,  270,  534,  272,  273,  271,
      535,  269,  271, 1313, 1313,  533,  536,  537,  272,  273,
      270,  272,  273,  270, 1313,  180,  538,  271,  270,  540,
      271,  270,  539, 1313, 1313,  271,  272,  273,  271,  272,
      273,  181,  182,  615,  272,  273,  270,  272,  273,  542,
      543,  270, 1313,  271,  270,  545, 1313,  270,  271,  541,
      544,  271,  272,  273,  271,  270, 1313,  272,  273, 1313,
      272,  273,  271,  272,  273, 1313,  547, 1313,  270, 1313,
      270,  272,  273,  270,  549,  271,  546,  271, 1313, 1313,
      271,  270,  548, 1313,  272,  273,  272,  273,  271,  272,

      273, 1313, 1313,  270, 1313,  324, 1313,  272,  273,  551,
      271,  324,  325,  550, 1313, 1313,  324, 1313,  325,  272,
      273,  326,  327,  325, 1313, 1313,  552,  326,  327,  554,
      326,  326,  326,  335,  326, 1313,  324,  326,  326,  555,
      324,  326,  326,  325,  326, 1313,  556,  325,  324,  326,
     1313,  326,  326,  327, 1313,  325,  326,  327,  332,  333,
      332,  332,  332,  332,  326,  327,  180, 1313,  557,  324,
     1313,  558, 1313,  326,  326, 1313,  325,  334,  334, 1313,
      326,  326,  181,  182,  618,  326,  327,  337,  338,  339,
      339,  337,  337, 1313,  564,  347,  347,  340, 1313,  347,

      341,  339,  338,  339,  339,  339,  339,  347,  345,  347,
      345,  340,  345, 1313,  341,  346, 1313,  346, 1313,  346,
     1313, 1313, 1313, 1313,  347,  348,  347,  348,  347,  354,
      345, 1313, 1313,  565,  345, 1313,  345,  346,  347,  347,
      566,  346, 1313,  346,  347,  347,  347,  348,  347, 1313,
      347,  348,  347,  348,  345, 1313,  347,  345,  347,  345,
     1313,  346,  345, 1313,  346,  345,  346,  180, 1313,  346,
      347,  348,  346,  347,  348,  347,  348, 1313,  347,  348,
     1313,  347,  348,  181,  182, 1313, 1313,  347,  347,  570,
      567,  345,  568,  569,  345, 1313,  571,  345,  346,  345,

      572,  346,  616, 1313,  346, 1313,  346,  347,  348,  575,
      347,  348,  345,  347,  348,  347,  348, 1313, 1313,  346,
      345,  576, 1313,  573, 1313,  345, 1313,  346,  347,  348,
      180,  574,  346,  345,  577, 1313,  347,  348,  345, 1313,
      346,  347,  348, 1313,  345,  346,  181,  182,  579,  347,
      348,  346, 1313, 1313,  347,  348, 1313,  578,  345, 1313,
      347,  348,  575,  580,  180,  346,  345, 1313, 1313,  581,
      582,  583,  617,  346,  347,  348, 1313,  345, 1313, 1313,
      181,  182,  347,  348,  346, 1313, 1313,  584,  585,  345,
     1313,  345, 1313,  347,  348,  628,  346,  345,  346, 1313,

     1313,  586,  377, 1313,  346,  347,  348,  347,  348,  378,
     1313,  587,  180,  347,  348,  377, 1313,  377,  379,  380,
     1313, 1313,  378, 1313,  378, 1313,  588,  180,  181,  182,
      621,  379,  380,  379,  385,  590,  379,  379,  377, 1313,
      379,  591, 1313,  181,  182,  378,  377,  620,  379, 1313,
      379, 1313,  592,  378,  379,  380,  379,  379,  377, 1313,
      379, 1313,  379,  380, 1313,  378,  377, 1313,  379, 1313,
      379,  377, 1313,  378,  379,  380,  593,  377,  378,  379,
      379, 1313,  379,  380,  378,  389, 1313,  379,  380, 1313,
     1313,  377, 1313,  379,  380, 1313, 1313,  377,  378,  379,

      379, 1313,  377, 1313,  378, 1313,  389,  379,  380,  378,
      377, 1313,  594,  379,  380, 1313,  377,  378,  379,  380,
     1313,  377,  596,  378, 1313, 1313,  379,  380,  378,  377,
     1313, 1313,  379,  380,  595, 1313,  378,  379,  380, 1313,
      597, 1313,  389,  377, 1313,  379,  380,  377, 1313, 1313,
      378,  377, 1313, 1313,  378,  377, 1313,  389,  378,  379,
      380,  598,  378,  379,  380, 1313,  600,  379,  380, 1313,
      180,  379,  380, 1313, 1313, 1313, 1313,  601,  599,  402,
      403,  404,  404,  402,  402, 1313,  181,  182, 1313,  405,
      602, 1313,  406,  404,  403,  404,  404,  404,  404,  619,

     1313, 1313,  180,  405, 1313,  180,  406,  607, 1313, 1313,
      607, 1313, 1313, 1313, 1313,  609,  607,  607,  181,  182,
      607,  181,  182,  180, 1313,  180, 1313,  610,  607, 1313,
      607,  611,  612,  180,  622,  623, 1313,  180,  624,  181,
      182,  181,  182, 1313,  629,  625,  626, 1313, 1313,  181,
      182,  180, 1313,  181,  182,  631,  180, 1313, 1313,  607,
      607,  607,  627,  180,  607, 1313, 1313,  181,  182,  609,
      607,  607,  181,  182,  607,  630,  180, 1313,  180,  181,
      182,  610,  607,  180,  607,  611,  612,  180, 1313,  632,
     1313, 1313,  181,  182,  181,  182, 1313, 1313, 1313,  181,

      182,  180, 1313,  181,  182,  635, 1313,  634, 1313,  180,
     1313,  180, 1313,  607,  607,  180,  633,  181,  182,  180,
     1313,  639,  257, 1313,  636,  181,  182,  181,  182,  180,
     1313,  181,  182,  180, 1313,  181,  182,  180, 1313,  637,
      180, 1313,  180, 1313, 1313,  181,  182, 1313, 1313,  181,
      182,  638,  180,  181,  182,  642,  181,  182,  181,  182,
      180,  643,  640,  180,  644,  180,  641, 1313,  181,  182,
      180, 1313,  180,  645,  180, 1313,  181,  182, 1313,  181,
      182,  181,  182,  647,  180, 1313,  181,  182,  181,  182,
      181,  182,  180,  646,  180,  649, 1313,  180, 1313, 1313,

      181,  182,  648, 1313, 1313, 1313,  180, 1313,  181,  182,
      181,  182,  650,  181,  182,  180,  654,  180, 1313,  651,
     1313,  652,  181,  182,  653,  180, 1313,  180, 1313,  180,
     1313,  181,  182,  181,  182, 1313,  655,  180, 1313,  180,
     1313,  181,  182,  181,  182,  181,  182,  656,  180, 1313,
      659, 1313,  658,  181,  182,  181,  182, 1313,  180, 1313,
     1313,  657,  661,  180,  181,  182,  180, 1313,  660,  180,
     1313,  180, 1313,  663,  181,  182,  662,  180, 1313,  181,
      182,  180,  181,  182, 1313,  181,  182,  181,  182,  180,
     1313, 1313,  665,  181,  182,  180, 1313,  181,  182,  668,

      664, 1313,  180, 1313,  180,  181,  182,  666,  180,  667,
     1313,  181,  182,  180, 1313,  180,  669,  670,  181,  182,
      181,  182,  180, 1313,  181,  182,  672, 1313,  180,  181,
      182,  181,  182,  674,  675,  180, 1313,  671,  181,  182,
      180, 1313,  180,  257,  181,  182,  180, 1313,  180, 1313,
      180,  181,  182,  673,  180, 1313,  181,  182,  181,  182,
      180,  677,  181,  182,  181,  182,  181,  182, 1313,  180,
      181,  182,  676,  180, 1313, 1313,  181,  182, 1313,  679,
      678,  680,  681,  687,  682,  181,  182,  683,  180,  181,
      182,  684,  180,  686, 1313,  685,  180, 1313, 1313,  180,

     1313, 1313,  180, 1313,  181,  182,  180, 1313,  181,  182,
      180,  690,  181,  182,  688,  181,  182,  180,  181,  182,
     1313, 1313,  181,  182,  689, 1313,  181,  182,  180, 1313,
      692,  270, 1313,  181,  182,  694,  691,  693,  271,  270,
     1313,  696,  695,  270,  181,  182,  271,  272,  273, 1313,
      271,  607, 1313,  183,  607,  272,  273,  183, 1313,  272,
      273,  270, 1313, 1313, 1313,  697,  607,  180,  271,  607,
     1313,  706, 1313, 1313,  701,  607,  607,  272,  273,  607,
     1313,  702,  180,  181,  182,  270,  703,  607, 1313,  607,
      704,  705,  271,  269, 1313,  709, 1313,  707,  181,  182,

      270,  272,  273,  269,  819,  270, 1313,  271,  710,  269,
      180, 1313,  271, 1313, 1313,  708,  272,  273,  607,  607,
      607,  272,  273,  607, 1313, 1313,  181,  182,  701,  607,
      607,  270, 1313,  607, 1313,  702,  822,  180,  271,  270,
      703,  607,  712,  607,  704,  705,  271,  272,  273,  269,
     1313,  713, 1313,  181,  182,  272,  273, 1313,  531,  269,
      714,  718,  270,  832,  715,  716,  711,  717,  270,  271,
      270, 1313,  607,  607,  270,  271, 1313,  271,  272,  273,
     1313,  271, 1313, 1313,  272,  273,  272,  273, 1313,  270,
      272,  273,  719,  270, 1313,  722,  271,  270,  720,  723,

      271,  270, 1313, 1313,  271,  272,  273, 1313,  271,  272,
      273,  721,  270,  272,  273,  270, 1313,  272,  273,  271,
     1313, 1313,  271,  724,  725, 1313,  726,  270,  272,  273,
     1313,  272,  273, 1313,  271,  270,  727,  728,  270, 1313,
      270, 1313,  271,  272,  273,  271,  270,  271, 1313,  729,
      180,  272,  273,  271,  272,  273,  272,  273,  270, 1313,
     1313,  270,  272,  273,  733,  271,  181,  182,  271, 1313,
      731,  180,  730,  270,  272,  273,  732,  272,  273,  270,
      271, 1313, 1313,  735,  270,  826,  271,  181,  182,  272,
      273,  271,  270, 1313,  734,  272,  273,  270,  736,  271,

      272,  273, 1313,  270,  271, 1313, 1313,  820,  272,  273,
      271, 1313,  738,  272,  273,  270, 1313, 1313, 1313,  272,
      273, 1313,  271,  270, 1313, 1313,  737, 1313,  740,  270,
      271,  272,  273, 1313,  739, 1313,  271,  270, 1313,  272,
      273, 1313,  270,  742,  271,  272,  273,  743,  270,  271,
     1313, 1313,  741,  272,  273,  271, 1313,  744,  272,  273,
      270, 1313, 1313, 1313,  272,  273, 1313,  271,  324, 1313,
     1313,  345,  746,  745,  345,  325,  272,  273,  346,  747,
     1313,  346,  345, 1313,  326,  327,  345,  347,  348,  346,
      347,  348, 1313,  346, 1313, 1313,  748,  607,  347,  348,

      607, 1313,  347,  348,  769,  752,  607,  607,  345, 1313,
      607,  180,  753, 1313,  768,  346,  773,  754,  607,  345,
      607,  755,  756,  345,  347,  348,  346,  181,  182, 1313,
      346,  770, 1313, 1313, 1313,  347,  348, 1313, 1313,  347,
      348, 1313, 1313, 1313,  771, 1313,  345,  821, 1313,  607,
      607,  607,  180,  346,  607, 1313,  772, 1313,  575,  752,
      607,  607,  347,  348,  607, 1313,  753,  180,  181,  182,
      345,  754,  607, 1313,  607,  755,  756,  346, 1313, 1313,
      823,  345, 1313,  181,  182,  345,  347,  348,  346,  774,
     1313,  836,  346,  345, 1313,  775, 1313,  347,  348, 1313,

      346,  347,  348,  607,  607,  607, 1313,  779,  607,  347,
      348, 1313, 1313,  763,  607,  607, 1313, 1313,  607, 1313,
      764, 1313, 1313,  776,  777,  765,  607,  345,  607,  766,
      767,  345, 1313,  345,  346,  345, 1313,  180,  346,  345,
      346, 1313,  346,  347,  348, 1313,  346,  347,  348,  347,
      348,  347,  348,  181,  182,  347,  348,  607,  607,  607,
     1313,  782,  607,  833,  575,  575,  778,  763,  607,  607,
      345,  780,  607, 1313,  764, 1313,  180,  346,  345,  765,
      607, 1313,  607,  766,  767,  346,  347,  348,  781,  345,
     1313,  345,  181,  182,  347,  348,  346,  345,  346, 1313,

     1313, 1313, 1313, 1313,  346,  347,  348,  347,  348,  784,
      180,  607,  607,  347,  348,  345,  785,  786,  377, 1313,
      783,  377,  346, 1313,  180,  378,  181,  182,  378, 1313,
     1313,  347,  348,  787,  379,  380,  607,  379,  380,  607,
      181,  182, 1313,  802,  791,  607,  607,  377,  835,  607,
      180,  792,  825, 1313,  378,  377,  793,  607,  377,  607,
      794,  795,  378,  379,  380,  378,  181,  182,  828,  377,
     1313,  379,  380, 1313,  379,  380,  378, 1313, 1313, 1313,
      377, 1313, 1313,  796,  803,  379,  380,  378,  607,  607,
      607,  180, 1313,  607,  389, 1313,  379,  380,  791,  607,

      607, 1313,  377,  607, 1313,  792,  804,  181,  182,  378,
      793,  607, 1313,  607,  794,  795,  377,  805,  379,  380,
      377, 1313,  806,  378,  180, 1313, 1313,  378,  824, 1313,
     1313, 1313,  379,  380, 1313, 1313,  379,  380,  807, 1313,
      181,  182,  607,  607,  377, 1313,  180,  808,  180,  607,
      183,  378,  607, 1313, 1313,  183,  389,  608, 1313,  827,
      379,  380,  181,  182,  181,  182, 1313,  797, 1313,  180,
      831,  810,  829,  180,  798, 1313,  799, 1313,  830,  180,
      800,  801,  180,  798,  811,  181,  182,  811, 1313,  181,
      182, 1313,  813,  811,  811,  181,  182,  811,  181,  182,

      180, 1313,  837, 1313, 1313,  811,  834,  811,  814,  815,
     1313, 1313,  180, 1313,  838, 1313,  181,  182,  180, 1313,
      839, 1313, 1313,  180, 1313, 1313,  180, 1313,  181,  182,
     1313,  840, 1313, 1313,  181,  182,  811,  811,  607,  181,
      182,  607,  181,  182,  842, 1313,  818,  611,  611,  841,
      180,  611,  180,  843,  844,  180, 1313, 1313, 1313,  611,
      180,  611,  607,  607, 1313,  180,  181,  182,  181,  182,
      180,  181,  182,  847, 1313,  845,  181,  182, 1313, 1313,
     1313,  181,  182,  180, 1313,  180,  181,  182,  180, 1313,
      611,  611,  180,  846,  849,  180,  848,  180, 1313,  181,

      182,  181,  182,  180,  181,  182,  180, 1313,  181,  182,
      850,  181,  182,  181,  182, 1313, 1313,  180,  851,  181,
      182,  855,  181,  182,  852,  180, 1313,  180, 1313,  853,
      180, 1313,  854,  181,  182, 1313, 1313,  180, 1313,  856,
      180,  181,  182,  181,  182,  180,  181,  182,  180, 1313,
      180, 1313,  858,  181,  182, 1313,  181,  182,  857,  180,
     1313,  181,  182, 1313,  181,  182,  181,  182,  180, 1313,
      180, 1313,  861,  180,  860,  181,  182, 1313,  180, 1313,
      862,  180,  859, 1313,  181,  182,  181,  182,  180,  181,
      182, 1313, 1313,  864,  181,  182,  180,  181,  182,  866,

      180, 1313,  863, 1313,  181,  182,  180, 1313,  865, 1313,
     1313,  180,  181,  182,  867, 1313,  181,  182,  180, 1313,
      868,  180,  181,  182,  180, 1313,  869,  181,  182,  180,
     1313,  180,  481,  180,  181,  182,  180,  181,  182,  870,
      181,  182,  180, 1313, 1313,  181,  182,  181,  182,  181,
      182, 1313,  181,  182,  180, 1313, 1313,  871,  181,  182,
      872,  180, 1313, 1313,  180, 1313,  874,  873,  180,  875,
      181,  182,  877,  180, 1313,  180, 1313,  181,  182,  876,
      181,  182, 1313, 1313,  181,  182,  180, 1313, 1313,  181,
      182,  181,  182,  180, 1313,  879,  180, 1313,  180,  878,

     1313, 1313,  181,  182,  881,  180, 1313, 1313,  180,  181,
      182, 1313,  181,  182,  181,  182,  180,  880, 1313,  180,
     1313,  181,  182,  884,  181,  182,  180, 1313,  882,  180,
      885, 1313,  181,  182,  883,  181,  182, 1313,  886, 1313,
      180, 1313,  181,  182,  887,  181,  182,  607,  274,  888,
      607,  270, 1313,  274, 1313,  700,  181,  182,  271,  270,
     1313, 1313, 1313, 1313, 1313,  270,  271,  272,  273,  890,
      811,  899,  271,  811, 1313,  272,  273, 1313,  892,  811,
      811,  272,  273,  811, 1313,  893, 1313, 1313, 1313,  270,
     1313,  811,  270,  811,  894,  895,  271,  901, 1313,  271,

      270,  900, 1313,  270, 1313,  272,  273,  271,  272,  273,
      271, 1313, 1313, 1313,  270,  902,  272,  273, 1313,  272,
      273,  271,  811,  811,  607, 1313, 1313,  607, 1313,  903,
      272,  273,  898,  704,  704,  904,  270,  704, 1313,  270,
     1313, 1313,  180,  271,  531,  704,  271,  704,  607,  607,
     1313,  905,  272,  273,  270,  272,  273,  270,  181,  182,
     1313,  271, 1313,  997,  271,  270,  531, 1313,  270,  531,
      272,  273,  271,  272,  273,  271,  704,  704, 1313,  531,
     1313,  272,  273,  270,  272,  273,  907,  270, 1313,  180,
      271,  270, 1313, 1313,  271,  270,  906, 1313,  271,  272,

      273, 1313,  271,  272,  273,  181,  182,  272,  273,  908,
     1313,  272,  273,  909,  270,  998,  270, 1313,  270, 1313,
      180,  271,  270,  271, 1313,  271, 1313,  910, 1313,  271,
      272,  273,  272,  273,  272,  273,  181,  182,  272,  273,
      914,  270,  995,  270, 1313,  270, 1313,  911,  271, 1313,
      271,  180,  271,  912, 1313, 1313,  913,  272,  273,  272,
      273,  272,  273, 1313,  270, 1313,  270,  181,  182,  270,
      915,  271,  270,  271, 1313, 1313,  271, 1313, 1313,  271,
      272,  273,  272,  273,  916,  272,  273,  917,  272,  273,
      270, 1313,  270,  918, 1313,  270, 1313,  271,  270,  271,

     1313,  180,  271, 1313, 1313,  271,  272,  273,  272,  273,
      919,  272,  273, 1313,  272,  273,  270,  181,  182,  270,
      922, 1313, 1313,  271,  920,  921,  271,  270, 1313, 1313,
      270, 1313,  272,  273,  271,  272,  273,  271,  923, 1313,
     1313,  270, 1313,  272,  273,  270,  272,  273,  271,  180,
     1313, 1313,  271,  270, 1313, 1313,  924,  272,  273,  928,
      271,  272,  273,  925, 1313,  181,  182,  926,  996,  272,
      273,  270, 1313,  270, 1313, 1313,  270,  930,  271, 1313,
      271, 1313,  927,  271, 1313,  929, 1313,  272,  273,  272,
      273, 1313,  272,  273, 1313,  607,  328,  931,  607, 1313,

     1313,  328, 1313,  751, 1313, 1313,  180,  607,  349, 1313,
      607, 1313, 1313,  349, 1313,  762, 1313,  933,  811,  180,
     1313,  811,  181,  182, 1313, 1313,  935,  811,  811,  943,
      345,  811, 1313,  936, 1313,  181,  182,  346,  345,  811,
     1313,  811,  937,  938,  180,  346,  347,  348, 1000,  345,
      952,  345, 1313, 1313,  347,  348,  346,  345,  346, 1313,
      181,  182,  345, 1313,  346,  347,  348,  347,  348,  346,
      811,  811,  607,  347,  348,  607,  953,  954,  347,  348,
      941,  755,  755,  345,  957,  755,  955,  345, 1313,  575,
      346,  180, 1313,  755,  346,  755,  607,  607,  345,  347,

      348,  956, 1313,  347,  348,  346,  345,  181,  182,  958,
     1313,  345, 1313,  346,  347,  348,  180, 1313,  346, 1313,
     1313, 1313,  347,  348,  755,  755,  811,  347,  348,  811,
     1313,  959,  181,  182,  945,  811,  811,  345,  993,  811,
     1313,  946,  180,  960,  346, 1313, 1313,  811,  994,  811,
      947,  948,  575,  347,  348,  961,  345, 1313,  181,  182,
      345, 1313, 1005,  346, 1313, 1313, 1313,  346, 1313,  180,
     1313, 1313,  347,  348,  962,  345,  347,  348,  811,  811,
      607,  963,  346,  607, 1313,  181,  182, 1313,  951,  766,
      766,  347,  348,  766, 1313,  964,  180, 1313, 1313,  345,

      999,  766,  345,  766,  607,  607,  346, 1313, 1313,  346,
      345, 1313,  181,  182,  345,  347,  348,  346,  347,  348,
     1313,  346, 1007, 1313,  966, 1313,  347,  348,  345,  965,
      347,  348,  766,  766, 1313,  346,  377, 1313, 1313, 1313,
      967, 1313,  180,  378,  347,  348,  180,  575,  607,  381,
      377,  607,  379,  380,  381, 1313,  790,  378,  181,  182,
     1313,  377,  181,  182, 1002,  968,  379,  380,  378, 1313,
      970,  811,  979, 1001,  811, 1313, 1313,  379,  380,  972,
      811,  811,  377, 1313,  811, 1313,  973, 1313, 1313,  378,
      377,  798,  811,  377,  811,  974,  975,  378,  379,  380,

      378,  377, 1313, 1313,  377, 1313,  379,  380,  378,  379,
      380,  378,  798,  180, 1313,  798, 1313,  379,  380, 1313,
      379,  380, 1313,  811,  811,  607,  983, 1313,  607,  181,
      182,  982,  981,  978,  794,  794,  377, 1313,  794, 1012,
      377, 1313, 1313,  378,  377, 1313,  794,  378,  794,  607,
      607,  378,  379,  380,  180, 1313,  379,  380,  377, 1313,
      379,  380, 1313, 1313, 1313,  378, 1313, 1313,  180,  984,
      181,  182,  389,  180,  379,  380,  985,  794,  794, 1313,
      607,  183,  389,  607,  181,  182,  183, 1313,  608,  181,
      182, 1003,  811,  183, 1008,  811, 1313, 1313,  183, 1004,

      812, 1313,  810,  811,  180, 1313,  811, 1313, 1313, 1313,
     1313,  813,  811,  811,  987, 1313,  811,  180,  611,  611,
      181,  182,  611, 1313,  811, 1009,  811,  814,  815,  180,
      611,  180,  611,  181,  182, 1313,  607,  605, 1313,  607,
     1313, 1313,  605, 1313,  817,  181,  182,  181,  182, 1313,
     1313, 1006,  180, 1010, 1011,  811,  811,  811,  992,  180,
      811,  611,  611, 1313, 1313,  990,  814,  814,  181,  182,
      814,  180, 1313,  180, 1313,  181,  182, 1013,  814,  180,
      814,  811,  811,  180, 1313,  180, 1313,  181,  182,  181,
      182,  180, 1014, 1313, 1313,  181,  182, 1313,  180,  181,

      182,  181,  182, 1313, 1313,  180, 1313,  181,  182,  814,
      814, 1015,  180, 1313,  181,  182, 1313,  180, 1313, 1016,
     1018,  181,  182,  180, 1313,  180, 1313, 1313,  181,  182,
     1313,  180, 1017,  181,  182,  180, 1313,  180, 1313,  181,
      182,  181,  182, 1020, 1313, 1019, 1021,  181,  182, 1313,
     1313,  181,  182,  181,  182,  180, 1313,  180, 1022, 1313,
      180, 1023, 1024,  180, 1313,  180, 1025,  180, 1313, 1313,
     1313,  181,  182,  181,  182, 1026,  181,  182,  180,  181,
      182,  181,  182,  181,  182, 1028,  180, 1029,  180, 1313,
      180, 1027,  180, 1313,  181,  182, 1030, 1313, 1313, 1313,

      180, 1313,  181,  182,  181,  182,  181,  182,  181,  182,
      180, 1032,  180, 1313, 1034, 1031,  181,  182,  180, 1313,
      180, 1313, 1313,  180, 1313, 1033,  181,  182,  181,  182,
     1035,  180, 1313,  180,  181,  182,  181,  182, 1036,  181,
      182, 1313, 1313,  180, 1313,  180, 1037,  181,  182,  181,
      182,  180, 1313,  180, 1313, 1039,  180, 1313, 1038,  181,
      182,  181,  182,  180, 1313,  180, 1313,  181,  182,  181,
      182, 1313,  181,  182,  704,  704, 1040,  180,  704,  181,
      182,  181,  182,  180, 1313, 1313,  704, 1041,  704,  607,
      274, 1042,  607,  181,  182,  274, 1313,  700,  270,  181,

      182,  607, 1313,  274,  607,  271, 1313,  274, 1044, 1313,
     1313,  890, 1043,  811,  272,  273,  811,  704,  704, 1313,
     1313,  892,  811,  811,  811,  274,  811,  811,  893, 1313,
      274, 1313,  891, 1313,  811,  180,  811,  894,  895,  607,
      698,  270,  607,  270, 1313,  698, 1046,  897,  271, 1313,
      271,  181,  182, 1313, 1313,  270, 1313,  272,  273,  272,
      273, 1051,  271, 1313, 1313,  811,  811,  811,  180, 1052,
      811,  272,  273, 1313, 1313, 1049,  894,  894, 1053, 1054,
      894, 1313,  270, 1313,  181,  182,  270, 1313,  894,  271,
      894,  811,  811,  271,  270, 1313, 1313,  270,  272,  273,

     1122,  271,  272,  273,  271, 1313,  607, 1313,  328,  607,
      272,  273,  328,  272,  273, 1056,  270, 1055, 1313,  894,
      894,  607,  531,  271,  607, 1313, 1313, 1313, 1313,  701,
      607,  607,  272,  273,  607, 1313,  702, 1313, 1313, 1313,
      270, 1313,  607,  270,  607,  704,  705,  271,  270, 1313,
      271,  270, 1313, 1057, 1313,  271,  272,  273,  271,  272,
      273, 1313, 1313, 1313,  272,  273, 1313,  272,  273,  270,
     1313, 1058,  270,  607,  607,  270,  271, 1313, 1059,  271,
     1060, 1313,  271, 1061, 1313,  272,  273,  270,  272,  273,
      270,  272,  273, 1063,  271, 1062, 1313,  271,  270, 1313,

     1313,  270, 1313,  272,  273,  271,  272,  273,  271,  270,
     1313, 1313, 1064,  270,  272,  273,  271,  272,  273, 1066,
      271,  270, 1065, 1313,  270,  272,  273,  270,  271,  272,
      273,  271, 1313, 1313,  271,  270, 1313,  272,  273, 1313,
      272,  273,  271,  272,  273, 1068, 1067,  270, 1070,  270,
     1313,  272,  273, 1069,  271, 1071,  271, 1313, 1313, 1313,
     1313,  270, 1313,  272,  273,  272,  273, 1072,  271,  270,
     1313, 1313,  270, 1313,  270, 1313,  271,  272,  273,  271,
     1313,  271, 1313, 1073, 1313,  272,  273, 1074,  272,  273,
      272,  273, 1313,  270, 1313,  607,  328,  345,  607, 1076,

      271,  328, 1313,  751,  346, 1313, 1313, 1075, 1313,  272,
      273,  755,  755,  347,  348,  755, 1313,  933,  811, 1313,
     1313,  811, 1313,  755, 1313,  755,  935,  811,  811,  811,
      328,  811,  811,  936, 1092,  328, 1313,  934, 1313,  811,
     1313,  811,  937,  938,  607,  749, 1313,  607, 1313, 1313,
      749, 1078,  940, 1313,  755,  755,  607,  349, 1313,  607,
      345, 1313,  349, 1313,  762, 1313, 1083,  346, 1313, 1313,
      811,  811,  811, 1313,  180,  811,  347,  348,  943, 1313,
     1081,  937,  937, 1313, 1093,  937,  607, 1313,  349,  607,
      181,  182,  349,  937, 1313,  937,  811,  811,  811,  349,

     1313,  811, 1313, 1313,  349, 1123,  944, 1313, 1313,  766,
      766,  607,  760,  766,  607,  345, 1313,  760, 1313,  950,
     1085,  766,  346,  766,  937,  937,  607,  180, 1313,  607,
     1313,  347,  348, 1090,  752,  607,  607, 1313,  345,  607,
     1313,  753, 1313,  181,  182,  346,  575,  607, 1313,  607,
      755,  756,  766,  766,  347,  348,  345, 1313, 1313,  345,
     1313, 1313, 1119,  346, 1091, 1313,  346, 1313,  180, 1313,
      345, 1313,  347,  348, 1313,  347,  348,  346,  607,  607,
      811,  180, 1313,  811,  181,  182,  347,  348,  945,  811,
      811, 1094,  345,  811,  180,  946,  575,  181,  182,  346,

      345,  811, 1095,  811,  947,  948, 1121,  346,  347,  348,
      181,  182, 1313,  345, 1313,  429,  347,  348, 1313, 1128,
      346, 1313,  180, 1313,  345, 1313, 1096,  575, 1313,  347,
      348,  346,  811,  811,  811, 1313, 1313,  811,  181,  182,
      347,  348,  945,  811,  811,  345, 1313,  811, 1098,  946,
     1097, 1126,  346,  345, 1313,  811,  180,  811,  947,  948,
      346,  347,  348, 1099,  345, 1313, 1313,  345, 1313,  347,
      348,  346,  181,  182,  346, 1313,  607, 1313,  381,  607,
      347,  348,  381,  347,  348, 1101,  811,  811,  811,  180,
      575,  811, 1120, 1313, 1313, 1313, 1088,  947,  947, 1100,

      345,  947, 1313,  345, 1313,  181,  182,  346, 1313,  947,
      346,  947,  811,  811, 1313, 1127,  347,  348, 1102,  347,
      348,  607,  381, 1313,  607, 1103, 1313,  381, 1313,  790,
      180,  811,  381, 1313,  811, 1313, 1313,  381, 1313,  971,
      947,  947,  607,  970,  180,  607,  181,  182, 1313, 1313,
      763,  607,  607, 1105, 1313,  607, 1313,  764,  794,  794,
      181,  182,  794,  607, 1130,  607,  766,  767,  607,  788,
      794,  607,  794, 1313,  788,  377,  977, 1313,  811,  183,
     1313,  811,  378, 1313,  183, 1313,  812, 1313, 1313, 1313,
     1110,  379,  380, 1313,  607,  607,  811, 1111, 1313,  811,

      987,  794,  794, 1313,  972,  811,  811,  377, 1313,  811,
     1313,  973, 1313,  180,  378, 1313, 1313,  811,  377,  811,
      974,  975, 1313,  379,  380,  378,  377, 1313, 1313,  181,
      182, 1313,  798,  378,  379,  380, 1313, 1313,  377, 1112,
     1313, 1313,  379,  380, 1133,  378, 1313, 1113,  811,  811,
      811, 1313, 1313,  811,  379,  380, 1115, 1313,  972,  811,
      811,  377, 1313,  811, 1313,  973, 1313, 1313,  378, 1313,
     1313,  811,  180,  811,  974,  975,  377,  379,  380, 1313,
      180, 1114, 1313,  378,  811, 1313,  183,  811,  181,  182,
      183, 1313,  379,  380,  814,  814,  181,  182,  814, 1313,

     1313, 1313,  811,  811,  811, 1313,  814,  811,  814, 1131,
     1313, 1116, 1108,  974,  974,  180, 1313,  974,  811,  605,
     1313,  811, 1313, 1313,  605,  974,  989,  974,  811,  811,
      180,  181,  182,  607,  605, 1313,  607,  814,  814,  605,
     1118,  817,  607, 1313,  605,  607,  181,  182,  605, 1313,
     1135, 1313, 1124,  180, 1313,  992,  974,  974,  607, 1313,
      180,  607, 1313, 1313, 1313, 1313,  791,  607,  607,  181,
      182,  607,  180,  792,  180, 1125,  181,  182, 1313,  607,
     1313,  607,  794,  795,  180, 1313,  180, 1313,  181,  182,
      181,  182,  180, 1313, 1129, 1313, 1132, 1134, 1313, 1313,

      181,  182,  181,  182, 1313, 1313, 1136,  180,  181,  182,
      607,  607,  811,  180, 1313,  811, 1313, 1137, 1313, 1313,
      813,  811,  811,  181,  182,  811,  180, 1313,  180,  181,
      182,  180, 1313,  811, 1313,  811,  814,  815,  180, 1313,
     1313, 1313,  181,  182,  181,  182,  180,  181,  182, 1138,
     1139,  180, 1313,  180,  181,  182,  180, 1140, 1313, 1313,
     1313,  180,  181,  182,  811,  811,  180,  181,  182,  181,
      182,  180,  181,  182,  180, 1142, 1141,  181,  182, 1144,
      180, 1313,  181,  182,  180, 1313, 1313,  181,  182,  180,
      181,  182,  180, 1143, 1313,  180,  181,  182,  180, 1313,

      181,  182, 1145,  180, 1313,  181,  182,  180,  181,  182,
     1146,  181,  182,  180,  181,  182,  180, 1147, 1313,  181,
      182,  180, 1313,  181,  182,  180, 1313, 1313,  180,  181,
      182,  180,  181,  182, 1313, 1148, 1313,  181,  182,  270,
     1149,  181,  182, 1152,  181,  182,  271,  181,  182, 1150,
     1313,  811,  274, 1151,  811,  272,  273,  274, 1313,  891,
     1153, 1313, 1313, 1154,  811, 1313,  274,  811,  894,  894,
      274, 1313,  894, 1046, 1313,  811,  698, 1159,  811, 1313,
      894,  698,  894, 1048,  607,  698, 1313,  607,  180, 1313,
      698,  270,  897,  607, 1313,  698,  607, 1156,  271,  698,

     1313, 1313, 1313,  270,  181,  182, 1051,  272,  273, 1157,
      271,  894,  894, 1313, 1313,  270, 1313,  270, 1313,  272,
      273, 1158,  271,  270,  271, 1313, 1313, 1313,  270, 1313,
      271,  272,  273,  272,  273,  271, 1313, 1313, 1313,  272,
      273,  270, 1313, 1161,  272,  273, 1313,  270,  271,  270,
     1313, 1313,  270, 1160,  271,  270,  271,  272,  273,  271,
      270, 1313,  271,  272,  273,  272,  273,  271,  272,  273,
     1313,  272,  273, 1313, 1313, 1162,  272,  273,  270, 1313,
      270, 1165, 1166, 1313, 1313,  271, 1163,  271, 1313, 1164,
     1313,  270, 1313, 1313,  272,  273,  272,  273,  271,  270,

     1167, 1313,  270, 1313,  270, 1313,  271,  272,  273,  271,
     1313,  271, 1313, 1313, 1313,  272,  273, 1168,  272,  273,
      272,  273,  270, 1313,  270, 1313, 1171, 1169,  270,  271,
     1313,  271, 1313, 1313,  180,  271, 1313, 1170,  272,  273,
      272,  273, 1313, 1313,  272,  273, 1313,  270, 1313,  270,
      181,  182, 1174, 1173,  271,  270,  271, 1313, 1313, 1172,
     1313, 1313,  271,  272,  273,  272,  273,  811,  328, 1313,
      811,  272,  273,  328, 1202,  934,  811, 1313,  328,  811,
      937,  937,  328, 1175,  937, 1313, 1176, 1177, 1313, 1078,
      811,  749,  937,  811,  937, 1313,  749, 1313, 1080,  607,

      749,  180,  607, 1313, 1313,  749, 1313,  940,  607, 1313,
      749,  607, 1179, 1313,  749, 1313, 1313,  181,  182,  811,
      349, 1083,  811,  937,  937,  349, 1313,  944,  811, 1313,
      349,  811,  947,  947,  349,  345,  947,  811,  760, 1313,
      811, 1085,  346,  760,  947, 1087,  947,  607,  760, 1313,
      607,  347,  348,  760, 1313,  950, 1313, 1313, 1313, 1181,
      607, 1313,  760,  607,  345, 1313,  760,  345, 1313, 1090,
      345,  346,  345, 1184,  346,  947,  947,  346, 1313,  346,
      347,  348, 1182,  347,  348, 1183,  347,  348,  347,  348,
      345, 1313, 1313, 1313,  345, 1313,  345,  346,  345, 1313,

     1313,  346, 1313,  346, 1313,  346,  347,  348, 1185, 1186,
      347,  348,  347,  348,  347,  348, 1188,  345,  575, 1313,
     1313,  345, 1313,  345,  346,  345, 1313, 1187,  346, 1313,
      346, 1313,  346,  347,  348, 1189, 1313,  347,  348,  347,
      348,  347,  348, 1191, 1313,  811,  381, 1192,  811,  180,
     1313,  381, 1190,  971,  575,  811, 1313,  381,  811,  974,
      974,  381, 1313,  974, 1313,  181,  182, 1105, 1313,  811,
      788,  974,  811,  974, 1313,  788, 1313, 1107,  607,  788,
     1204,  607, 1313, 1313,  788, 1313,  977,  607, 1313,  788,
      607, 1194,  377,  788,  377, 1313, 1313,  377, 1313,  378,

     1110,  378,  974,  974,  378,  377, 1313, 1313,  379,  380,
      379,  380,  378,  379,  380,  180, 1313,  377, 1313,  377,
     1195,  379,  380, 1196,  378, 1313,  378, 1313,  389, 1313,
     1313,  181,  182,  379,  380,  379,  380,  811,  605, 1313,
      811, 1200, 1197,  605,  180,  989,  811, 1313,  605,  811,
      180, 1313,  605, 1198,  180, 1313, 1199,  993,  180, 1118,
      181,  182,  180, 1313, 1313, 1313,  181,  182, 1313, 1313,
      181,  182,  180, 1313,  181,  182,  180, 1313,  181,  182,
      180, 1201,  180, 1313, 1206, 1203, 1313,  180,  181,  182,
     1205,  180,  181,  182,  180, 1313,  181,  182,  181,  182,

     1313,  180, 1208,  181,  182, 1313,  180,  181,  182, 1209,
      181,  182,  180, 1207,  180, 1313, 1210,  181,  182,  180,
     1313,  180,  181,  182,  180, 1313, 1211, 1212,  181,  182,
      181,  182,  180, 1313,  180,  181,  182,  181,  182,  180,
      181,  182,  180, 1214,  180, 1313, 1313, 1313,  181,  182,
      181,  182,  180, 1313,  180,  181,  182, 1313,  181,  182,
      181,  182, 1213, 1215,  180, 1313,  180, 1313,  181,  182,
      181,  182,  180, 1313, 1217, 1313, 1313, 1216,  180, 1313,
      181,  182,  181,  182,  180, 1313, 1313, 1313,  181,  182,
      811,  698, 1218,  811,  181,  182,  698, 1313, 1048, 1313,

      181,  182, 1219,  811, 1313,  698,  811,  270, 1313,  698,
     1220,  270, 1156,  270,  271,  270, 1221, 1313,  271, 1313,
      271, 1313,  271,  272,  273, 1313, 1313,  272,  273,  272,
      273,  272,  273, 1225, 1313,  270, 1313, 1313,  270, 1313,
      270, 1313,  271, 1313, 1222,  271, 1313,  271, 1223, 1313,
     1224,  272,  273,  270,  272,  273,  272,  273,  270, 1313,
      271,  270, 1227, 1313,  270,  271, 1226, 1313,  271,  272,
      273,  271, 1313, 1313,  272,  273,  270,  272,  273, 1313,
      272,  273, 1230,  271,  270, 1313, 1313, 1313, 1313, 1229,
      270,  271,  272,  273, 1231, 1228,  270,  271,  270, 1313,

      272,  273,  270,  271,  270,  271,  272,  273, 1313,  271,
     1313,  271,  272,  273,  272,  273, 1313,  180,  272,  273,
      272,  273,  270, 1232, 1234,  270, 1313, 1233,  270,  271,
     1313, 1313,  271,  181,  182,  271, 1313, 1313,  272,  273,
     1313,  272,  273, 1313,  272,  273, 1235,  811,  749, 1313,
      811,  811,  760,  749,  811, 1080, 1313,  760, 1236, 1087,
     1238, 1237,  811, 1313,  749,  811, 1313, 1313,  749, 1179,
     1313,  345, 1313, 1181,  811, 1313,  760,  811,  346,  345,
      760, 1313,  345, 1313,  345, 1313,  346,  347,  348,  346,
      345,  346, 1313, 1313,  180,  347,  348,  346,  347,  348,

      347,  348,  345, 1313, 1242, 1313,  347,  348, 1239,  346,
      181,  182, 1243,  345, 1313,  345, 1240, 1241,  347,  348,
      346,  345,  346, 1313,  180, 1253, 1313, 1313,  346,  347,
      348,  347,  348,  575,  575,  345, 1313,  347,  348,  345,
      181,  182,  346, 1313, 1244, 1313,  346,  811, 1313,  788,
      811,  347,  348,  788, 1245,  347,  348,  811,  788, 1313,
      811,  377, 1313,  788, 1313, 1107, 1246,  377,  378,  377,
     1313, 1313, 1313,  377,  378, 1313,  378,  379,  380, 1194,
      378,  575, 1313,  379,  380,  379,  380,  377, 1313,  379,
      380,  180, 1247, 1313,  378, 1249, 1313, 1313, 1248,  180,

     1313,  180, 1313,  379,  380, 1313, 1313,  181,  182, 1250,
      180, 1313,  180, 1251,  180,  181,  182,  181,  182,  180,
     1313, 1252, 1313,  389, 1313, 1313,  181,  182,  181,  182,
      181,  182,  180, 1313,  180,  181,  182,  180, 1254, 1313,
     1256, 1255,  180, 1313,  180, 1313,  180, 1313,  181,  182,
      181,  182,  180,  181,  182, 1258, 1313,  180,  181,  182,
      181,  182,  181,  182, 1259,  180, 1257,  180,  181,  182,
      180, 1313, 1261,  181,  182,  180, 1313, 1313,  270, 1313,
     1260,  181,  182,  181,  182,  271,  181,  182, 1313, 1313,
      270,  181,  182, 1313,  272,  273,  270,  271, 1313, 1313,

     1313,  270, 1262,  271, 1265,  180,  272,  273,  271, 1313,
     1263,  180,  272,  273, 1267, 1264, 1266,  272,  273,  270,
     1313,  181,  182,  270, 1313, 1313,  271,  181,  182, 1313,
      271, 1313, 1313, 1313,  270,  272,  273, 1313, 1268,  272,
      273,  271,  270,  931,  527,  270, 1313,  993,  270,  271,
      272,  273,  271,  270, 1269,  271,  270, 1313,  272,  273,
      271,  272,  273,  271,  272,  273,  931,  270, 1313,  272,
      273, 1313,  272,  273,  271,  270, 1271, 1313, 1270,  270,
     1313, 1313,  271,  272,  273, 1313,  271,  270, 1313, 1313,
      270,  272,  273,  345,  271,  272,  273,  271, 1272, 1313,

      346, 1273, 1313,  272,  273,  345,  272,  273,  345,  347,
      348, 1313,  346,  345, 1313,  346,  345, 1313, 1274, 1275,
      346,  347,  348,  346,  347,  348, 1277,  345, 1313,  347,
      348, 1276,  347,  348,  346,  345, 1313,  575,  345, 1313,
     1313, 1313,  346,  347,  348,  346,  377, 1279, 1313,  377,
     1278,  347,  348,  378,  347,  348,  378, 1313, 1281,  180,
     1280,  377,  379,  380,  377,  379,  380,  180,  378, 1313,
      389,  378,  180,  389,  180,  181,  182,  379,  380,  180,
      379,  380,  180,  181,  182,  180, 1283, 1313,  181,  182,
      181,  182, 1282,  180, 1313,  181,  182, 1313,  181,  182,

      180,  181,  182,  848,  180, 1313,  180, 1313, 1313,  181,
      182,  180, 1313, 1285, 1313, 1286,  181,  182,  180, 1284,
      181,  182,  181,  182,  270, 1287,  270,  181,  182,  270,
     1288,  271,  270,  271,  181,  182,  271,  270, 1313,  271,
      272,  273,  272,  273,  271,  272,  273, 1313,  272,  273,
     1313,  270, 1313,  272,  273,  180, 1313, 1313,  271, 1313,
     1313, 1313,  270, 1289, 1292, 1290, 1291,  272,  273,  271,
     1313,  181,  182,  270, 1293,  270, 1313, 1294,  272,  273,
      271, 1313,  271, 1313, 1295, 1313,  270, 1313,  345,  272,
      273,  272,  273,  271, 1313,  346, 1313,  931, 1313,  345,

     1313,  345,  272,  273,  347,  348,  346,  345,  346, 1313,
     1313, 1296,  345, 1313,  346,  347,  348,  347,  348,  346,
     1313, 1313, 1313,  347,  348,  345, 1313, 1297,  347,  348,
      345, 1313,  346, 1300, 1313, 1313, 1313,  346, 1298, 1313,
      180,  347,  348,  377, 1299,  180,  347,  348,  377,  575,
      378, 1301,  575,  180, 1313,  378,  181,  182,  180,  379,
      380,  181,  182, 1313,  379,  380,  270,  389, 1313,  181,
      182, 1313, 1313,  271,  181,  182, 1313, 1302, 1313,  270,
     1313, 1023,  272,  273,  389, 1303,  271,  270, 1304, 1313,
      270, 1313,  270, 1313,  271,  272,  273,  271,  270,  271,

     1313, 1305, 1313,  272,  273,  271,  272,  273,  272,  273,
      270, 1313,  270, 1306,  272,  273,  345,  271, 1307,  271,
     1313, 1313, 1313,  346,  345,  711,  272,  273,  272,  273,
     1313,  346,  347,  348, 1313,  345, 1313,  345,  575,  180,
      347,  348,  346,  345,  346, 1313,  575, 1313, 1313,  180,
      346,  347,  348,  347,  348,  181,  182,  270, 1313,  347,
      348, 1308,  270,  575,  271,  181,  182, 1313,  270,  271,
     1309, 1313,  575,  272,  273,  271,  270, 1313,  272,  273,
      345, 1313,  270,  271,  272,  273, 1313,  346,  345,  271,
     1313, 1313,  272,  273,  270,  346,  347,  348,  272,  273,

     1310,  271, 1313, 1313,  347,  348, 1313, 1313, 1313, 1313,
      272,  273, 1311, 1312, 1313, 1313, 1313, 1313, 1313,  575,
      101,  101,  101,  101,  101,  101,  101,  101,  101,  101,
      101,  159,  159,  159,  159,  159,  159,  159,  159,  159,
      159,  159,  164,  164,  164,  164,  164,  164,  164,  164,
      164,  164,  164,  167,  167,  167,  167,  167,  167,  167,
      167,  167,  167,  167,  170,  170,  170,  170,  170,  170,
      170,  170,  170,  170,  170,  179,  179, 1313, 1313,  179,
      179,  179,  183, 1313,  183,  183,  183,  183,  183,  183,
      183,  183,  269,  269, 1313, 1313,  269,  269,  269,  274,

     1313,  274,  274,  274,  274,  274,  274,  274,  274,  323,
      323, 1313, 1313,  323,  323,  323,  328, 1313,  328,  328,
      328,  328,  328,  328,  328,  328,  344,  344, 1313, 1313,
      344,  344,  344,  349, 1313,  349,  349,  349,  349,  349,
      349,  349,  349,  376,  376, 1313, 1313,  376,  376,  376,
      381, 1313,  381,  381,  381,  381,  381,  381,  381,  381,
      407, 1313, 1313, 1313,  407, 1313,  407,  407, 1313,  407,
      407,  411, 1313, 1313,  411,  411, 1313,  411,  411,  411,
      411,  411,  412,  412, 1313,  412,  412,  412,  412,  412,
      412,  412,  412,  413, 1313,  413,  413, 1313, 1313,  413,

     1313,  413,  415,  415,  415,  415,  415, 1313,  415,  509,
      509,  509,  509,  509, 1313,  509,  553,  553,  553,  553,
      553, 1313,  553,  563,  563,  563,  563,  563, 1313,  563,
      589,  589,  589,  589,  589, 1313,  589,  605, 1313,  605,
      605,  605,  605,  605,  605,  605,  605,  608, 1313, 1313,
     1313,  608,  608,  608,  608,  608,  608,  608,  698, 1313,
      698,  698,  698,  698,  698,  698,  698,  698,  700, 1313,
     1313, 1313,  700,  700,  700,  700,  700,  700,  700,  749,
     1313,  749,  749,  749,  749,  749,  749,  749,  749,  751,
     1313, 1313, 1313,  751,  751,  751,  751,  751,  751,  751,

      607, 1313, 1313, 1313,  607,  607,  607,  607,  607,  607,
      607,  760, 1313,  760,  760,  760,  760,  760,  760,  760,
      760,  762, 1313, 1313, 1313,  762,  762,  762,  762,  762,
      762,  762,  788, 1313,  788,  788,  788,  788,  788,  788,
      788,  788,  790, 1313, 1313, 1313,  790,  790,  790,  790,
      790,  790,  790,  809,  809, 1313,  809,  809,  809,  809,
      809,  809,  809,  809,  812, 1313, 1313, 1313,  812,  812,
      812,  812,  812,  812,  812,  817, 1313, 1313, 1313,  817,
      817,  817,  817,  817,  817,  817,  889,  889, 1313,  889,
      889,  889,  889,  889,  889,  889,  889,  891, 1313, 1313,

     1313,  891,  891,  891,  891,  891,  891,  891,  897, 1313,
     1313, 1313,  897,  897,  897,  897,  897,  897,  897,  932,
      932, 1313,  932,  932,  932,  932,  932,  932,  932,  932,
      934, 1313, 1313, 1313,  934,  934,  934,  934,  934,  934,
      934,  940, 1313, 1313, 1313,  940,  940,  940,  940,  940,
      940,  940,  811, 1313, 1313, 1313,  811,  811,  811,  811,
      811,  811,  811,  942,  942, 1313,  942,  942,  942,  942,
      942,  942,  942,  942,  944, 1313, 1313, 1313,  944,  944,
      944,  944,  944,  944,  944,  950, 1313, 1313, 1313,  950,
      950,  950,  950,  950,  950,  950,  969,  969, 1313,  969,

      969,  969,  969,  969,  969,  969,  969,  971, 1313, 1313,
     1313,  971,  971,  971,  971,  971,  971,  971,  977, 1313,
     1313, 1313,  977,  977,  977,  977,  977,  977,  977,  986,
      986, 1313,  986,  986,  986,  986,  986,  986,  986,  986,
      989, 1313, 1313, 1313,  989,  989,  989,  989,  989,  989,
      989,  991,  991, 1313,  991,  991,  991,  991,  991,  991,
      991,  991, 1045, 1045, 1313, 1045, 1045, 1045, 1045, 1045,
     1045, 1045, 1045, 1048, 1313, 1313, 1313, 1048, 1048, 1048,
     1048, 1048, 1048, 1048,  700, 1313, 1313, 1313,  700,  700,
      700,  700,  700,  700,  700, 1050, 1050, 1313, 1050, 1050,

     1050, 1050, 1050, 1050, 1050, 1050,  269,  269, 1313, 1313,
      269,  269,  269, 1077, 1077, 1313, 1077, 1077, 1077, 1077,
     1077, 1077, 1077, 1077, 1080, 1313, 1313, 1313, 1080, 1080,
     1080, 1080, 1080, 1080, 1080,  751, 1313, 1313, 1313,  751,
      751,  751,  751,  751,  751,  751, 1082, 1082, 1313, 1082,
     1082, 1082, 1082, 1082, 1082, 1082, 1082,  942,  942, 1313,
      942,  942,  942,  942,  942,  942,  942,  942,  944, 1313,
     1313, 1313,  944,  944,  944,  944,  944,  944,  944, 1084,
     1084, 1313, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1087, 1313, 1313, 1313, 1087, 1087, 1087, 1087, 1087, 1087,

     1087,  762, 1313, 1313, 1313,  762,  762,  762,  762,  762,
      762,  762, 1089, 1089, 1313, 1089, 1089, 1089, 1089, 1089,
     1089, 1089, 1089,  344,  344, 1313, 1313,  344,  344,  344,
      969,  969, 1313,  969,  969,  969,  969,  969,  969,  969,
      969,  971, 1313, 1313, 1313,  971,  971,  971,  971,  971,
      971,  971, 1104, 1104, 1313, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1104, 1107, 1313, 1313, 1313, 1107, 1107, 1107,
     1107, 1107, 1107, 1107,  790, 1313, 1313, 1313,  790,  790,
      790,  790,  790,  790,  790, 1109, 1109, 1313, 1109, 1109,
     1109, 1109, 1109, 1109, 1109, 1109,  376,  376, 1313, 1313,

      376,  376,  376,  986,  986, 1313,  986,  986,  986,  986,
      986,  986,  986,  986,  811, 1313, 1313, 1313,  811,  811,
      811,  811,  811,  811,  811,  812, 1313, 1313, 1313,  812,
      812,  812,  812,  812,  812,  812, 1117, 1117, 1313, 1117,
     1117, 1117, 1117, 1117, 1117, 1117, 1117,  991,  991, 1313,
      991,  991,  991,  991,  991,  991,  991,  991,  179,  179,
     1313, 1313,  179,  179,  179, 1155, 1155, 1313, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1178, 1178, 1313, 1178,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1180, 1180, 1313,
     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1180, 1193, 1193,

     1313, 1193, 1193, 1193, 1193, 1193, 1193, 1193, 1193,   23,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313
    } ;

static yyconst flex_int16_t yy_chk[8667] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    7,    7,
        7,    7,    7,    7,   19,   25,   19,   19,    7,   25,
       25,    7,    8,    8,    8,    8,    8,    8,   20,  178,
       20,   20,    8,  178,  178,    8,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   13,   13,
       13,   13,   13,   13,  974,   15,   15,   28,   15,   15,
       15,  947,   15,   16,   16,   29,   16,   16,   16,   62,
       16,  937,   90,   28,   28,   13,   15,   13,  894,   29,
      817,   13,   13,   62,   16,   13,   90,   13,   13,   31,
       13,   13,   31,   13,   13,   17,   17,  814,   17,   17,
       18,   18,   17,   18,   18,   31,   31,   18,   21,   33,
       21,   21,   21,   21,  109,   33,   21,   21,   21,   34,
      138,   35,  792,   36,  611,   33,   33,   37,  109,  611,
       21,   36,   36,   39,  138,   34,   34,   35,   35,   36,

       36,   38,   38,   37,   37,   38,  184,  184,  790,   39,
       39,  764,   39,   38,   39,   38,  275,  275,  762,   40,
       21,   21,   39,   21,   22,  179,   22,   22,   22,   22,
       39,   42,   22,   22,   22,   40,   40,  758,  180,   45,
      757,  179,  179,  753,   38,   38,   22,   42,   42,   43,
      183,   40,  180,   42,   40,   45,   45,   40,  751,   45,
      702,   45,  700,   42,  183,   43,   43,  329,  329,   42,
      163,   46,  163,  608,   45,   48,   22,   22,   47,   22,
       41,   43,   53,   43,   43,  604,  163,   46,   46,  270,
       43,   48,   48,   48,   47,   47,   41,   41,   53,   53,

      274,   41,   46,  270,   47,   41,   46,   48,  603,   41,
       41,   48,   41,   44,  274,   41,   49,   44,  350,  350,
       53,   44,   44,   50,   44,  382,  382,   44,  562,   44,
      324,   44,   49,   49,   49,   49,  328,   51,   49,   50,
       50,   50,   49,  345,  324,   50,   52,  704,   49,  561,
      328,  349,  704,   51,   51,   50,   51,  345,   54,  560,
       51,   50,   52,   52,   52,  349,   59,   51,   51,  559,
       51,  377,  558,   57,   54,   54,   54,   56,   52,  557,
       54,   52,   59,   59,   52,  377,   52,   54,  406,   57,
       57,   59,   59,   56,   56,  381,   54,   55,   55,   56,

       58,   55,   56,   56,   57,   55,   55,   60,   55,  381,
      755,   55,   56,   55,   55,  755,   58,   58,   58,  416,
      606,  606,   58,   60,   60,   61,   58,   64,  405,   65,
       64,   60,   61,  416,   64,  181,   65,   60,   58,  699,
      699,   61,   61,   64,   64,   65,   65,   66,  750,  750,
       67,  181,  181,   66,   66,   69,  766,   67,   68,   66,
       67,  766,   69,   66,   66,   68,   67,   67,  175,  175,
       68,   69,   69,  510,   68,   68,   70,   70,   71,  343,
       70,  342,   73,  554,   74,   71,   76,  510,   70,   73,
       70,   74,  564,   76,   71,   71,  341,  554,   73,   73,

       74,   74,   76,   76,   76,  340,  564,  107,   73,  106,
       75,  175,  175,  190,   71,   74,   78,   75,   74,   70,
       70,   72,  590,   78,   86,   74,   75,   75,   72,  190,
      190,   86,   78,   78,  605,   78,  590,   72,   72,  794,
       86,   86,   75,   72,  794,   75,   23,   79,  605,    0,
       72,   72,  190,   72,   79,   72,   72,  698,   72,   77,
       86,   87,    0,   79,   79,   79,   77,   80,   87,   79,
        0,  698,    0,  749,   80,   77,   77,   87,   87,   87,
       77,   81,   77,   80,   80,   82,   80,  749,   81,   80,
       77,  185,   82,  196,  185,   77,   77,   81,   81,   83,

       81,   82,   82,   80,  760,   84,   83,  185,  185,  196,
      196,    0,   84,  189,   81,   83,   83,   82,  760,   85,
       82,   84,   84,  761,  761,   83,   85,    0,   83,  189,
      189,    0,   88,  789,  789,   85,   85,   84,   84,   88,
       89,   85,   84,   84,   88,  189,   96,   89,   88,   88,
      192,   85,   92,   96,   93,   92,   89,   89,    0,   92,
       93,   93,   96,   96,  788,    0,  192,  192,   92,   92,
       93,   93,   94,   94,   94,   94,   94,   94,  788,   94,
        0,   95,    0,    0,   97,    0,   94,  192,   95,   95,
       95,   97,   99,    0,  193,   94,   94,   95,   95,   99,

       97,   97,   98,   98,    0,    0,   98,    0,   99,   99,
      193,  193,  195,    0,   98,  193,   98,  102,  102,  102,
      102,  102,  102,   99,    0,    0,  203,  102,  195,  195,
      102,  104,  104,  104,  104,  104,  104,    0,  195,    0,
        0,  104,  203,  203,  104,   98,   98,  105,  105,  105,
      105,  105,  105,    0,  108,    0,  112,  105,  114,  112,
      105,  108,  115,  112,  114,  114,    0,    0,  194,  115,
      108,  108,  112,  112,  114,  114,  116,    0,  115,  115,
      120,    0,  117,  116,  194,  194,    0,  120,    0,  117,
      194,    0,  116,  116,  117,    0,  120,  120,  117,  117,

      121,  121,  122,  386,  121,    0,  124,    0,  123,  122,
      386,  386,  121,  124,  121,  123,  386,  197,  122,  122,
      125,    0,  124,  124,  123,  123,    0,  125,    0,    0,
        0,    0,  124,  197,  197,    0,  125,  125,  122,  197,
      123,  126,    0,  121,  121,  123,  127,    0,  126,  134,
        0,    0,  125,  127,  128,  125,  134,  126,  126,  126,
        0,  128,  127,  127,  797,  134,  134,  127,  129,  127,
      128,  128,  128,  797,    0,  129,  128,  797,  797,  130,
      797,  134,    0,  127,  129,  129,  130,    0,    0,    0,
      129,    0,  131,    0,  132,  130,  130,  186,  130,  131,

      133,  132,  206,  186,  129,  137,    0,  133,  131,  131,
      132,  132,  137,  186,  186,    0,  133,  133,  206,  206,
      132,  137,  137,  139,  131,  140,  139,  131,  141,    0,
      139,  140,  140,  133,    0,  141,  142,  133,  206,  139,
      139,  140,  140,  142,  141,  141,  143,  143,  145,  199,
      143,    0,  142,  142,    0,  145,  145,  145,  143,    0,
      143,  145,  146,    0,  147,  199,  199,  145,  148,  146,
      199,  147,    0,    0,    0,  148,    0,    0,  146,  146,
      147,  147,    0,  147,  148,  148,    0,  148,    0,  143,
      143,  144,    0,  146,  149,    0,    0,    0,  144,  150,

        0,  149,  151,    0,  148,    0,  150,  144,  144,  151,
      149,  149,    0,  144,    0,  150,  150,    0,  151,  151,
      144,  144,  152,    0,  187,  144,  144,  149,  153,  152,
      154,  151,  187,  187,  150,  153,  198,  154,  152,  152,
      187,  187,    0,    0,  153,  153,  154,  154,  154,    0,
        0,    0,  198,  198,  152,    0,    0,    0,  198,    0,
      152,    0,    0,    0,  153,  155,  155,  155,  155,  155,
      155,    0,  182,  182,  182,  155,    0,  182,  155,  157,
      157,  157,  157,  157,  157,  182,    0,  182,    0,  157,
        0,  200,  157,  158,  158,  158,  158,  158,  158,    0,

      188,  188,  191,  158,  188,    0,  158,  200,  200,    0,
      201,    0,  188,    0,  188,    0,  182,  182,  191,  191,
      200,  200,  200,  202,    0,    0,  201,  201,  191,  200,
      204,  191,  201,  205,    0,  207,    0,    0,  208,  202,
      202,    0,  202,  188,  188,  209,  204,  204,  210,  205,
      205,  207,  207,  211,  208,  208,  205,  207,  208,  202,
      204,  209,  209,  209,  210,  210,    0,  212,    0,  211,
      211,    0,    0,    0,  213,  208,  214,    0,  215,    0,
      210,  216,    0,  212,  212,  217,    0,    0,  211,  212,
      213,  213,  214,  214,  215,  215,  218,  216,  216,  213,

        0,  217,  217,  217,  219,    0,  220,    0,  221,    0,
        0,    0,  218,  218,  214,  222,  218,    0,  216,  223,
      219,  219,  220,  220,  221,  221,  224,  221,  225,    0,
        0,  222,  222,  222,  227,  223,  223,  220,  226,  219,
      228,    0,  224,  224,  225,  225,    0,  222,    0,  229,
      227,  227,    0,  230,  226,  226,  228,  228,    0,    0,
      231,  228,  232,  224,  225,  229,  229,    0,  226,  230,
      230,  233,    0,  234,    0,  227,  231,  231,  232,  232,
        0,    0,    0,  235,  229,  236,    0,  233,  233,  234,
      234,  237,  232,  230,  238,  231,  234,  239,  233,  235,

      235,  236,  236,  241,    0,    0,  240,  237,  237,  243,
      238,  238,    0,  239,  239,  235,    0,  244,    0,  241,
      241,    0,  240,  240,  242,  243,  243,  237,    0,  238,
      239,  238,  240,  244,  244,  243,  245,    0,  240,  241,
      242,  242,  246,    0,  247,  242,    0,    0,  248,    0,
        0,  249,  245,  245,  244,    0,    0,  245,  246,  246,
      247,  247,    0,  250,  248,  248,  248,  249,  249,    0,
      251,    0,  245,  247,  252,  245,  245,  248,  246,  250,
      250,  253,    0,  249,  256,  248,  251,  251,  254,    0,
      252,  252,    0,    0,    0,  250,  255,  253,  253,    0,

      256,  256,  251,  253,  254,  254,  254,  251,  257,  252,
      254,  258,  255,  255,  259,  255,    0,  260,    0,  261,
      256,  262,    0,  263,  257,  257,  255,  258,  258,    0,
      259,  259,  259,  260,  260,  261,  261,  262,  262,  263,
      263,  258,  264,  260,  265,  263,  266,    0,  264,    0,
        0,  267,    0,  268,  261,    0,  262,  267,  264,  264,
      265,  265,  266,  266,    0,  269,  265,  267,  267,  268,
      268,  268,  269,  271,    0,    0,  265,  272,    0,    0,
      271,  269,  269,  266,  272,    0,  273,  273,  273,  271,
      271,  273,    0,  272,  272,  276,    0,  277,  276,  273,

      278,  273,  276,  277,  277,  415,    0,  278,  279,    0,
        0,  276,  276,  277,  277,  279,  278,  278,    0,  280,
        0,  415,  415,    0,  279,  279,  280,  282,  281,  281,
      273,  273,  281,  419,  282,  280,  280,    0,    0,  283,
      281,  284,  281,  282,  282,  285,  283,    0,  284,  419,
      419,    0,  285,  286,    0,  283,  283,  284,  284,  284,
      286,  285,  285,  282,  285,    0,    0,    0,  419,  286,
      286,  281,  281,  283,  287,    0,    0,    0,  288,    0,
      289,  287,  290,  286,  286,  288,  422,  289,    0,  290,
      287,  287,    0,  291,  288,  288,  289,  289,  290,  290,

      291,  292,  422,  422,  293,    0,    0,  288,  292,  291,
      291,  293,  289,    0,  291,  294,    0,  292,  292,  290,
      293,  293,  294,  295,    0,    0,  296,    0,  298,    0,
      295,  294,  294,  296,    0,  298,  420,    0,    0,  295,
      295,  293,  296,  296,  298,  298,    0,    0,    0,  299,
      294,  297,  420,  420,    0,  295,  299,  297,  297,  429,
        0,  297,  420,  296,  300,  299,  299,  297,  297,  299,
      301,  300,  302,  297,    0,  429,  429,  301,  303,  302,
      300,  300,    0,  304,    0,  303,  301,  301,  302,  302,
      304,  305,  301,    0,  303,  303,    0,  303,  305,  304,

      304,  306,  307,  306,  302,  308,  304,  305,  305,  307,
      306,  306,  308,    0,    0,  303,  306,  306,  307,  307,
      310,  308,  308,  309,    0,  421,  307,  310,  311,  309,
      309,  312,  308,    0,    0,  311,  310,  310,  312,  309,
      309,  421,  421,  421,  311,  311,  313,  312,  312,  310,
      311,  314,    0,  313,  315,  312,    0,  316,  314,  309,
      311,  315,  313,  313,  316,  317,    0,  314,  314,    0,
      315,  315,  317,  316,  316,    0,  315,    0,  318,    0,
      319,  317,  317,  320,  317,  318,  314,  319,    0,    0,
      320,  321,  316,    0,  318,  318,  319,  319,  321,  320,

      320,    0,    0,  322,    0,  323,    0,  321,  321,  320,
      322,  325,  323,  318,    0,    0,  326,    0,  325,  322,
      322,  323,  323,  326,    0,    0,  321,  325,  325,  327,
      327,  327,  326,  326,  327,    0,  330,  335,  335,  330,
      331,  335,  327,  330,  327,    0,  331,  331,  336,  335,
        0,  335,  330,  330,    0,  336,  331,  331,  332,  332,
      332,  332,  332,  332,  336,  336,  425,    0,  332,  334,
        0,  332,    0,  327,  327,    0,  334,  334,  334,    0,
      335,  335,  425,  425,  425,  334,  334,  337,  337,  337,
      337,  337,  337,    0,  348,  348,  348,  337,    0,  348,

      337,  339,  339,  339,  339,  339,  339,  348,  344,  348,
      346,  339,  347,    0,  339,  344,    0,  346,    0,  347,
        0,    0,    0,    0,  344,  344,  346,  346,  347,  347,
      351,    0,    0,  351,  352,    0,  353,  351,  348,  348,
      352,  352,    0,  353,  354,  354,  351,  351,  354,    0,
      352,  352,  353,  353,  355,    0,  354,  357,  354,  358,
        0,  355,  356,    0,  357,  359,  358,  423,    0,  356,
      355,  355,  359,  357,  357,  358,  358,    0,  356,  356,
        0,  359,  359,  423,  423,    0,    0,  354,  354,  357,
      355,  360,  356,  356,  361,    0,  358,  363,  360,  362,

      359,  361,  423,    0,  363,    0,  362,  360,  360,  362,
      361,  361,  364,  363,  363,  362,  362,    0,    0,  364,
      365,  362,    0,  360,    0,  366,    0,  365,  364,  364,
      424,  361,  366,  367,  364,    0,  365,  365,  368,    0,
      367,  366,  366,    0,  369,  368,  424,  424,  366,  367,
      367,  369,    0,    0,  368,  368,    0,  365,  370,    0,
      369,  369,  368,  367,  433,  370,  371,    0,    0,  367,
      367,  369,  424,  371,  370,  370,    0,  372,    0,    0,
      433,  433,  371,  371,  372,    0,    0,  370,  371,  373,
        0,  374,    0,  372,  372,  433,  373,  375,  374,    0,

        0,  372,  376,    0,  375,  373,  373,  374,  374,  376,
        0,  373,  428,  375,  375,  378,    0,  379,  376,  376,
        0,    0,  378,    0,  379,    0,  374,  427,  428,  428,
      428,  378,  378,  379,  379,  380,  380,  380,  383,    0,
      380,  383,    0,  427,  427,  383,  384,  427,  380,    0,
      380,    0,  384,  384,  383,  383,  385,  385,  387,    0,
      385,    0,  384,  384,    0,  387,  388,    0,  385,    0,
      385,  389,    0,  388,  387,  387,  387,  390,  389,  380,
      380,    0,  388,  388,  390,  388,    0,  389,  389,    0,
        0,  391,    0,  390,  390,    0,    0,  392,  391,  385,

      385,    0,  393,    0,  392,    0,  390,  391,  391,  393,
      394,    0,  391,  392,  392,    0,  395,  394,  393,  393,
        0,  396,  393,  395,    0,    0,  394,  394,  396,  397,
        0,    0,  395,  395,  392,    0,  397,  396,  396,    0,
      395,    0,  394,  398,    0,  397,  397,  399,    0,    0,
      398,  400,    0,    0,  399,  401,    0,  396,  400,  398,
      398,  397,  401,  399,  399,    0,  399,  400,  400,    0,
      426,  401,  401,    0,    0,    0,    0,  400,  398,  402,
      402,  402,  402,  402,  402,    0,  426,  426,    0,  402,
      401,    0,  402,  404,  404,  404,  404,  404,  404,  426,

        0,    0,  430,  404,    0,  431,  404,  417,    0,    0,
      417,    0,    0,    0,    0,  417,  417,  417,  430,  430,
      417,  431,  431,  434,    0,  432,    0,  417,  417,    0,
      417,  417,  417,  436,  430,  431,    0,  435,  431,  434,
      434,  432,  432,    0,  434,  432,  432,    0,    0,  436,
      436,  438,    0,  435,  435,  436,  437,    0,    0,  417,
      417,  418,  432,  439,  418,    0,    0,  438,  438,  418,
      418,  418,  437,  437,  418,  435,  440,    0,  441,  439,
      439,  418,  418,  442,  418,  418,  418,  443,    0,  437,
        0,    0,  440,  440,  441,  441,    0,    0,    0,  442,

      442,  444,    0,  443,  443,  442,    0,  441,    0,  445,
        0,  446,    0,  418,  418,  447,  440,  444,  444,  448,
        0,  447,  444,    0,  443,  445,  445,  446,  446,  449,
        0,  447,  447,  451,    0,  448,  448,  450,    0,  445,
      452,    0,  453,    0,    0,  449,  449,    0,    0,  451,
      451,  446,  454,  450,  450,  451,  452,  452,  453,  453,
      455,  452,  449,  456,  453,  457,  450,    0,  454,  454,
      458,    0,  459,  454,  460,    0,  455,  455,    0,  456,
      456,  457,  457,  456,  461,    0,  458,  458,  459,  459,
      460,  460,  462,  455,  463,  459,    0,  464,    0,    0,

      461,  461,  458,    0,    0,    0,  465,    0,  462,  462,
      463,  463,  460,  464,  464,  466,  464,  467,    0,  461,
        0,  462,  465,  465,  463,  468,    0,  469,    0,  470,
        0,  466,  466,  467,  467,    0,  466,  471,    0,  472,
        0,  468,  468,  469,  469,  470,  470,  468,  473,    0,
      470,    0,  469,  471,  471,  472,  472,    0,  474,    0,
        0,  468,  472,  475,  473,  473,  476,    0,  471,  477,
        0,  478,    0,  473,  474,  474,  472,  479,    0,  475,
      475,  480,  476,  476,    0,  477,  477,  478,  478,  481,
        0,    0,  476,  479,  479,  482,    0,  480,  480,  479,

      475,    0,  483,    0,  484,  481,  481,  477,  485,  478,
        0,  482,  482,  486,    0,  487,  480,  482,  483,  483,
      484,  484,  488,    0,  485,  485,  484,    0,  489,  486,
      486,  487,  487,  487,  489,  490,    0,  483,  488,  488,
      491,    0,  492,  488,  489,  489,  494,    0,  493,    0,
      496,  490,  490,  486,  495,    0,  491,  491,  492,  492,
      499,  491,  494,  494,  493,  493,  496,  496,    0,  497,
      495,  495,  490,  498,    0,    0,  499,  499,    0,  492,
      491,  493,  494,  499,  495,  497,  497,  496,  500,  498,
      498,  497,  501,  498,    0,  497,  502,    0,    0,  503,

        0,    0,  504,    0,  500,  500,  505,    0,  501,  501,
      507,  501,  502,  502,  500,  503,  503,  506,  504,  504,
        0,    0,  505,  505,  500,    0,  507,  507,  508,    0,
      503,  509,    0,  506,  506,  505,  502,  504,  509,  513,
        0,  507,  506,  515,  508,  508,  513,  509,  509,    0,
      515,  810,  810,  810,  810,  513,  513,  810,    0,  515,
      515,  514,    0,    0,    0,  508,  511,  613,  514,  511,
        0,  513,    0,    0,  511,  511,  511,  514,  514,  511,
        0,  511,  617,  613,  613,  516,  511,  511,    0,  511,
      511,  511,  516,  517,    0,  517,    0,  514,  617,  617,

      518,  516,  516,  517,  613,  520,    0,  518,  517,  517,
      616,    0,  520,    0,    0,  516,  518,  518,  511,  511,
      512,  520,  520,  512,    0,    0,  616,  616,  512,  512,
      512,  519,    0,  512,    0,  512,  616,  626,  519,  522,
      512,  512,  520,  512,  512,  512,  522,  519,  519,  521,
        0,  521,    0,  626,  626,  522,  522,    0,  521,  521,
      521,  522,  523,  626,  521,  521,  519,  521,  524,  523,
      525,    0,  512,  512,  526,  524,    0,  525,  523,  523,
        0,  526,    0,    0,  524,  524,  525,  525,    0,  527,
      526,  526,  523,  528,    0,  525,  527,  529,  524,  526,

      528,  530,    0,    0,  529,  527,  527,    0,  530,  528,
      528,  524,  531,  529,  529,  532,    0,  530,  530,  531,
        0,    0,  532,  528,  528,    0,  529,  533,  531,  531,
        0,  532,  532,    0,  533,  534,  530,  532,  535,    0,
      536,    0,  534,  533,  533,  535,  537,  536,    0,  533,
      621,  534,  534,  537,  535,  535,  536,  536,  538,    0,
        0,  539,  537,  537,  537,  538,  621,  621,  539,    0,
      535,  614,  534,  540,  538,  538,  536,  539,  539,  541,
      540,    0,    0,  539,  542,  621,  541,  614,  614,  540,
      540,  542,  543,    0,  538,  541,  541,  544,  540,  543,

      542,  542,    0,  545,  544,    0,    0,  614,  543,  543,
      545,    0,  543,  544,  544,  546,    0,    0,    0,  545,
      545,    0,  546,  547,    0,    0,  542,    0,  545,  548,
      547,  546,  546,    0,  544,    0,  548,  549,    0,  547,
      547,    0,  550,  547,  549,  548,  548,  548,  551,  550,
        0,    0,  546,  549,  549,  551,    0,  549,  550,  550,
      552,    0,    0,    0,  551,  551,    0,  552,  553,    0,
        0,  563,  550,  549,  568,  553,  552,  552,  563,  551,
        0,  568,  567,    0,  553,  553,  572,  563,  563,  567,
      568,  568,    0,  572,    0,    0,  552,  555,  567,  567,

      555,    0,  572,  572,  568,  555,  555,  555,  569,    0,
      555,  615,  555,    0,  567,  569,  572,  555,  555,  571,
      555,  555,  555,  570,  569,  569,  571,  615,  615,    0,
      570,  569,    0,    0,    0,  571,  571,    0,    0,  570,
      570,    0,    0,    0,  569,    0,  573,  615,    0,  555,
      555,  556,  618,  573,  556,    0,  571,    0,  570,  556,
      556,  556,  573,  573,  556,    0,  556,  630,  618,  618,
      574,  556,  556,    0,  556,  556,  556,  574,    0,    0,
      618,  575,    0,  630,  630,  578,  574,  574,  575,  573,
        0,  630,  578,  576,    0,  574,    0,  575,  575,    0,

      576,  578,  578,  556,  556,  565,    0,  578,  565,  576,
      576,    0,    0,  565,  565,  565,    0,    0,  565,    0,
      565,    0,    0,  576,  576,  565,  565,  579,  565,  565,
      565,  577,    0,  580,  579,  581,    0,  627,  577,  583,
      580,    0,  581,  579,  579,    0,  583,  577,  577,  580,
      580,  581,  581,  627,  627,  583,  583,  565,  565,  566,
        0,  583,  566,  627,  579,  580,  577,  566,  566,  566,
      582,  581,  566,    0,  566,    0,  632,  582,  584,  566,
      566,    0,  566,  566,  566,  584,  582,  582,  582,  585,
        0,  586,  632,  632,  584,  584,  585,  587,  586,    0,

        0,    0,    0,    0,  587,  585,  585,  586,  586,  585,
      629,  566,  566,  587,  587,  588,  586,  587,  589,    0,
      584,  595,  588,    0,  620,  589,  629,  629,  595,    0,
        0,  588,  588,  588,  589,  589,  591,  595,  595,  591,
      620,  620,    0,  595,  591,  591,  591,  593,  629,  591,
      623,  591,  620,    0,  593,  596,  591,  591,  597,  591,
      591,  591,  596,  593,  593,  597,  623,  623,  623,  598,
        0,  596,  596,    0,  597,  597,  598,    0,    0,    0,
      599,    0,    0,  593,  596,  598,  598,  599,  591,  591,
      592,  619,    0,  592,  597,    0,  599,  599,  592,  592,

      592,    0,  600,  592,    0,  592,  598,  619,  619,  600,
      592,  592,    0,  592,  592,  592,  601,  599,  600,  600,
      602,    0,  600,  601,  622,    0,    0,  602,  619,    0,
        0,    0,  601,  601,    0,    0,  602,  602,  600,    0,
      622,  622,  592,  592,  594,    0,  624,  601,  625,  609,
      609,  594,  609,    0,    0,  609,  602,  609,    0,  622,
      594,  594,  624,  624,  625,  625,    0,  594,    0,  628,
      625,  609,  624,  631,  594,    0,  594,    0,  624,  633,
      594,  594,  634,  594,  610,  628,  628,  610,    0,  631,
      631,    0,  610,  610,  610,  633,  633,  610,  634,  634,

      635,    0,  631,    0,    0,  610,  628,  610,  610,  610,
        0,    0,  636,    0,  633,    0,  635,  635,  638,    0,
      634,    0,    0,  639,    0,    0,  637,    0,  636,  636,
        0,  635,    0,    0,  638,  638,  610,  610,  612,  639,
      639,  612,  637,  637,  637,    0,  612,  612,  612,  636,
      640,  612,  642,  638,  639,  641,    0,    0,    0,  612,
      643,  612,  612,  612,    0,  644,  640,  640,  642,  642,
      645,  641,  641,  642,    0,  640,  643,  643,    0,    0,
        0,  644,  644,  646,    0,  647,  645,  645,  648,    0,
      612,  612,  649,  641,  644,  650,  643,  651,    0,  646,

      646,  647,  647,  653,  648,  648,  652,    0,  649,  649,
      647,  650,  650,  651,  651,    0,    0,  654,  649,  653,
      653,  653,  652,  652,  650,  655,    0,  656,    0,  651,
      657,    0,  652,  654,  654,    0,    0,  658,    0,  654,
      659,  655,  655,  656,  656,  660,  657,  657,  661,    0,
      662,    0,  657,  658,  658,    0,  659,  659,  656,  663,
        0,  660,  660,    0,  661,  661,  662,  662,  664,    0,
      665,    0,  662,  666,  661,  663,  663,    0,  667,    0,
      663,  668,  660,    0,  664,  664,  665,  665,  669,  666,
      666,    0,    0,  666,  667,  667,  670,  668,  668,  668,

      671,    0,  665,    0,  669,  669,  672,    0,  667,    0,
        0,  673,  670,  670,  669,    0,  671,  671,  674,    0,
      671,  675,  672,  672,  676,    0,  672,  673,  673,  677,
        0,  678,  670,  679,  674,  674,  680,  675,  675,  674,
      676,  676,  681,    0,    0,  677,  677,  678,  678,  679,
      679,    0,  680,  680,  682,    0,    0,  675,  681,  681,
      676,  683,    0,    0,  684,    0,  678,  677,  685,  679,
      682,  682,  682,  686,    0,  687,    0,  683,  683,  681,
      684,  684,    0,    0,  685,  685,  688,    0,    0,  686,
      686,  687,  687,  689,    0,  686,  690,    0,  691,  685,

        0,    0,  688,  688,  688,  692,    0,    0,  693,  689,
      689,    0,  690,  690,  691,  691,  694,  687,    0,  695,
        0,  692,  692,  692,  693,  693,  696,    0,  690,  697,
      693,    0,  694,  694,  691,  695,  695,    0,  694,    0,
      819,    0,  696,  696,  696,  697,  697,  701,  701,  697,
      701,  706,    0,  701,    0,  701,  819,  819,  706,  708,
        0,    0,    0,    0,    0,  707,  708,  706,  706,  701,
      703,  706,  707,  703,    0,  708,  708,    0,  703,  703,
      703,  707,  707,  703,    0,  703,    0,    0,    0,  709,
        0,  703,  710,  703,  703,  703,  709,  708,    0,  710,

      711,  707,    0,  712,    0,  709,  709,  711,  710,  710,
      712,    0,    0,    0,  713,  709,  711,  711,    0,  712,
      712,  713,  703,  703,  705,    0,    0,  705,    0,  710,
      713,  713,  705,  705,  705,  712,  714,  705,    0,  715,
        0,    0,  823,  714,  713,  705,  715,  705,  705,  705,
        0,  713,  714,  714,  716,  715,  715,  717,  823,  823,
        0,  716,    0,  823,  717,  718,  714,    0,  719,  715,
      716,  716,  718,  717,  717,  719,  705,  705,    0,  716,
        0,  718,  718,  720,  719,  719,  719,  721,    0,  824,
      720,  722,    0,    0,  721,  723,  718,    0,  722,  720,

      720,    0,  723,  721,  721,  824,  824,  722,  722,  721,
        0,  723,  723,  722,  724,  824,  725,    0,  726,    0,
      821,  724,  727,  725,    0,  726,    0,  723,    0,  727,
      724,  724,  725,  725,  726,  726,  821,  821,  727,  727,
      727,  728,  821,  729,    0,  730,    0,  724,  728,    0,
      729,  825,  730,  725,    0,    0,  726,  728,  728,  729,
      729,  730,  730,    0,  731,    0,  734,  825,  825,  732,
      728,  731,  733,  734,    0,    0,  732,    0,    0,  733,
      731,  731,  734,  734,  729,  732,  732,  732,  733,  733,
      735,    0,  736,  733,    0,  737,    0,  735,  738,  736,

        0,  826,  737,    0,    0,  738,  735,  735,  736,  736,
      735,  737,  737,    0,  738,  738,  739,  826,  826,  740,
      738,    0,    0,  739,  736,  737,  740,  741,    0,    0,
      744,    0,  739,  739,  741,  740,  740,  744,  739,    0,
        0,  742,    0,  741,  741,  743,  744,  744,  742,  822,
        0,    0,  743,  745,    0,    0,  740,  742,  742,  744,
      745,  743,  743,  741,    0,  822,  822,  742,  822,  745,
      745,  746,    0,  747,    0,    0,  748,  746,  746,    0,
      747,    0,  743,  748,    0,  745,    0,  746,  746,  747,
      747,    0,  748,  748,    0,  752,  752,  747,  752,    0,

        0,  752,    0,  752,    0,    0,  827,  763,  763,    0,
      763,    0,    0,  763,    0,  763,    0,  752,  754,  829,
        0,  754,  827,  827,    0,    0,  754,  754,  754,  763,
      768,  754,    0,  754,    0,  829,  829,  768,  769,  754,
        0,  754,  754,  754,  834,  769,  768,  768,  829,  771,
      768,  770,    0,    0,  769,  769,  771,  772,  770,    0,
      834,  834,  774,    0,  772,  771,  771,  770,  770,  774,
      754,  754,  756,  772,  772,  756,  769,  770,  774,  774,
      756,  756,  756,  773,  774,  756,  771,  775,    0,  772,
      773,  836,    0,  756,  775,  756,  756,  756,  776,  773,

      773,  773,    0,  775,  775,  776,  777,  836,  836,  775,
        0,  779,    0,  777,  776,  776,  820,    0,  779,    0,
        0,    0,  777,  777,  756,  756,  765,  779,  779,  765,
        0,  776,  820,  820,  765,  765,  765,  778,  820,  765,
        0,  765,  835,  777,  778,    0,    0,  765,  820,  765,
      765,  765,  779,  778,  778,  778,  780,    0,  835,  835,
      781,    0,  835,  780,    0,    0,    0,  781,    0,  828,
        0,    0,  780,  780,  780,  782,  781,  781,  765,  765,
      767,  781,  782,  767,    0,  828,  828,    0,  767,  767,
      767,  782,  782,  767,    0,  782,  838,    0,    0,  783,

      828,  767,  784,  767,  767,  767,  783,    0,    0,  784,
      785,    0,  838,  838,  786,  783,  783,  785,  784,  784,
        0,  786,  838,    0,  784,    0,  785,  785,  787,  783,
      786,  786,  767,  767,    0,  787,  796,    0,    0,    0,
      786,    0,  830,  796,  787,  787,  831,  785,  791,  791,
      798,  791,  796,  796,  791,    0,  791,  798,  830,  830,
        0,  799,  831,  831,  831,  787,  798,  798,  799,    0,
      791,  793,  796,  830,  793,    0,    0,  799,  799,  793,
      793,  793,  800,    0,  793,    0,  793,    0,    0,  800,
      801,  799,  793,  803,  793,  793,  793,  801,  800,  800,

      803,  802,    0,    0,  804,    0,  801,  801,  802,  803,
      803,  804,  800,  843,    0,  801,    0,  802,  802,    0,
      804,  804,    0,  793,  793,  795,  804,    0,  795,  843,
      843,  803,  802,  795,  795,  795,  805,    0,  795,  843,
      806,    0,    0,  805,  807,    0,  795,  806,  795,  795,
      795,  807,  805,  805,  832,    0,  806,  806,  808,    0,
      807,  807,    0,    0,    0,  808,    0,    0,  833,  806,
      832,  832,  805,  839,  808,  808,  807,  795,  795,    0,
      809,  809,  808,  809,  833,  833,  809,    0,  809,  839,
      839,  832,  813,  813,  839,  813,    0,    0,  813,  833,

      813,    0,  809,  812,  840,    0,  812,    0,    0,    0,
        0,  812,  812,  812,  813,    0,  812,  842,  816,  816,
      840,  840,  816,    0,  812,  840,  812,  812,  812,  837,
      816,  841,  816,  842,  842,    0,  818,  818,    0,  818,
        0,    0,  818,    0,  818,  837,  837,  841,  841,    0,
        0,  837,  845,  841,  842,  812,  812,  815,  818,  844,
      815,  816,  816,    0,    0,  815,  815,  815,  845,  845,
      815,  846,    0,  847,    0,  844,  844,  844,  815,  848,
      815,  815,  815,  849,    0,  850,    0,  846,  846,  847,
      847,  851,  846,    0,    0,  848,  848,    0,  852,  849,

      849,  850,  850,    0,    0,  853,    0,  851,  851,  815,
      815,  847,  854,    0,  852,  852,    0,  855,    0,  849,
      852,  853,  853,  856,    0,  857,    0,    0,  854,  854,
        0,  858,  851,  855,  855,  859,    0,  860,    0,  856,
      856,  857,  857,  854,    0,  853,  855,  858,  858,    0,
        0,  859,  859,  860,  860,  861,    0,  862,  856,    0,
      863,  857,  857,  864,    0,  865,  860,  866,    0,    0,
        0,  861,  861,  862,  862,  861,  863,  863,  867,  864,
      864,  865,  865,  866,  866,  864,  868,  865,  869,    0,
      870,  863,  871,    0,  867,  867,  866,    0,    0,    0,

      872,    0,  868,  868,  869,  869,  870,  870,  871,  871,
      873,  868,  874,    0,  871,  867,  872,  872,  875,    0,
      876,    0,    0,  877,    0,  869,  873,  873,  874,  874,
      873,  878,    0,  879,  875,  875,  876,  876,  874,  877,
      877,    0,    0,  880,    0,  881,  876,  878,  878,  879,
      879,  882,    0,  883,    0,  878,  884,    0,  877,  880,
      880,  881,  881,  885,    0,  886,    0,  882,  882,  883,
      883,    0,  884,  884,  896,  896,  881,  887,  896,  885,
      885,  886,  886,  888,    0,    0,  896,  882,  896,  889,
      889,  884,  889,  887,  887,  889,    0,  889,  900,  888,

      888,  890,  890,  890,  890,  900,    0,  890,  888,    0,
        0,  889,  887,  891,  900,  900,  891,  896,  896,    0,
        0,  891,  891,  891,  892,  892,  891,  892,  891,    0,
      892,    0,  892,    0,  891,  993,  891,  891,  891,  898,
      898,  901,  898,  899,    0,  898,  892,  898,  901,    0,
      899,  993,  993,    0,    0,  902,    0,  901,  901,  899,
      899,  898,  902,    0,    0,  891,  891,  895,  997,  899,
      895,  902,  902,    0,    0,  895,  895,  895,  901,  902,
      895,    0,  903,    0,  997,  997,  904,    0,  895,  903,
      895,  895,  895,  904,  906,    0,    0,  905,  903,  903,

      997,  906,  904,  904,  905,    0,  933,  933,  933,  933,
      906,  906,  933,  905,  905,  906,  907,  903,    0,  895,
      895,  897,  905,  907,  897,    0,    0,    0,    0,  897,
      897,  897,  907,  907,  897,    0,  897,    0,    0,    0,
      908,    0,  897,  909,  897,  897,  897,  908,  910,    0,
      909,  911,    0,  907,    0,  910,  908,  908,  911,  909,
      909,    0,    0,    0,  910,  910,    0,  911,  911,  912,
        0,  908,  913,  897,  897,  914,  912,    0,  909,  913,
      910,    0,  914,  911,    0,  912,  912,  915,  913,  913,
      916,  914,  914,  913,  915,  912,    0,  916,  917,    0,

        0,  918,    0,  915,  915,  917,  916,  916,  918,  919,
        0,    0,  914,  920,  917,  917,  919,  918,  918,  918,
      920,  921,  917,    0,  924,  919,  919,  922,  921,  920,
      920,  924,    0,    0,  922,  923,    0,  921,  921,    0,
      924,  924,  923,  922,  922,  920,  919,  925,  922,  926,
        0,  923,  923,  921,  925,  923,  926,    0,    0,    0,
        0,  927,    0,  925,  925,  926,  926,  926,  927,  928,
        0,    0,  929,    0,  930,    0,  928,  927,  927,  929,
        0,  930,    0,  927,    0,  928,  928,  928,  929,  929,
      930,  930,    0,  931,    0,  932,  932,  953,  932,  930,

      931,  932,    0,  932,  953,    0,    0,  929,    0,  931,
      931,  939,  939,  953,  953,  939,    0,  932,  934,    0,
        0,  934,    0,  939,    0,  939,  934,  934,  934,  935,
      935,  934,  935,  934,  953,  935,    0,  935,    0,  934,
        0,  934,  934,  934,  941,  941,    0,  941,    0,    0,
      941,  935,  941,    0,  939,  939,  942,  942,    0,  942,
      954,    0,  942,    0,  942,    0,  941,  954,    0,    0,
      934,  934,  938,    0,  998,  938,  954,  954,  942,    0,
      938,  938,  938,    0,  954,  938,  943,  943,  943,  943,
      998,  998,  943,  938,    0,  938,  938,  938,  945,  945,

        0,  945,    0,    0,  945,  998,  945,    0,    0,  949,
      949,  951,  951,  949,  951,  957,    0,  951,    0,  951,
      945,  949,  957,  949,  938,  938,  940,  994,    0,  940,
        0,  957,  957,  951,  940,  940,  940,    0,  952,  940,
        0,  940,    0,  994,  994,  952,  957,  940,    0,  940,
      940,  940,  949,  949,  952,  952,  955,    0,    0,  956,
        0,    0,  994,  955,  952,    0,  956,    0,  996,    0,
      959,    0,  955,  955,    0,  956,  956,  959,  940,  940,
      944, 1004,    0,  944,  996,  996,  959,  959,  944,  944,
      944,  955,  958,  944,  999,  944,  956, 1004, 1004,  958,

      960,  944,  959,  944,  944,  944,  996,  960,  958,  958,
      999,  999,    0,  961,    0,  999,  960,  960,    0, 1004,
      961,    0, 1002,    0,  962,    0,  960,  958,    0,  961,
      961,  962,  944,  944,  946,    0,    0,  946, 1002, 1002,
      962,  962,  946,  946,  946,  963,    0,  946,  962,  946,
      961, 1002,  963,  964,    0,  946,  995,  946,  946,  946,
      964,  963,  963,  963,  966,    0,    0,  965,    0,  964,
      964,  966,  995,  995,  965,    0,  970,  970,  970,  970,
      966,  966,  970,  965,  965,  966,  946,  946,  948, 1003,
      964,  948,  995,    0,    0,    0,  948,  948,  948,  965,

      967,  948,    0,  968,    0, 1003, 1003,  967,    0,  948,
      968,  948,  948,  948,    0, 1003,  967,  967,  967,  968,
      968,  969,  969,    0,  969,  968,    0,  969,    0,  969,
     1009,  972,  972,    0,  972,    0,    0,  972,    0,  972,
      948,  948,  950,  969, 1006,  950, 1009, 1009,    0,    0,
      950,  950,  950,  972,    0,  950,    0,  950,  976,  976,
     1006, 1006,  976,  950, 1006,  950,  950,  950,  978,  978,
      976,  978,  976,    0,  978,  979,  978,    0,  986,  986,
        0,  986,  979,    0,  986,    0,  986,    0,    0,    0,
      978,  979,  979,    0,  950,  950,  971,  979,    0,  971,

      986,  976,  976,    0,  971,  971,  971,  980,    0,  971,
        0,  971,    0, 1010,  980,    0,    0,  971,  981,  971,
      971,  971,    0,  980,  980,  981,  982,    0,    0, 1010,
     1010,    0,  980,  982,  981,  981,    0,    0,  984,  981,
        0,    0,  982,  982, 1010,  984,    0,  982,  971,  971,
      973,    0,    0,  973,  984,  984,  984,    0,  973,  973,
      973,  983,    0,  973,    0,  973,    0,    0,  983,    0,
        0,  973, 1007,  973,  973,  973,  985,  983,  983,    0,
     1011,  983,    0,  985,  987,  987,  987,  987, 1007, 1007,
      987,    0,  985,  985,  988,  988, 1011, 1011,  988,    0,

        0,    0,  973,  973,  975,    0,  988,  975,  988, 1007,
        0,  985,  975,  975,  975, 1013,    0,  975,  990,  990,
        0,  990,    0,    0,  990,  975,  990,  975,  975,  975,
     1000, 1013, 1013,  991,  991,    0,  991,  988,  988,  991,
      990,  991,  992,  992,  992,  992, 1000, 1000,  992,    0,
     1013,    0, 1000, 1001,    0,  991,  975,  975,  977,    0,
     1012,  977,    0,    0,    0,    0,  977,  977,  977, 1001,
     1001,  977, 1005,  977, 1008, 1001, 1012, 1012,    0,  977,
        0,  977,  977,  977, 1014,    0, 1015,    0, 1005, 1005,
     1008, 1008, 1016,    0, 1005,    0, 1008, 1012,    0,    0,

     1014, 1014, 1015, 1015,    0,    0, 1014, 1017, 1016, 1016,
      977,  977,  989, 1018,    0,  989,    0, 1015,    0,    0,
      989,  989,  989, 1017, 1017,  989, 1019,    0, 1020, 1018,
     1018, 1021,    0,  989,    0,  989,  989,  989, 1022,    0,
        0,    0, 1019, 1019, 1020, 1020, 1023, 1021, 1021, 1018,
     1020, 1024,    0, 1025, 1022, 1022, 1026, 1021,    0,    0,
        0, 1027, 1023, 1023,  989,  989, 1028, 1024, 1024, 1025,
     1025, 1029, 1026, 1026, 1030, 1025, 1024, 1027, 1027, 1027,
     1031,    0, 1028, 1028, 1032,    0,    0, 1029, 1029, 1033,
     1030, 1030, 1034, 1026,    0, 1035, 1031, 1031, 1036,    0,

     1032, 1032, 1031, 1037,    0, 1033, 1033, 1038, 1034, 1034,
     1034, 1035, 1035, 1039, 1036, 1036, 1040, 1035,    0, 1037,
     1037, 1041,    0, 1038, 1038, 1042,    0,    0, 1043, 1039,
     1039, 1044, 1040, 1040,    0, 1036,    0, 1041, 1041, 1054,
     1037, 1042, 1042, 1041, 1043, 1043, 1054, 1044, 1044, 1038,
        0, 1045, 1045, 1040, 1045, 1054, 1054, 1045,    0, 1045,
     1042,    0,    0, 1043, 1046, 1046, 1046, 1046, 1047, 1047,
     1046,    0, 1047, 1045,    0, 1049, 1049, 1054, 1049,    0,
     1047, 1049, 1047, 1049, 1050, 1050,    0, 1050, 1120,    0,
     1050, 1052, 1050, 1051, 1051, 1051, 1051, 1049, 1052, 1051,

        0,    0,    0, 1053, 1120, 1120, 1050, 1052, 1052, 1052,
     1053, 1047, 1047,    0,    0, 1055,    0, 1056,    0, 1053,
     1053, 1053, 1055, 1057, 1056,    0,    0,    0, 1058,    0,
     1057, 1055, 1055, 1056, 1056, 1058,    0,    0,    0, 1057,
     1057, 1059,    0, 1056, 1058, 1058,    0, 1060, 1059, 1061,
        0,    0, 1062, 1055, 1060, 1063, 1061, 1059, 1059, 1062,
     1064,    0, 1063, 1060, 1060, 1061, 1061, 1064, 1062, 1062,
        0, 1063, 1063,    0,    0, 1060, 1064, 1064, 1065,    0,
     1066, 1063, 1064,    0,    0, 1065, 1061, 1066,    0, 1062,
        0, 1067,    0,    0, 1065, 1065, 1066, 1066, 1067, 1068,

     1065,    0, 1069,    0, 1070,    0, 1068, 1067, 1067, 1069,
        0, 1070,    0,    0,    0, 1068, 1068, 1066, 1069, 1069,
     1070, 1070, 1071,    0, 1072,    0, 1070, 1068, 1073, 1071,
        0, 1072,    0,    0, 1122, 1073,    0, 1069, 1071, 1071,
     1072, 1072,    0,    0, 1073, 1073,    0, 1074,    0, 1075,
     1122, 1122, 1073, 1072, 1074, 1076, 1075,    0,    0, 1071,
        0,    0, 1076, 1074, 1074, 1075, 1075, 1077, 1077,    0,
     1077, 1076, 1076, 1077, 1122, 1077, 1078, 1078, 1078, 1078,
     1079, 1079, 1078, 1074, 1079,    0, 1075, 1076,    0, 1077,
     1081, 1081, 1079, 1081, 1079,    0, 1081,    0, 1081, 1082,

     1082, 1123, 1082,    0,    0, 1082,    0, 1082, 1083, 1083,
     1083, 1083, 1081,    0, 1083,    0,    0, 1123, 1123, 1084,
     1084, 1082, 1084, 1079, 1079, 1084,    0, 1084, 1085, 1085,
     1085, 1085, 1086, 1086, 1085, 1093, 1086, 1088, 1088,    0,
     1088, 1084, 1093, 1088, 1086, 1088, 1086, 1089, 1089,    0,
     1089, 1093, 1093, 1089,    0, 1089,    0,    0,    0, 1088,
     1090, 1090, 1090, 1090, 1091,    0, 1090, 1092,    0, 1089,
     1094, 1091, 1095, 1093, 1092, 1086, 1086, 1094,    0, 1095,
     1091, 1091, 1091, 1092, 1092, 1092, 1094, 1094, 1095, 1095,
     1096,    0,    0,    0, 1097,    0, 1098, 1096, 1099,    0,

        0, 1097,    0, 1098,    0, 1099, 1096, 1096, 1094, 1095,
     1097, 1097, 1098, 1098, 1099, 1099, 1097, 1100, 1098,    0,
        0, 1101,    0, 1103, 1100, 1102,    0, 1096, 1101,    0,
     1103,    0, 1102, 1100, 1100, 1099,    0, 1101, 1101, 1103,
     1103, 1102, 1102, 1101,    0, 1104, 1104, 1103, 1104, 1125,
        0, 1104, 1100, 1104, 1102, 1105, 1105, 1105, 1105, 1106,
     1106, 1105,    0, 1106,    0, 1125, 1125, 1104,    0, 1108,
     1108, 1106, 1108, 1106,    0, 1108,    0, 1108, 1109, 1109,
     1125, 1109,    0,    0, 1109,    0, 1109, 1110, 1110, 1110,
     1110, 1108, 1111, 1110, 1112,    0,    0, 1113,    0, 1111,

     1109, 1112, 1106, 1106, 1113, 1114,    0,    0, 1111, 1111,
     1112, 1112, 1114, 1113, 1113, 1119,    0, 1115,    0, 1116,
     1112, 1114, 1114, 1113, 1115,    0, 1116,    0, 1111,    0,
        0, 1119, 1119, 1115, 1115, 1116, 1116, 1117, 1117,    0,
     1117, 1119, 1114, 1117, 1121, 1117, 1118, 1118, 1118, 1118,
     1124,    0, 1118, 1115, 1126,    0, 1116, 1119, 1127, 1117,
     1121, 1121, 1128,    0,    0,    0, 1124, 1124,    0,    0,
     1126, 1126, 1129,    0, 1127, 1127, 1130,    0, 1128, 1128,
     1131, 1121, 1132,    0, 1128, 1124,    0, 1133, 1129, 1129,
     1127, 1135, 1130, 1130, 1134,    0, 1131, 1131, 1132, 1132,

        0, 1136, 1131, 1133, 1133,    0, 1137, 1135, 1135, 1133,
     1134, 1134, 1138, 1130, 1139,    0, 1134, 1136, 1136, 1140,
        0, 1141, 1137, 1137, 1142,    0, 1135, 1137, 1138, 1138,
     1139, 1139, 1143,    0, 1144, 1140, 1140, 1141, 1141, 1145,
     1142, 1142, 1146, 1141, 1147,    0,    0,    0, 1143, 1143,
     1144, 1144, 1148,    0, 1149, 1145, 1145,    0, 1146, 1146,
     1147, 1147, 1140, 1144, 1150,    0, 1151,    0, 1148, 1148,
     1149, 1149, 1152,    0, 1148,    0,    0, 1146, 1153,    0,
     1150, 1150, 1151, 1151, 1154,    0,    0,    0, 1152, 1152,
     1155, 1155, 1149, 1155, 1153, 1153, 1155,    0, 1155,    0,

     1154, 1154, 1151, 1156, 1156, 1156, 1156, 1157,    0, 1156,
     1153, 1158, 1155, 1160, 1157, 1159, 1154,    0, 1158,    0,
     1160,    0, 1159, 1157, 1157,    0,    0, 1158, 1158, 1160,
     1160, 1159, 1159, 1160,    0, 1161,    0,    0, 1162,    0,
     1163,    0, 1161,    0, 1157, 1162,    0, 1163, 1158,    0,
     1159, 1161, 1161, 1164, 1162, 1162, 1163, 1163, 1165,    0,
     1164, 1166, 1163,    0, 1167, 1165, 1161,    0, 1166, 1164,
     1164, 1167,    0,    0, 1165, 1165, 1168, 1166, 1166,    0,
     1167, 1167, 1166, 1168, 1169,    0,    0,    0,    0, 1165,
     1170, 1169, 1168, 1168, 1168, 1164, 1171, 1170, 1172,    0,

     1169, 1169, 1173, 1171, 1174, 1172, 1170, 1170,    0, 1173,
        0, 1174, 1171, 1171, 1172, 1172,    0, 1203, 1173, 1173,
     1174, 1174, 1175, 1170, 1172, 1176,    0, 1171, 1177, 1175,
        0,    0, 1176, 1203, 1203, 1177,    0,    0, 1175, 1175,
        0, 1176, 1176,    0, 1177, 1177, 1174, 1178, 1178,    0,
     1178, 1180, 1180, 1178, 1180, 1178,    0, 1180, 1175, 1180,
     1177, 1176, 1179, 1179, 1179, 1179,    0,    0, 1179, 1178,
        0, 1182,    0, 1180, 1181, 1181, 1181, 1181, 1182, 1183,
     1181,    0, 1184,    0, 1185,    0, 1183, 1182, 1182, 1184,
     1186, 1185,    0,    0, 1202, 1183, 1183, 1186, 1184, 1184,

     1185, 1185, 1187,    0, 1185,    0, 1186, 1186, 1182, 1187,
     1202, 1202, 1186, 1188,    0, 1189, 1183, 1184, 1187, 1187,
     1188, 1190, 1189,    0, 1206, 1202,    0,    0, 1190, 1188,
     1188, 1189, 1189, 1189, 1188, 1191,    0, 1190, 1190, 1192,
     1206, 1206, 1191,    0, 1187,    0, 1192, 1194, 1194, 1194,
     1194, 1191, 1191, 1194, 1190, 1192, 1192, 1193, 1193,    0,
     1193, 1195,    0, 1193,    0, 1193, 1191, 1196, 1195, 1197,
        0,    0,    0, 1198, 1196,    0, 1197, 1195, 1195, 1193,
     1198, 1192,    0, 1196, 1196, 1197, 1197, 1199,    0, 1198,
     1198, 1200, 1195,    0, 1199, 1197,    0,    0, 1196, 1201,

        0, 1204,    0, 1199, 1199,    0,    0, 1200, 1200, 1198,
     1205,    0, 1207, 1200, 1208, 1201, 1201, 1204, 1204, 1209,
        0, 1201,    0, 1199,    0,    0, 1205, 1205, 1207, 1207,
     1208, 1208, 1210,    0, 1211, 1209, 1209, 1212, 1204,    0,
     1209, 1205, 1213,    0, 1214,    0, 1215,    0, 1210, 1210,
     1211, 1211, 1216, 1212, 1212, 1212,    0, 1217, 1213, 1213,
     1214, 1214, 1215, 1215, 1213, 1218, 1211, 1219, 1216, 1216,
     1220,    0, 1216, 1217, 1217, 1221,    0,    0, 1222,    0,
     1214, 1218, 1218, 1219, 1219, 1222, 1220, 1220,    0,    0,
     1223, 1221, 1221,    0, 1222, 1222, 1224, 1223,    0,    0,

        0, 1225, 1218, 1224, 1222, 1252, 1223, 1223, 1225,    0,
     1220, 1251, 1224, 1224, 1224, 1221, 1223, 1225, 1225, 1226,
        0, 1252, 1252, 1227,    0,    0, 1226, 1251, 1251,    0,
     1227,    0,    0,    0, 1228, 1226, 1226,    0, 1225, 1227,
     1227, 1228, 1229, 1226, 1228, 1230,    0, 1251, 1231, 1229,
     1228, 1228, 1230, 1232, 1227, 1231, 1233,    0, 1229, 1229,
     1232, 1230, 1230, 1233, 1231, 1231, 1229, 1234,    0, 1232,
     1232,    0, 1233, 1233, 1234, 1235, 1233,    0, 1232, 1236,
        0,    0, 1235, 1234, 1234,    0, 1236, 1237,    0,    0,
     1238, 1235, 1235, 1239, 1237, 1236, 1236, 1238, 1234,    0,

     1239, 1236,    0, 1237, 1237, 1240, 1238, 1238, 1241, 1239,
     1239,    0, 1240, 1242,    0, 1241, 1243,    0, 1238, 1239,
     1242, 1240, 1240, 1243, 1241, 1241, 1241, 1244,    0, 1242,
     1242, 1240, 1243, 1243, 1244, 1245,    0, 1244, 1246,    0,
        0,    0, 1245, 1244, 1244, 1246, 1247, 1243,    0, 1248,
     1242, 1245, 1245, 1247, 1246, 1246, 1248,    0, 1246, 1253,
     1245, 1249, 1247, 1247, 1250, 1248, 1248, 1254, 1249,    0,
     1247, 1250, 1255, 1248, 1256, 1253, 1253, 1249, 1249, 1257,
     1250, 1250, 1258, 1254, 1254, 1259, 1250,    0, 1255, 1255,
     1256, 1256, 1249, 1260,    0, 1257, 1257,    0, 1258, 1258,

     1261, 1259, 1259, 1254, 1262,    0, 1263,    0,    0, 1260,
     1260, 1264,    0, 1258,    0, 1260, 1261, 1261, 1284, 1257,
     1262, 1262, 1263, 1263, 1265, 1261, 1266, 1264, 1264, 1267,
     1262, 1265, 1268, 1266, 1284, 1284, 1267, 1269,    0, 1268,
     1265, 1265, 1266, 1266, 1269, 1267, 1267,    0, 1268, 1268,
        0, 1270,    0, 1269, 1269, 1287,    0,    0, 1270,    0,
        0,    0, 1271, 1265, 1268, 1266, 1267, 1270, 1270, 1271,
        0, 1287, 1287, 1272, 1269, 1273,    0, 1270, 1271, 1271,
     1272,    0, 1273,    0, 1271,    0, 1274,    0, 1275, 1272,
     1272, 1273, 1273, 1274,    0, 1275,    0, 1272,    0, 1276,

        0, 1278, 1274, 1274, 1275, 1275, 1276, 1277, 1278,    0,
        0, 1273, 1279,    0, 1277, 1276, 1276, 1278, 1278, 1279,
        0,    0,    0, 1277, 1277, 1280,    0, 1275, 1279, 1279,
     1281,    0, 1280, 1278,    0,    0,    0, 1281, 1276,    0,
     1285, 1280, 1280, 1282, 1277, 1286, 1281, 1281, 1283, 1279,
     1282, 1280, 1281, 1288,    0, 1283, 1285, 1285, 1302, 1282,
     1282, 1286, 1286,    0, 1283, 1283, 1289, 1282,    0, 1288,
     1288,    0,    0, 1289, 1302, 1302,    0, 1285,    0, 1290,
        0, 1286, 1289, 1289, 1283, 1288, 1290, 1291, 1289,    0,
     1292,    0, 1293,    0, 1291, 1290, 1290, 1292, 1294, 1293,

        0, 1290,    0, 1291, 1291, 1294, 1292, 1292, 1293, 1293,
     1295,    0, 1296, 1291, 1294, 1294, 1297, 1295, 1294, 1296,
        0,    0,    0, 1297, 1298, 1292, 1295, 1295, 1296, 1296,
        0, 1298, 1297, 1297,    0, 1299,    0, 1300, 1297, 1303,
     1298, 1298, 1299, 1301, 1300,    0, 1298,    0,    0, 1309,
     1301, 1299, 1299, 1300, 1300, 1303, 1303, 1304,    0, 1301,
     1301, 1299, 1305, 1301, 1304, 1309, 1309,    0, 1306, 1305,
     1303,    0, 1300, 1304, 1304, 1306, 1307,    0, 1305, 1305,
     1308,    0, 1310, 1307, 1306, 1306,    0, 1308, 1311, 1310,
        0,    0, 1307, 1307, 1312, 1311, 1308, 1308, 1310, 1310,

     1306, 1312,    0,    0, 1311, 1311,    0,    0,    0,    0,
     1312, 1312, 1308, 1310,    0,    0,    0,    0,    0, 1311,
     1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314, 1314,
     1314, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315, 1315,
     1315, 1315, 1316, 1316, 1316, 1316, 1316, 1316, 1316, 1316,
     1316, 1316, 1316, 1317, 1317, 1317, 1317, 1317, 1317, 1317,
     1317, 1317, 1317, 1317, 1318, 1318, 1318, 1318, 1318, 1318,
     1318, 1318, 1318, 1318, 1318, 1319, 1319,    0,    0, 1319,
     1319, 1319, 1320,    0, 1320, 1320, 1320, 1320, 1320, 1320,
     1320, 1320, 1321, 1321,    0,    0, 1321, 1321, 1321, 1322,

        0, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1322, 1323,
     1323,    0,    0, 1323, 1323, 1323, 1324,    0, 1324, 1324,
     1324, 1324, 1324, 1324, 1324, 1324, 1325, 1325,    0,    0,
     1325, 1325, 1325, 1326,    0, 1326, 1326, 1326, 1326, 1326,
     1326, 1326, 1326, 1327, 1327,    0,    0, 1327, 1327, 1327,
     1328,    0, 1328, 1328, 1328, 1328, 1328, 1328, 1328, 1328,
     1329,    0,    0,    0, 1329,    0, 1329, 1329,    0, 1329,
     1329, 1330,    0,    0, 1330, 1330,    0, 1330, 1330, 1330,
     1330, 1330, 1331, 1331,    0, 1331, 1331, 1331, 1331, 1331,
     1331, 1331, 1331, 1332,    0, 1332, 1332,    0,    0, 1332,

        0, 1332, 1333, 1333, 1333, 1333, 1333,    0, 1333, 1334,
     1334, 1334, 1334, 1334,    0, 1334, 1335, 1335, 1335, 1335,
     1335,    0, 1335, 1336, 1336, 1336, 1336, 1336,    0, 1336,
     1337, 1337, 1337, 1337, 1337,    0, 1337, 1338,    0, 1338,
     1338, 1338, 1338, 1338, 1338, 1338, 1338, 1339,    0,    0,
        0, 1339, 1339, 1339, 1339, 1339, 1339, 1339, 1340,    0,
     1340, 1340, 1340, 1340, 1340, 1340, 1340, 1340, 1341,    0,
        0,    0, 1341, 1341, 1341, 1341, 1341, 1341, 1341, 1342,
        0, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1342, 1343,
        0,    0,    0, 1343, 1343, 1343, 1343, 1343, 1343, 1343,

     1344,    0,    0,    0, 1344, 1344, 1344, 1344, 1344, 1344,
     1344, 1345,    0, 1345, 1345, 1345, 1345, 1345, 1345, 1345,
     1345, 1346,    0,    0,    0, 1346, 1346, 1346, 1346, 1346,
     1346, 1346, 1347,    0, 1347, 1347, 1347, 1347, 1347, 1347,
     1347, 1347, 1348,    0,    0,    0, 1348, 1348, 1348, 1348,
     1348, 1348, 1348, 1349, 1349,    0, 1349, 1349, 1349, 1349,
     1349, 1349, 1349, 1349, 1350,    0,    0,    0, 1350, 1350,
     1350, 1350, 1350, 1350, 1350, 1351,    0,    0,    0, 1351,
     1351, 1351, 1351, 1351, 1351, 1351, 1352, 1352,    0, 1352,
     1352, 1352, 1352, 1352, 1352, 1352, 1352, 1353,    0,    0,

        0, 1353, 1353, 1353, 1353, 1353, 1353, 1353, 1354,    0,
        0,    0, 1354, 1354, 1354, 1354, 1354, 1354, 1354, 1355,
     1355,    0, 1355, 1355, 1355, 1355, 1355, 1355, 1355, 1355,
     1356,    0,    0,    0, 1356, 1356, 1356, 1356, 1356, 1356,
     1356, 1357,    0,    0,    0, 1357, 1357, 1357, 1357, 1357,
     1357, 1357, 1358,    0,    0,    0, 1358, 1358, 1358, 1358,
     1358, 1358, 1358, 1359, 1359,    0, 1359, 1359, 1359, 1359,
     1359, 1359, 1359, 1359, 1360,    0,    0,    0, 1360, 1360,
     1360, 1360, 1360, 1360, 1360, 1361,    0,    0,    0, 1361,
     1361, 1361, 1361, 1361, 1361, 1361, 1362, 1362,    0, 1362,

     1362, 1362, 1362, 1362, 1362, 1362, 1362, 1363,    0,    0,
        0, 1363, 1363, 1363, 1363, 1363, 1363, 1363, 1364,    0,
        0,    0, 1364, 1364, 1364, 1364, 1364, 1364, 1364, 1365,
     1365,    0, 1365, 1365, 1365, 1365, 1365, 1365, 1365, 1365,
     1366,    0,    0,    0, 1366, 1366, 1366, 1366, 1366, 1366,
     1366, 1367, 1367,    0, 1367, 1367, 1367, 1367, 1367, 1367,
     1367, 1367, 1368, 1368,    0, 1368, 1368, 1368, 1368, 1368,
     1368, 1368, 1368, 1369,    0,    0,    0, 1369, 1369, 1369,
     1369, 1369, 1369, 1369, 1370,    0,    0,    0, 1370, 1370,
     1370, 1370, 1370, 1370, 1370, 1371, 1371,    0, 1371, 1371,

     1371, 1371, 1371, 1371, 1371, 1371, 1372, 1372,    0,    0,
     1372, 1372, 1372, 1373, 1373,    0, 1373, 1373, 1373, 1373,
     1373, 1373, 1373, 1373, 1374,    0,    0,    0, 1374, 1374,
     1374, 1374, 1374, 1374, 1374, 1375,    0,    0,    0, 1375,
     1375, 1375, 1375, 1375, 1375, 1375, 1376, 1376,    0, 1376,
     1376, 1376, 1376, 1376, 1376, 1376, 1376, 1377, 1377,    0,
     1377, 1377, 1377, 1377, 1377, 1377, 1377, 1377, 1378,    0,
        0,    0, 1378, 1378, 1378, 1378, 1378, 1378, 1378, 1379,
     1379,    0, 1379, 1379, 1379, 1379, 1379, 1379, 1379, 1379,
     1380,    0,    0,    0, 1380, 1380, 1380, 1380, 1380, 1380,

     1380, 1381,    0,    0,    0, 1381, 1381, 1381, 1381, 1381,
     1381, 1381, 1382, 1382,    0, 1382, 1382, 1382, 1382, 1382,
     1382, 1382, 1382, 1383, 1383,    0,    0, 1383, 1383, 1383,
     1384, 1384,    0, 1384, 1384, 1384, 1384, 1384, 1384, 1384,
     1384, 1385,    0,    0,    0, 1385, 1385, 1385, 1385, 1385,
     1385, 1385, 1386, 1386,    0, 1386, 1386, 1386, 1386, 1386,
     1386, 1386, 1386, 1387,    0,    0,    0, 1387, 1387, 1387,
     1387, 1387, 1387, 1387, 1388,    0,    0,    0, 1388, 1388,
     1388, 1388, 1388, 1388, 1388, 1389, 1389,    0, 1389, 1389,
     1389, 1389, 1389, 1389, 1389, 1389, 1390, 1390,    0,    0,

     1390, 1390, 1390, 1391, 1391,    0, 1391, 1391, 1391, 1391,
     1391, 1391, 1391, 1391, 1392,    0,    0,    0, 1392, 1392,
     1392, 1392, 1392, 1392, 1392, 1393,    0,    0,    0, 1393,
     1393, 1393, 1393, 1393, 1393, 1393, 1394, 1394,    0, 1394,
     1394, 1394, 1394, 1394, 1394, 1394, 1394, 1395, 1395,    0,
     1395, 1395, 1395, 1395, 1395, 1395, 1395, 1395, 1396, 1396,
        0,    0, 1396, 1396, 1396, 1397, 1397,    0, 1397, 1397,
     1397, 1397, 1397, 1397, 1397, 1397, 1398, 1398,    0, 1398,
     1398, 1398, 1398, 1398, 1398, 1398, 1398, 1399, 1399,    0,
     1399, 1399, 1399, 1399, 1399, 1399, 1399, 1399, 1400, 1400,

        0, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1400, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313, 1313,
     1313, 1313, 1313, 1313, 1313, 1313
    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

extern int yy_flex_debug;
int yy_flex_debug = 0;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#line 1 "../../../src/Mixfix/lexer.ll"
/*

    This file is part of the Maude 2 interpreter.

    Copyright 1997-2010 SRI International, Menlo Park, CA 94025, USA.

    This program is free software; you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation; either version 2 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307, USA.

*/
/*
//	Lexical analyser
*/
#line 27 "../../../src/Mixfix/lexer.ll"
//      utility stuff
#include "macros.hh"
#include "vector.hh"

//	forward declarations
#include "interface.hh"
#include "core.hh"
#include "higher.hh"
#include "strategyLanguage.hh"
#include "mixfix.hh"

//	core class definitions
#include "lineNumber.hh"

//	front end class definitions
#include "token.hh"
#include "fileTable.hh"
#include "directoryManager.hh"
//#include "preModule.hh"
#include "lexerAux.hh"
#include "global.hh"
#include "userLevelRewritingContext.hh"
#include "interpreter.hh"

//	bison generated token file
#include "surface.h"

#define YY_DECL int yylex(YYSTYPE* lvalp)

void getInput(char* buf, yy_size_t& result, yy_size_t max_size);
//
//	result might be an int or a yy_size_t depending on flex version, so we use a temporary.
//
#define YY_INPUT(buf, result, max_size) \
  { yy_size_t safeResult; getInput(buf, safeResult, max_size); result = safeResult; }

#define RETURN(token) \
  { lvalp->yyToken.tokenize(yytext, lineNumber); return (token); }

#define RETURN_FIX_UP(token) \
  { lvalp->yyToken.fixUp(yytext, lineNumber); return (token); }

#define SAVE(token) \
  { savedToken.tokenize(yytext, lineNumber); savedReturn = token; }

#define SAVE_FIX_UP(token) \
  { savedToken.fixUp(yytext, lineNumber); savedReturn = token; }

#define RETURN_SAVED(token) \
  { lvalp->yyToken = savedToken; return (token); }

#define STORE \
  { Token t; t.tokenize(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored " << t);*/ }
#define STORE_FIX_UP \
  { Token t; t.fixUp(yytext, lineNumber); lexerBubble.append(t); /*DebugAdvisory("Stored fixUp " << t);*/ }

#define EXIT(token) \
  { yy_pop_state(); RETURN(token) }

Token savedToken;
int savedReturn;
int braceCount;
int parenCount;
int terminationSet;
string accumulator;
string fileName;

//int terminationCondition;
int minLength;
extern Vector<Token> lexerBubble;










#line 2925 "<stdout>"

#define INITIAL 0
#define ID_MODE 1
#define CMD_MODE 2
#define SEEN_DOT 3
#define BUBBLE_MODE 4
#define END_STATEMENT_MODE 5
#define END_COMMAND_MODE 6
#define FILE_NAME_MODE 7
#define FILE_NAME_QUOTE_MODE 8
#define STRING_MODE 9
#define LATEX_MODE 10

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

static int yy_init_globals (void );

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy (void );

int yyget_debug (void );

void yyset_debug (int debug_flag  );

YY_EXTRA_TYPE yyget_extra (void );

void yyset_extra (YY_EXTRA_TYPE user_defined  );

FILE *yyget_in (void );

void yyset_in  (FILE * in_str  );

FILE *yyget_out (void );

void yyset_out  (FILE * out_str  );

int yyget_leng (void );

char *yyget_text (void );

int yyget_lineno (void );

void yyset_lineno (int line_number  );

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap (void );
#else
extern int yywrap (void );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  );
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int );
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * );
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (void );
#else
static int input (void );
#endif

#endif

        static int yy_start_stack_ptr = 0;
        static int yy_start_stack_depth = 0;
        static int *yy_start_stack = NULL;
    
    static void yy_push_state (int new_state );
    
    static void yy_pop_state (void );
    
    static int yy_top_state (void );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex (void);

#define YY_DECL int yylex (void)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    
#line 119 "../../../src/Mixfix/lexer.ll"

	if (UserLevelRewritingContext::interrupted())
	  yyterminate();

#line 3137 "<stdout>"

	if ( !(yy_init) )
		{
		(yy_init) = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! (yy_start) )
			(yy_start) = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack ();
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer(yyin,YY_BUF_SIZE );
		}

		yy_load_buffer_state( );
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = (yy_c_buf_p);

		/* Support of yytext. */
		*yy_cp = (yy_hold_char);

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = (yy_start);
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				(yy_last_accepting_state) = yy_current_state;
				(yy_last_accepting_cpos) = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1314 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 8610 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = (yy_hold_char);
			yy_cp = (yy_last_accepting_cpos);
			yy_current_state = (yy_last_accepting_state);
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 123 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  eatComment(false);
					}
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 127 "../../../src/Mixfix/lexer.ll"
{
					  yyless(3);
					  eatComment(true);
					}
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 133 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MEMO)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 134 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FORMAT)
	YY_BREAK


case 5:
YY_RULE_SETUP
#line 138 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IN)
	YY_BREAK


case 6:
YY_RULE_SETUP
#line 142 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MOD)  // need to know which one we saw
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 143 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OMOD)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 144 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VIEW);
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 145 "../../../src/Mixfix/lexer.ll"
return KW_LOAD;
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 146 "../../../src/Mixfix/lexer.ll"
return KW_SLOAD;
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 147 "../../../src/Mixfix/lexer.ll"
return KW_PWD;
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 148 "../../../src/Mixfix/lexer.ll"
return KW_CD;
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 149 "../../../src/Mixfix/lexer.ll"
return KW_PUSHD;
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 150 "../../../src/Mixfix/lexer.ll"
return KW_POPD;
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 151 "../../../src/Mixfix/lexer.ll"
return KW_LS;
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 152 "../../../src/Mixfix/lexer.ll"
return KW_QUIT;
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 153 "../../../src/Mixfix/lexer.ll"
return KW_EOF;
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 154 "../../../src/Mixfix/lexer.ll"
return KW_PARSE;
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 155 "../../../src/Mixfix/lexer.ll"
return KW_NORMALIZE;
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 156 "../../../src/Mixfix/lexer.ll"
return KW_REDUCE;
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 157 "../../../src/Mixfix/lexer.ll"
return KW_CREDUCE;
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 158 "../../../src/Mixfix/lexer.ll"
return KW_SREDUCE;
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 159 "../../../src/Mixfix/lexer.ll"
return KW_REWRITE;
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 160 "../../../src/Mixfix/lexer.ll"
return KW_EREWRITE;
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 161 "../../../src/Mixfix/lexer.ll"
return KW_FREWRITE;
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 162 "../../../src/Mixfix/lexer.ll"
return KW_SREWRITE;
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 163 "../../../src/Mixfix/lexer.ll"
return KW_CHECK;
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 164 "../../../src/Mixfix/lexer.ll"
return KW_LOOP;
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 165 "../../../src/Mixfix/lexer.ll"
return KW_CONTINUE;
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 166 "../../../src/Mixfix/lexer.ll"
return KW_NARROW;
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 167 "../../../src/Mixfix/lexer.ll"
return KW_XG_NARROW;
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 168 "../../../src/Mixfix/lexer.ll"
return KW_GET;
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 169 "../../../src/Mixfix/lexer.ll"
return KW_VARIANTS;
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 170 "../../../src/Mixfix/lexer.ll"
return KW_VARIANT;
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 171 "../../../src/Mixfix/lexer.ll"
return KW_MATCH;
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 172 "../../../src/Mixfix/lexer.ll"
return KW_XMATCH;
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 173 "../../../src/Mixfix/lexer.ll"
return KW_SEARCH;
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 174 "../../../src/Mixfix/lexer.ll"
return KW_UNIFY;
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 175 "../../../src/Mixfix/lexer.ll"
return KW_SET;
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 176 "../../../src/Mixfix/lexer.ll"
return KW_SHOW;
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 177 "../../../src/Mixfix/lexer.ll"
return KW_ON;
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 178 "../../../src/Mixfix/lexer.ll"
return KW_OFF;
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 179 "../../../src/Mixfix/lexer.ll"
return KW_TRACE;
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 180 "../../../src/Mixfix/lexer.ll"
return KW_ADVISE;
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 181 "../../../src/Mixfix/lexer.ll"
return KW_VERBOSE;
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 182 "../../../src/Mixfix/lexer.ll"
return KW_DO;
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 183 "../../../src/Mixfix/lexer.ll"
return KW_CLEAR;
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 184 "../../../src/Mixfix/lexer.ll"
return KW_BODY;
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 185 "../../../src/Mixfix/lexer.ll"
return KW_BUILTIN;
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 186 "../../../src/Mixfix/lexer.ll"
return KW_WHOLE;
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 187 "../../../src/Mixfix/lexer.ll"
return KW_SELECT;
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 188 "../../../src/Mixfix/lexer.ll"
return KW_DESELECT;
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 189 "../../../src/Mixfix/lexer.ll"
return KW_CONCEAL;
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 190 "../../../src/Mixfix/lexer.ll"
return KW_REVEAL;
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 191 "../../../src/Mixfix/lexer.ll"
return KW_CONDITION;
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 192 "../../../src/Mixfix/lexer.ll"
return KW_SUBSTITUTION;
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 193 "../../../src/Mixfix/lexer.ll"
return KW_PRINT;
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 194 "../../../src/Mixfix/lexer.ll"
return KW_ATTRIBUTE;
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 195 "../../../src/Mixfix/lexer.ll"
return KW_NEWLINE;
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 196 "../../../src/Mixfix/lexer.ll"
return KW_COLOR;
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 197 "../../../src/Mixfix/lexer.ll"
return KW_GRAPH;
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 198 "../../../src/Mixfix/lexer.ll"
return KW_MIXFIX;
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 199 "../../../src/Mixfix/lexer.ll"
return KW_FLAT;
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 200 "../../../src/Mixfix/lexer.ll"
return KW_WITH;
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 201 "../../../src/Mixfix/lexer.ll"
return KW_PARENS;
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 202 "../../../src/Mixfix/lexer.ll"
return KW_ALIASES;
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 203 "../../../src/Mixfix/lexer.ll"
return KW_GC;
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 204 "../../../src/Mixfix/lexer.ll"
return KW_TIME;
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 205 "../../../src/Mixfix/lexer.ll"
return KW_STATS;
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 206 "../../../src/Mixfix/lexer.ll"
return KW_TIMING;
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 207 "../../../src/Mixfix/lexer.ll"
return KW_CMD;
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 208 "../../../src/Mixfix/lexer.ll"
return KW_ALL;
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 209 "../../../src/Mixfix/lexer.ll"
return KW_MODULES;
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 210 "../../../src/Mixfix/lexer.ll"
return KW_MODULE;
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 211 "../../../src/Mixfix/lexer.ll"
return KW_VIEWS;
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 212 "../../../src/Mixfix/lexer.ll"
return KW_SORTS;
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 213 "../../../src/Mixfix/lexer.ll"
return KW_OPS2;
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 214 "../../../src/Mixfix/lexer.ll"
return KW_VARS;
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 215 "../../../src/Mixfix/lexer.ll"
return KW_MBS;
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 216 "../../../src/Mixfix/lexer.ll"
return KW_EQS;
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 217 "../../../src/Mixfix/lexer.ll"
return KW_RLS;
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 218 "../../../src/Mixfix/lexer.ll"
return KW_SUMMARY;
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 219 "../../../src/Mixfix/lexer.ll"
return KW_KINDS;
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 220 "../../../src/Mixfix/lexer.ll"
return KW_COMPILE;
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 221 "../../../src/Mixfix/lexer.ll"
return KW_COUNT;
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 222 "../../../src/Mixfix/lexer.ll"
return KW_PROTECT;
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 223 "../../../src/Mixfix/lexer.ll"
return KW_EXTEND;
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 224 "../../../src/Mixfix/lexer.ll"
return KW_INCLUDE;
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 225 "../../../src/Mixfix/lexer.ll"
return KW_EXCLUDE;
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 226 "../../../src/Mixfix/lexer.ll"
return KW_DEBUG;
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 227 "../../../src/Mixfix/lexer.ll"
return KW_IRREDUNDANT;
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 228 "../../../src/Mixfix/lexer.ll"
return KW_RESUME;
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 229 "../../../src/Mixfix/lexer.ll"
return KW_ABORT;
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 230 "../../../src/Mixfix/lexer.ll"
return KW_STEP;
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 231 "../../../src/Mixfix/lexer.ll"
return KW_WHERE;
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 232 "../../../src/Mixfix/lexer.ll"
return KW_DUMP;
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 233 "../../../src/Mixfix/lexer.ll"
return KW_BREAK;
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 234 "../../../src/Mixfix/lexer.ll"
return KW_BREAKDOWN;
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 235 "../../../src/Mixfix/lexer.ll"
return KW_PATH;
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 236 "../../../src/Mixfix/lexer.ll"
return KW_LABEL;
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 237 "../../../src/Mixfix/lexer.ll"
return KW_PROFILE;
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 238 "../../../src/Mixfix/lexer.ll"
return KW_NUMBER;
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 239 "../../../src/Mixfix/lexer.ll"
return KW_RAT;
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 240 "../../../src/Mixfix/lexer.ll"
return KW_TEST;
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 241 "../../../src/Mixfix/lexer.ll"
return KW_SMT_SEARCH;
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 242 "../../../src/Mixfix/lexer.ll"
return KW_VU_NARROW;
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 243 "../../../src/Mixfix/lexer.ll"
return KW_FVU_NARROW;
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 244 "../../../src/Mixfix/lexer.ll"
return *yytext;
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 245 "../../../src/Mixfix/lexer.ll"
{
					  bool dummy;
					  lvalp->yyInt64 = stringToInt64(yytext, dummy, 10);
					  return SIMPLE_NUMBER;
					}
	YY_BREAK
case 110:
/* rule 110 can match eol */
YY_RULE_SETUP
#line 250 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped unexpected token: " <<
					    QUOTE(yytext));
					}
	YY_BREAK

/*
  *	In command mode we only recognize special tokens
  *	"in" "(" ")" "[" "]" ":" "." "," and non-negative numbers.
  *	Everything else is an identifier. Furthermore "." is only recognized
  *	at the end of a line or before a comment (ignoring white space).
  */

case 111:
/* rule 111 can match eol */
YY_RULE_SETUP
#line 264 "../../../src/Mixfix/lexer.ll"
{
                                          yyless(1);
                                          RETURN('.')
                                        }
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 268 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 269 "../../../src/Mixfix/lexer.ll"
RETURN(NUMERIC_ID)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 270 "../../../src/Mixfix/lexer.ll"
RETURN(IDENTIFIER)
	YY_BREAK
case 115:
/* rule 115 can match eol */
YY_RULE_SETUP
#line 271 "../../../src/Mixfix/lexer.ll"
{
					  SAVE_FIX_UP(ENDS_IN_DOT)
					  BEGIN(SEEN_DOT);
					}
	YY_BREAK
case 116:
/* rule 116 can match eol */
YY_RULE_SETUP
#line 275 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK


case 117:
/* rule 117 can match eol */
YY_RULE_SETUP
#line 279 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 284 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  BEGIN(CMD_MODE);
					  RETURN_SAVED(IDENTIFIER)
					}
	YY_BREAK

/*
  *	Id mode is used for scanning modules; a whole bunch of special tokens
  *	are recognized.
  */

case 119:
YY_RULE_SETUP
#line 296 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TO)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 297 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROM)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 298 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LABEL)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 299 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ASSOC)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 300 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COMM)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 301 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 302 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IDEM)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 303 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ITER)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 304 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LEFT)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 305 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RIGHT)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 306 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PREC)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 307 "../../../src/Mixfix/lexer.ll"
RETURN(KW_GATHER)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 308 "../../../src/Mixfix/lexer.ll"
RETURN(KW_METADATA)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 309 "../../../src/Mixfix/lexer.ll"
RETURN(KW_STRAT)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 310 "../../../src/Mixfix/lexer.ll"
RETURN(KW_FROZEN)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 311 "../../../src/Mixfix/lexer.ll"
RETURN(KW_POLY)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 312 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CTOR)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 313 "../../../src/Mixfix/lexer.ll"
RETURN(KW_LATEX)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 314 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SPECIAL)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 315 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CONFIG)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 316 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OBJ)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 317 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSG)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 318 "../../../src/Mixfix/lexer.ll"
RETURN(KW_DITTO)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 319 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ID_HOOK)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 320 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP_HOOK)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 321 "../../../src/Mixfix/lexer.ll"
RETURN(KW_TERM_HOOK)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 322 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IS)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 323 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IF)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 324 "../../../src/Mixfix/lexer.ll"
RETURN(KW_IMPORT)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 325 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SORT)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 326 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBSORT)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 327 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CLASS)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 328 "../../../src/Mixfix/lexer.ll"
RETURN(KW_SUBCLASS)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 329 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OP)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 330 "../../../src/Mixfix/lexer.ll"
RETURN(KW_OPS)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 331 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MSGS)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 332 "../../../src/Mixfix/lexer.ll"
RETURN(KW_VAR)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 333 "../../../src/Mixfix/lexer.ll"
RETURN(KW_MB)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 334 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CMB)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 335 "../../../src/Mixfix/lexer.ll"
RETURN(KW_EQ)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 336 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CEQ)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 337 "../../../src/Mixfix/lexer.ll"
RETURN(KW_RL)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 338 "../../../src/Mixfix/lexer.ll"
RETURN(KW_CRL)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 339 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDM)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 340 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ENDV)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 341 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 342 "../../../src/Mixfix/lexer.ll"
RETURN(KW_ARROW2)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 343 "../../../src/Mixfix/lexer.ll"
RETURN(KW_PARTIAL)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 344 "../../../src/Mixfix/lexer.ll"
RETURN(KW_COLON2)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 345 "../../../src/Mixfix/lexer.ll"
RETURN(*yytext)
	YY_BREAK
case 169:
/* rule 169 can match eol */
YY_RULE_SETUP
#line 346 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(ENDS_IN_DOT)
	YY_BREAK
case 170:
/* rule 170 can match eol */
YY_RULE_SETUP
#line 347 "../../../src/Mixfix/lexer.ll"
RETURN_FIX_UP(IDENTIFIER)
	YY_BREAK

/*
  *	Bubble mode squirrels tokens away in lexerBubble until some termination criteria is met.
  */

case 171:
YY_RULE_SETUP
#line 354 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COLON) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 360 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_COMMA) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 366 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_LEFT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 372 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_RIGHT_BRACKET) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 378 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_EQUALS) && lexerBubble.length() >= minLength)
					    EXIT(*yytext)
					  else
					    STORE
					}
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 384 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_ARROW2) && lexerBubble.length() >= minLength)
					    EXIT(KW_ARROW2)
					  else
					    STORE
					}
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 390 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_TO) && lexerBubble.length() >= minLength)
					    EXIT(KW_TO)
					  else
					    STORE
					}
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 396 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_IF) && lexerBubble.length() >= minLength)
					    EXIT(KW_IF)
					  else
					    STORE
					}
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 402 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 && (terminationSet & BAR_OP_ATTRIBUTE) && lexerBubble.length() >= minLength)
					    {
					      yyless(0);  // need to re-lex it to get the correct return value
					      yy_pop_state();
					    }
					  else
					    STORE
					}
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 411 "../../../src/Mixfix/lexer.ll"
{
					  ++parenCount;
					  STORE
					}
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 415 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0)
					    {
					      if ((terminationSet & BAR_RIGHT_PAREN) && lexerBubble.length() >= minLength)
					        EXIT(*yytext)
					      IssueWarning(LineNumber(lineNumber) << ": mismatched parentheses.");
					    }
					  else
					    --parenCount;
					  STORE
					}
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 426 "../../../src/Mixfix/lexer.ll"
STORE
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 427 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() >= minLength &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE(*yytext)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE
					}
	YY_BREAK
case 184:
/* rule 184 can match eol */
YY_RULE_SETUP
#line 438 "../../../src/Mixfix/lexer.ll"
{
					  if (parenCount == 0 &&
					      lexerBubble.length() + 1 >= minLength  &&
					      (terminationSet & (END_STATEMENT | END_COMMAND)))
					    {
					      SAVE_FIX_UP(ENDS_IN_DOT)
					      BEGIN((terminationSet & END_STATEMENT) ? END_STATEMENT_MODE : END_COMMAND_MODE);
					    }
					  else
					    STORE_FIX_UP
					}
	YY_BREAK
case 185:
/* rule 185 can match eol */
YY_RULE_SETUP
#line 449 "../../../src/Mixfix/lexer.ll"
STORE_FIX_UP
	YY_BREAK

/*
  *	We have saved something that looks like a statement terminating period. We now lex the next
  *	token to see if it ends a module or starts a new statement, and if so push the lexed token back
  *	on to the input stream to be re-lexed in a new mode.
  */

case 186:
YY_RULE_SETUP
#line 458 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // BUG - need to deal with white space and comments after the .
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 187:
/* rule 187 can match eol */
YY_RULE_SETUP
#line 466 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);
					  yy_pop_state();
					  RETURN_SAVED(savedReturn)
					}
	YY_BREAK


case 188:
YY_RULE_SETUP
#line 474 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE(*yytext);
					}
	YY_BREAK
case 189:
/* rule 189 can match eol */
YY_RULE_SETUP
#line 478 "../../../src/Mixfix/lexer.ll"
{
					  lexerBubble.append(savedToken);
					  SAVE_FIX_UP(ENDS_IN_DOT)
					}
	YY_BREAK
case 190:
/* rule 190 can match eol */
YY_RULE_SETUP
#line 482 "../../../src/Mixfix/lexer.ll"
{
	     				  //
					  //	We need {maudeId} here so that an identifier such
					  //	as .foo doesn't get split by the first rule.
					  //
					  lexerBubble.append(savedToken);
					  yyless(0);
					  BEGIN(BUBBLE_MODE);
					}
	YY_BREAK


case 191:
YY_RULE_SETUP
#line 494 "../../../src/Mixfix/lexer.ll"
{
					  if (accumulator.empty())
					    BEGIN(FILE_NAME_QUOTE_MODE);
					  else
					    accumulator += '"';
					}
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 500 "../../../src/Mixfix/lexer.ll"
accumulator += ' ';
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 501 "../../../src/Mixfix/lexer.ll"
accumulator += '"';
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 502 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 503 "../../../src/Mixfix/lexer.ll"
accumulator += '\\';
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 504 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 197:
YY_RULE_SETUP
#line 505 "../../../src/Mixfix/lexer.ll"
{
					  if (!accumulator.empty())
					    {
					      yy_pop_state();
					      lvalp->yyString = accumulator.c_str();
					      eatComment(false);
					      return FILE_NAME_STRING;
					    }
					}
	YY_BREAK
case 198:
/* rule 198 can match eol */
YY_RULE_SETUP
#line 514 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 199:
YY_RULE_SETUP
#line 523 "../../../src/Mixfix/lexer.ll"
{
					   yy_pop_state();
					   lvalp->yyString = accumulator.c_str();
					   eatComment(false);
					   return FILE_NAME_STRING;
					}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 529 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 201:
/* rule 201 can match eol */
YY_RULE_SETUP
#line 530 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  yy_pop_state();
					  lvalp->yyString = accumulator.c_str();
					  return FILE_NAME_STRING;
					}
	YY_BREAK


case 202:
YY_RULE_SETUP
#line 539 "../../../src/Mixfix/lexer.ll"
{
					  yy_pop_state();
					  lvalp->yyString = yytext;			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK
case 203:
/* rule 203 can match eol */
YY_RULE_SETUP
#line 544 "../../../src/Mixfix/lexer.ll"
{
					  yyless(0);  // so that line numbers will be correct
					  yy_pop_state();
					  lvalp->yyString = "";			  
					  return UNINTERPRETED_STRING;
					}
	YY_BREAK


case 204:
YY_RULE_SETUP
#line 553 "../../../src/Mixfix/lexer.ll"
accumulator += yytext;
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 554 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    ++parenCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 206:
YY_RULE_SETUP
#line 559 "../../../src/Mixfix/lexer.ll"
{
					  if (braceCount == 0)
					    {
					      --parenCount;
					      if (parenCount == 0)
					        {
						  yyless(0);
						  yy_pop_state();
						  lvalp->yyString = accumulator.c_str();
						  return LATEX_STRING;
						}
					    }
					  accumulator += yytext;
					}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 573 "../../../src/Mixfix/lexer.ll"
{
					  ++braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 577 "../../../src/Mixfix/lexer.ll"
{
					  --braceCount;
					  accumulator += yytext;
					}
	YY_BREAK
case 209:
/* rule 209 can match eol */
YY_RULE_SETUP
#line 581 "../../../src/Mixfix/lexer.ll"
{
			                  ++lineNumber;					
					  accumulator += yytext;
					}
	YY_BREAK
case 210:
YY_RULE_SETUP
#line 585 "../../../src/Mixfix/lexer.ll"
yy_pop_state();  // mindless recovery
	YY_BREAK

case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(ID_MODE):
case YY_STATE_EOF(CMD_MODE):
case YY_STATE_EOF(SEEN_DOT):
case YY_STATE_EOF(BUBBLE_MODE):
case YY_STATE_EOF(END_STATEMENT_MODE):
case YY_STATE_EOF(END_COMMAND_MODE):
case YY_STATE_EOF(FILE_NAME_MODE):
case YY_STATE_EOF(FILE_NAME_QUOTE_MODE):
case YY_STATE_EOF(STRING_MODE):
case YY_STATE_EOF(LATEX_MODE):
#line 588 "../../../src/Mixfix/lexer.ll"
{
					  if (UserLevelRewritingContext::interrupted() ||
					      !handleEof())
					    yyterminate();
					}
	YY_BREAK
case 211:
YY_RULE_SETUP
#line 594 "../../../src/Mixfix/lexer.ll"
;
	YY_BREAK
case 212:
/* rule 212 can match eol */
YY_RULE_SETUP
#line 595 "../../../src/Mixfix/lexer.ll"
++lineNumber;
	YY_BREAK
case 213:
YY_RULE_SETUP
#line 596 "../../../src/Mixfix/lexer.ll"
{
					  IssueWarning(LineNumber(lineNumber) <<
					    ": skipped: " << QUOTE(yytext));
					}
	YY_BREAK
case 214:
YY_RULE_SETUP
#line 601 "../../../src/Mixfix/lexer.ll"
ECHO;
	YY_BREAK
#line 4568 "<stdout>"

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - (yytext_ptr)) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = (yy_hold_char);
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( (yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			(yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state(  );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = (yytext_ptr) + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++(yy_c_buf_p);
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = (yy_c_buf_p);
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer(  ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				(yy_did_buffer_switch_on_eof) = 0;

				if ( yywrap( ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					(yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				(yy_c_buf_p) =
					(yytext_ptr) + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				(yy_c_buf_p) =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

				yy_current_state = yy_get_previous_state(  );

				yy_cp = (yy_c_buf_p);
				yy_bp = (yytext_ptr) + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (void)
{
    	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = (yytext_ptr);
	register int number_to_move, i;
	int ret_val;

	if ( (yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( (yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) ((yy_c_buf_p) - (yytext_ptr)) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

			int yy_c_buf_p_offset =
				(int) ((yy_c_buf_p) - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc((void *) b->yy_ch_buf,b->yy_buf_size + 2  );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			(yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			(yy_n_chars), (size_t) num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	if ( (yy_n_chars) == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart(yyin  );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) ((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size  );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	(yy_n_chars) += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

	(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (void)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    
	yy_current_state = (yy_start);

	for ( yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			(yy_last_accepting_state) = yy_current_state;
			(yy_last_accepting_cpos) = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1314 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )
{
	register int yy_is_jam;
    	register char *yy_cp = (yy_c_buf_p);

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		(yy_last_accepting_state) = yy_current_state;
		(yy_last_accepting_cpos) = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1314 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1313);

	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp )
{
	register char *yy_cp;
    
    yy_cp = (yy_c_buf_p);

	/* undo effects of setting up yytext */
	*yy_cp = (yy_hold_char);

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = (yy_n_chars) + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

	(yytext_ptr) = yy_bp;
	(yy_hold_char) = *yy_cp;
	(yy_c_buf_p) = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (void)
#else
    static int input  (void)
#endif

{
	int c;
    
	*(yy_c_buf_p) = (yy_hold_char);

	if ( *(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( (yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] )
			/* This was really a NUL. */
			*(yy_c_buf_p) = '\0';

		else
			{ /* need more input */
			int offset = (yy_c_buf_p) - (yytext_ptr);
			++(yy_c_buf_p);

			switch ( yy_get_next_buffer(  ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart(yyin );

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( ) )
						return EOF;

					if ( ! (yy_did_buffer_switch_on_eof) )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					(yy_c_buf_p) = (yytext_ptr) + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) (yy_c_buf_p);	/* cast for 8-bit char's */
	*(yy_c_buf_p) = '\0';	/* preserve yytext */
	(yy_hold_char) = *++(yy_c_buf_p);

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * 
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file )
{
    
	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack ();
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin,YY_BUF_SIZE );
	}

	yy_init_buffer(YY_CURRENT_BUFFER,input_file );
	yy_load_buffer_state( );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * 
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )
{
    
	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack ();
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	(yy_did_buffer_switch_on_eof) = 1;
}

static void yy_load_buffer_state  (void)
{
    	(yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	(yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	(yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * 
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc(b->yy_buf_size + 2  );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer(b,file );

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * 
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b )
{
    
	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree((void *) b->yy_ch_buf  );

	yyfree((void *) b  );
}

#ifndef __cplusplus
extern int isatty (int );
#endif /* __cplusplus */
    
/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )

{
	int oerrno = errno;
    
	yy_flush_buffer(b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * 
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b )
{
    	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer )
{
    	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack();

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*(yy_c_buf_p) = (yy_hold_char);
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		(yy_buffer_stack_top)++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( );
	(yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  
 */
void yypop_buffer_state (void)
{
    	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER );
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if ((yy_buffer_stack_top) > 0)
		--(yy_buffer_stack_top);

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( );
		(yy_did_buffer_switch_on_eof) = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (void)
{
	int num_to_alloc;
    
	if (!(yy_buffer_stack)) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );
								  
		memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		(yy_buffer_stack_max) = num_to_alloc;
		(yy_buffer_stack_top) = 0;
		return;
	}

	if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = (yy_buffer_stack_max) + grow_size;
		(yy_buffer_stack) = (struct yy_buffer_state**)yyrealloc
								((yy_buffer_stack),
								num_to_alloc * sizeof(struct yy_buffer_state*)
								);
		if ( ! (yy_buffer_stack) )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
		(yy_buffer_stack_max) = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * 
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yyalloc(sizeof( struct yy_buffer_state )  );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer(b  );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * 
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (yyconst char * yystr )
{
    
	return yy_scan_bytes(yystr,strlen(yystr) );
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * 
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (yyconst char * yybytes, int  _yybytes_len )
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) yyalloc(n  );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer(buf,n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state )
{
    	if ( (yy_start_stack_ptr) >= (yy_start_stack_depth) )
		{
		yy_size_t new_size;

		(yy_start_stack_depth) += YY_START_STACK_INCR;
		new_size = (yy_start_stack_depth) * sizeof( int );

		if ( ! (yy_start_stack) )
			(yy_start_stack) = (int *) yyalloc(new_size  );

		else
			(yy_start_stack) = (int *) yyrealloc((void *) (yy_start_stack),new_size  );

		if ( ! (yy_start_stack) )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	(yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (void)
{
    	if ( --(yy_start_stack_ptr) < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

    static int yy_top_state  (void)
{
    	return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg )
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = (yy_hold_char); \
		(yy_c_buf_p) = yytext + yyless_macro_arg; \
		(yy_hold_char) = *(yy_c_buf_p); \
		*(yy_c_buf_p) = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the current line number.
 * 
 */
int yyget_lineno  (void)
{
        
    return yylineno;
}

/** Get the input stream.
 * 
 */
FILE *yyget_in  (void)
{
        return yyin;
}

/** Get the output stream.
 * 
 */
FILE *yyget_out  (void)
{
        return yyout;
}

/** Get the length of the current token.
 * 
 */
int yyget_leng  (void)
{
        return yyleng;
}

/** Get the current token.
 * 
 */

char *yyget_text  (void)
{
        return yytext;
}

/** Set the current line number.
 * @param line_number
 * 
 */
void yyset_lineno (int  line_number )
{
    
    yylineno = line_number;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * 
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  in_str )
{
        yyin = in_str ;
}

void yyset_out (FILE *  out_str )
{
        yyout = out_str ;
}

int yyget_debug  (void)
{
        return yy_flex_debug;
}

void yyset_debug (int  bdebug )
{
        yy_flex_debug = bdebug ;
}

static int yy_init_globals (void)
{
        /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    (yy_buffer_stack) = 0;
    (yy_buffer_stack_top) = 0;
    (yy_buffer_stack_max) = 0;
    (yy_c_buf_p) = (char *) 0;
    (yy_init) = 0;
    (yy_start) = 0;

    (yy_start_stack_ptr) = 0;
    (yy_start_stack_depth) = 0;
    (yy_start_stack) =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (void)
{
    
    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer(YY_CURRENT_BUFFER  );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state();
	}

	/* Destroy the stack itself. */
	yyfree((yy_buffer_stack) );
	(yy_buffer_stack) = NULL;

    /* Destroy the start condition stack. */
        yyfree((yy_start_stack)  );
        (yy_start_stack) = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( );

    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n )
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s )
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size )
{
	return (void *) malloc( size );
}

void *yyrealloc  (void * ptr, yy_size_t  size )
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void yyfree (void * ptr )
{
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 601 "../../../src/Mixfix/lexer.ll"



#include "lexerAux.cc"

