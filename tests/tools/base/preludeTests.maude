--- Load Systems and Prelude
--- ------------------------

load ../../../contrib/systems/cycle.maude
load ../../../contrib/tools/base/prelude.maude

--- Module BOUND
--- ------------

select BOUND .

reduce not (unbounded < 3) .
reduce 3 < unbounded .
reduce (unbounded < unbounded =/= true) and (unbounded < unbounded =/= false) .

reduce decrement(0) .
reduce decrement(9) .
reduce decrement(unbounded) .

reduce continue(3, 5)         == 4, 5 .
reduce continue(3, unbounded) == 4, unbounded .
reduce      continue(3, 4)                 :: Depth .
reduce      continue(3, unbounded)         :: Depth .
reduce not (continue(unbounded, unbounded) :: Depth) .
reduce not (continue(5, 3)                 :: Depth) .

--- Module META-LEVEL
--- -----------------

select META-LEVEL .

reduce getRls('nonsense, upModule('EXT-CYCLE, true)) == none .
reduce getRls('a2b, upModule('EXT-CYCLE, true)) == ( rl 'f['a.PreState] => 'f['b.PreState] [narrowing label('a2b)] . ) .
reduce getRls('a2c, upModule('EXT-CYCLE, true)) == ( rl 'f['a.PreState] => 'g['c.PreState] [narrowing label('a2c)] .
                                                     rl 'g['a.PreState] => 'g['c.PreState] [narrowing label('a2c)] .
                                                   ) .
reduce getRls('b2c, upModule('EXT-CYCLE, true)) == ( rl 'f['b.PreState] => 'f['c.PreState] [narrowing label('b2c)] . ) .
reduce getRls('c2a, upModule('EXT-CYCLE, true)) == ( rl 'f['c.PreState] => 'f['a.PreState] [narrowing label('c2a)] .
                                                     rl 'g['c.PreState] => 'g['a.PreState] [narrowing label('c2a)] .
                                                   ) .

reduce metaNarrowingApply(upModule('EXT-CYCLE, true), 'f['a.PreState], empty, '#, 0)
    == { 'f['b.PreState] ,'State , [] , 'a2b,(none).Substitution,(none).Substitution , '% } .

reduce metaNarrowingApply(upModule('EXT-CYCLE, true), 'f['a.PreState], empty, '#, 1)
    == { 'g['c.PreState] ,'State , [] , 'a2c ,(none).Substitution ,(none).Substitution , '% } .

reduce metaNarrowingApply(upModule('EXT-CYCLE, true), 'f['a.PreState], empty, '#, 2)
    == (failure).NarrowingApplyResult? .

--- Pretty Printing
--- ---------------

fmod PRETTY-PRINT-MODULE is
   protecting META-LEVEL + LEXICAL .

    var ME : ModuleExpression . var POS : PrintOptionSet .

    op printModule : ModuleExpression PrintOptionSet -> [QidList] .
    ---------------------------------------------------------------
    eq printModule(ME, POS) = metaPrettyPrint(upModule('META-LEVEL, false), upTerm(upModule(ME, false)), POS) .
endfm

reduce printModule('EXT-CYCLE, mixfix flat number rat qid-as-id) .
reduce printModule('EXT-CYCLE, mixfix flat number rat) .

reduce printTokens(printModule('EXT-CYCLE, mixfix flat number rat qid-as-id)) .
reduce printTokens(printModule('EXT-CYCLE, mixfix flat number rat)) .
