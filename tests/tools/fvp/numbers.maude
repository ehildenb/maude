load ../../../contrib/tools/fvp/numbers.maude

select FVP-NAT .

get variants N:Nat .
get variants N:Nat monus M:Nat .
get variants min(NzN:NzNat, M:Nat) .
get variants max(1 + NzN:NzNat, NzN:NzNat) .
get variants min(N:Nat, M:Nat) + max(N:Nat, M:Nat) .

select FVP-NAT-MULT .

get variants N:Nat * M:Nat .
get variants (1 + NzN:NzNat) * M:Nat .

select FVP-NUMBERS .

get variants 3 .

select FVP-INT .

get variants I:Int - N:Nat .
get variants min(N:Int, M:Int) + max(N:Int, M:Int) .

select FVP-INT-MULT .

get variants NzI:NzInt * NzN:NzNat .

select FVP-NAT-PRED .

get variants NzN:NzNat < N:Nat + NzN:NzNat .
get variants N:Nat < NzN:NzNat .

get variants NzN:NzNat <= N:Nat + NzN:NzNat .
get variants N:Nat <= NzN:NzNat .

select FVP-INT-PRED .

get variants I:Int < NzI:NzInt .
get variants NzI:NzInt < I:Int .
get variants   NzI:NzInt < - NzI':NzInt .
get variants - NzI:NzInt <   NzI':NzInt .
get variants - NzI:NzInt < - NzI':NzInt .

get variants I:Int <= NzI:NzInt .
get variants NzI:NzInt <= I:Int .
get variants   NzI:NzInt <= - NzI':NzInt .
get variants - NzI:NzInt <=   NzI':NzInt .
get variants - NzI:NzInt <= - NzI':NzInt .

select FVP-BOOL-EQFORM .

reduce true ?= true .

fmod TEST-FVP-NAT-EQFORM is
   protecting FVP-NAT-EQFORM + FVP-NAT-PRED .
endfm

reduce N:Nat ?= N:Nat + N':Nat .
reduce tt /\ N:Nat ?= NzN:Nat .

fmod TEST-FVP-BOOL-NAT-EQFORM is
    protecting FVP-BOOL-EQFORM + FVP-NAT-PRED .
endfm

reduce true ?= N:Nat < N':Nat .
reduce true ?= N:Nat < (N':Nat + NzN':Nat) .
reduce true ?= N:Nat <= N':Nat /\ false ?= N:Nat < N':Nat .
reduce N:Nat <= N':Nat ?= N':Nat < N:Nat .

--- TODO: Why does the first query generate the variant which is the second query, but the second queries variants are fully simplified `tt` and `ff`.
get variants true ?= (1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 <= V1:Nat)
          /\ true ?= (V1:Nat <= 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1)
          /\ true ?= (V1:Nat <  1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) .

get variants true ?= (1 + V1:Nat <  1 + 1 + 1 + 1)
          /\ true ?= (1 + V1:Nat <= 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1) .

fmod TEST-NON-CTOR-TERM is
   protecting FVP-BOOL-EQFORM + FVP-NAT-PRED .

    sort Foo .

    vars N N' : Nat . var F : Foo .

    op max-foo : Foo -> Nat .
    -------------------------
endfm

--- **TODO**: Third line causes Maude to crash!
get variants true ?= max(N', max-foo(F)) < N' .
get variants true ?= N' <= N .
get variants true ?= max(N', max-foo(F)) < N'
          /\ true ?= N' <= N .
