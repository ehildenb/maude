Warning: "bank-account.maude", line 127 (mod BANK-ACCOUNT): variable m is used
    before it is bound in rule:
rl < bal: n pend: x overdraft: ff > # msgs => < bal: n + m pend: x overdraft:
    ff > # msgs .
Warning: "bank-account.maude", line 189 (mod BANK-ACCOUNT-CTOR): variable m is
    used before it is bound in rule:
rl < bal: n pend: x overdraft: ff > # msgs => < bal: n + m pend: x overdraft:
    ff > # msgs [narrowing label deposit] .
Warning: sort declarations for operator resolveNames failed preregularity check
    on 6 out of 40 sort tuples. First such tuple is (Type).
Warning: sort declarations for operator resolveNames failed preregularity check
    on 1 out of 26 sort tuples. First such tuple is (NullDeclSet).
Warning: ctor declarations for associative operator __ are conflict on 138 out
    of 17576 sort triples. First such triple is (ModuleDeclSet, SortDeclSet,
    SortDeclSet).
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : #M .
rewrites: 605
result SModule: mod 'BANK-ACCOUNT-CTOR is
  protecting 'BANK-ACCOUNT-DEFINEDOPS .
  sorts 'Account ; 'CState ; 'Msg ; 'MsgConf ; 'Nat ; 'State ; 'StatePair ;
    'Truth .
  subsort 'Msg < 'MsgConf .
  op '0 : nil -> 'Nat [ctor] .
  op '1 : nil -> 'Nat [ctor] .
  op '<`bal:_pend:_overdraft:_> : 'Nat 'Nat 'Truth -> 'Account [ctor] .
  op '_#_ : 'Account 'MsgConf -> 'State [ctor] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Nat)] .
  op '_-_ : 'Nat 'Nat -> 'Nat [none] .
  op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
  op '_==_ : 'Nat 'Nat -> 'Truth [comm] .
  op '_>=_ : 'Nat 'Nat -> 'Truth [none] .
  op '_>_ : 'Nat 'Nat -> 'Truth [none] .
  op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
  op '_`,_ : 'MsgConf 'MsgConf -> 'MsgConf [assoc comm ctor id('mt.MsgConf)] .
  op '_|_ : 'State 'Truth -> 'CState [none] .
  op '`[_`,_`,_`] : 'Truth 'State 'State -> 'State [frozen(1 2 3)] .
  op '`[_`,_`] : 'State 'State -> 'StatePair [ctor] .
  op 'ff : nil -> 'Truth [ctor] .
  op 'mt : nil -> 'MsgConf [ctor] .
  op 'tt : nil -> 'Truth [ctor] .
  op 'withdraw : 'Nat -> 'Msg [ctor] .
  op '~ : 'Truth -> 'Truth [none] .
  none
  eq '_-_['n:Nat,'_+_['n:Nat,'m:Nat]] = '0.Nat [variant] .
  eq '_-_['_+_['n:Nat,'m:Nat],'n:Nat] = 'm:Nat [variant] .
  eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant] .
  eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant] .
  eq '_==_['n:Nat,'n:Nat] = 'tt.Truth [variant] .
  eq '_==_['n:Nat,'_+_['1.Nat,'n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>=_['n:Nat,'_+_['1.Nat,'n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>=_['_+_['n:Nat,'m:Nat],'n:Nat] = 'tt.Truth [variant] .
  eq '_>_['n:Nat,'_+_['n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>_['_+_['1.Nat,'n:Nat,'m:Nat],'n:Nat] = 'tt.Truth [variant] .
  eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant] .
  eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant] .
  eq '`[_`,_`,_`]['ff.Truth,'s:State,'s':State] = 's':State [variant] .
  eq '`[_`,_`,_`]['tt.Truth,'s:State,'s':State] = 's:State [variant] .
  eq '~['ff.Truth] = 'tt.Truth [variant] .
  eq '~['tt.Truth] = 'ff.Truth [variant] .
  rl '_|_['_#_['<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'ff.Truth],'_`,_[
    'M3:MsgConf,'withdraw['_+_['1.Nat,'N1:Nat,'N4:Nat]]]],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,N2:Nat`,ff.Truth`]`,_`,_`[M3:MsgConf`,withdraw`[_+_`[1.Nat`,N1:Nat`,N4:Nat`]`]`]`]`,_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,N2:Nat`,tt.Truth`]`,M3:MsgConf`]`):Truth] => '_|_['_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'tt.Truth],'M3:MsgConf],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,N2:Nat`,ff.Truth`]`,_`,_`[M3:MsgConf`,withdraw`[_+_`[1.Nat`,N1:Nat`,N4:Nat`]`]`]`]`,_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,N2:Nat`,tt.Truth`]`,M3:MsgConf`]`):Truth] [narrowing label(
    'overdraft)] .
  rl '_|_['_#_['<`bal:_pend:_overdraft:_>['n:Nat,'x:Nat,'ff.Truth],
    'msgs:MsgConf],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[n:Nat`,x:Nat`,ff.Truth`]`,msgs:MsgConf`]`,_#_`[<`bal:_pend:_overdraft:_>`[_+_`[n:Nat`,m:Nat`]`,x:Nat`,ff.Truth`]`,msgs:MsgConf`]`):Truth] => '_|_['_#_[
    '<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat],'x:Nat,'ff.Truth],
    'msgs:MsgConf],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[n:Nat`,x:Nat`,ff.Truth`]`,msgs:MsgConf`]`,_#_`[<`bal:_pend:_overdraft:_>`[_+_`[n:Nat`,m:Nat`]`,x:Nat`,ff.Truth`]`,msgs:MsgConf`]`):Truth] [nonexec narrowing label(
    'deposit)] .
  rl '_|_['_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat],'_+_['N3:Nat,
    'N4:Nat],'ff.Truth],'_`,_['M2:MsgConf,'withdraw['N3:Nat]]],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[_+_`[N1:Nat`,N3:Nat`]`,_+_`[N3:Nat`,N4:Nat`]`,ff.Truth`]`,_`,_`[M2:MsgConf`,withdraw`[N3:Nat`]`]`]`,_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,N4:Nat`,ff.Truth`]`,M2:MsgConf`]`):Truth] => '_|_['_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N4:Nat,'ff.Truth],'M2:MsgConf],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[_+_`[N1:Nat`,N3:Nat`]`,_+_`[N3:Nat`,N4:Nat`]`,ff.Truth`]`,_`,_`[M2:MsgConf`,withdraw`[N3:Nat`]`]`]`,_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,N4:Nat`,ff.Truth`]`,M2:MsgConf`]`):Truth] [narrowing label(
    'doWithdrawal2)] .
  rl '_|_['_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat,'N4:Nat],
    'N3:Nat,'ff.Truth],'_`,_['M2:MsgConf,'withdraw['_+_['N3:Nat,'N4:Nat]]]],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[_+_`[N1:Nat`,N3:Nat`,N4:Nat`]`,N3:Nat`,ff.Truth`]`,_`,_`[M2:MsgConf`,withdraw`[_+_`[N3:Nat`,N4:Nat`]`]`]`]`,_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,0.Nat`,ff.Truth`]`,M2:MsgConf`]`):Truth] =>
    '_|_['_#_['<`bal:_pend:_overdraft:_>['N1:Nat,'0.Nat,'ff.Truth],
    'M2:MsgConf],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[_+_`[N1:Nat`,N3:Nat`,N4:Nat`]`,N3:Nat`,ff.Truth`]`,_`,_`[M2:MsgConf`,withdraw`[_+_`[N3:Nat`,N4:Nat`]`]`]`]`,_#_`[<`bal:_pend:_overdraft:_>`[N1:Nat`,0.Nat`,ff.Truth`]`,M2:MsgConf`]`):Truth] [narrowing label('doWithdrawal1)] .
  rl '_|_['_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat,'x:Nat],'x:Nat,
    'ff.Truth],'msgs:MsgConf],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[_+_`[n:Nat`,m:Nat`,x:Nat`]`,x:Nat`,ff.Truth`]`,msgs:MsgConf`]`,_#_`[<`bal:_pend:_overdraft:_>`[_+_`[n:Nat`,_+_`[m:Nat`,x:Nat`]`]`,_+_`[m:Nat`,x:Nat`]`,ff.Truth`]`,_`,_`[msgs:MsgConf`,withdraw`[m:Nat`]`]`]`):Truth] => '_|_['_#_[
    '<`bal:_pend:_overdraft:_>['_+_['n:Nat,'_+_['m:Nat,'x:Nat]],'_+_['m:Nat,
    'x:Nat],'ff.Truth],'_`,_['msgs:MsgConf,'withdraw['m:Nat]]],'#makeVariable`(_#_`[<`bal:_pend:_overdraft:_>`[_+_`[n:Nat`,m:Nat`,x:Nat`]`,x:Nat`,ff.Truth`]`,msgs:MsgConf`]`,_#_`[<`bal:_pend:_overdraft:_>`[_+_`[n:Nat`,_+_`[m:Nat`,x:Nat`]`]`,_+_`[m:Nat`,x:Nat`]`,ff.Truth`]`,_`,_`[msgs:MsgConf`,withdraw`[m:Nat`]`]`]`):Truth] [narrowing label('initWithdrawal)] .
endm
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : #MC .
rewrites: 1
result SModule: mod 'BANK-ACCOUNT-DEFINEDOPS is
  nil
  sorts 'Account ; 'Msg ; 'MsgConf ; 'Nat ; 'State ; 'StatePair ; 'Truth .
  subsort 'Msg < 'MsgConf .
  op '0 : nil -> 'Nat [ctor] .
  op '1 : nil -> 'Nat [ctor] .
  op '<`bal:_pend:_overdraft:_> : 'Nat 'Nat 'Truth -> 'Account [ctor] .
  op '_#_ : 'Account 'MsgConf -> 'State [ctor] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Nat)] .
  op '_->_ : 'Truth 'Truth -> 'Truth [none] .
  op '_-_ : 'Nat 'Nat -> 'Nat [none] .
  op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
  op '_==_ : 'Nat 'Nat -> 'Truth [comm] .
  op '_>=_ : 'Nat 'Nat -> 'Truth [none] .
  op '_>_ : 'Nat 'Nat -> 'Truth [none] .
  op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
  op '_`,_ : 'MsgConf 'MsgConf -> 'MsgConf [assoc comm ctor id('mt.MsgConf)] .
  op '`[_`,_`,_`] : 'Truth 'State 'State -> 'State [frozen(1 2 3)] .
  op '`[_`,_`] : 'State 'State -> 'StatePair [ctor] .
  op 'debts : 'MsgConf -> 'Nat [none] .
  op 'ff : nil -> 'Truth [ctor] .
  op 'mt : nil -> 'MsgConf [ctor] .
  op 'tt : nil -> 'Truth [ctor] .
  op 'withdraw : 'Nat -> 'Msg [ctor] .
  op '~ : 'Truth -> 'Truth [none] .
  none
  eq '_->_['X:Truth,'X:Truth] = 'tt.Truth [variant] .
  eq '_->_['X:Truth,'Y:Truth] = '_\/_['~['X:Truth],'Y:Truth] [variant] .
  eq '_->_['X:Truth,'tt.Truth] = 'tt.Truth [variant] .
  eq '_->_['ff.Truth,'X:Truth] = 'tt.Truth [variant] .
  eq '_-_['n:Nat,'_+_['n:Nat,'m:Nat]] = '0.Nat [variant] .
  eq '_-_['_+_['n:Nat,'m:Nat],'n:Nat] = 'm:Nat [variant] .
  eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant] .
  eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant] .
  eq '_==_['n:Nat,'n:Nat] = 'tt.Truth [variant] .
  eq '_==_['n:Nat,'_+_['1.Nat,'n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>=_['n:Nat,'_+_['1.Nat,'n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>=_['_+_['n:Nat,'m:Nat],'n:Nat] = 'tt.Truth [variant] .
  eq '_>_['n:Nat,'_+_['n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>_['_+_['1.Nat,'n:Nat,'m:Nat],'n:Nat] = 'tt.Truth [variant] .
  eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant] .
  eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant] .
  eq '`[_`,_`,_`]['ff.Truth,'s:State,'s':State] = 's':State [variant] .
  eq '`[_`,_`,_`]['tt.Truth,'s:State,'s':State] = 's:State [variant] .
  eq 'debts['mt.MsgConf] = '0.Nat [none] .
  eq 'debts['_`,_['MSGS:MsgConf,'withdraw['N:Nat]]] = '_+_['N:Nat,'debts[
    'MSGS:MsgConf]] [none] .
  eq '~['ff.Truth] = 'tt.Truth [variant] .
  eq '~['tt.Truth] = 'ff.Truth [variant] .
  rl '_#_['<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'ff.Truth],'_`,_[
    'M3:MsgConf,'withdraw['_+_['1.Nat,'N1:Nat,'N4:Nat]]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'tt.Truth],'M3:MsgConf] [
    narrowing label('overdraft)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['n:Nat,'x:Nat,'ff.Truth],'msgs:MsgConf] =>
    '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat],'x:Nat,'ff.Truth],
    'msgs:MsgConf] [nonexec narrowing label('deposit)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat],'_+_['N3:Nat,
    'N4:Nat],'ff.Truth],'_`,_['M2:MsgConf,'withdraw['N3:Nat]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N4:Nat,'ff.Truth],'M2:MsgConf] [
    narrowing label('doWithdrawal2)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat,'N4:Nat],'N3:Nat,
    'ff.Truth],'_`,_['M2:MsgConf,'withdraw['_+_['N3:Nat,'N4:Nat]]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'0.Nat,'ff.Truth],'M2:MsgConf] [
    narrowing label('doWithdrawal1)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat,'x:Nat],'x:Nat,
    'ff.Truth],'msgs:MsgConf] => '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,
    '_+_['m:Nat,'x:Nat]],'_+_['m:Nat,'x:Nat],'ff.Truth],'_`,_['msgs:MsgConf,
    'withdraw['m:Nat]]] [narrowing label('initWithdrawal)] .
endm
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : #MO .
rewrites: 1
result SModule: mod 'BANK-ACCOUNT-CTOR is
  nil
  sorts 'Account ; 'Msg ; 'MsgConf ; 'Nat ; 'State ; 'StatePair ; 'Truth .
  subsort 'Msg < 'MsgConf .
  op '0 : nil -> 'Nat [ctor] .
  op '1 : nil -> 'Nat [ctor] .
  op '<`bal:_pend:_overdraft:_> : 'Nat 'Nat 'Truth -> 'Account [ctor] .
  op '_#_ : 'Account 'MsgConf -> 'State [ctor] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Nat)] .
  op '_-_ : 'Nat 'Nat -> 'Nat [none] .
  op '_/\_ : 'Truth 'Truth -> 'Truth [none] .
  op '_==_ : 'Nat 'Nat -> 'Truth [comm] .
  op '_>=_ : 'Nat 'Nat -> 'Truth [none] .
  op '_>_ : 'Nat 'Nat -> 'Truth [none] .
  op '_\/_ : 'Truth 'Truth -> 'Truth [none] .
  op '_`,_ : 'MsgConf 'MsgConf -> 'MsgConf [assoc comm ctor id('mt.MsgConf)] .
  op '`[_`,_`,_`] : 'Truth 'State 'State -> 'State [frozen(1 2 3)] .
  op '`[_`,_`] : 'State 'State -> 'StatePair [ctor] .
  op 'ff : nil -> 'Truth [ctor] .
  op 'mt : nil -> 'MsgConf [ctor] .
  op 'tt : nil -> 'Truth [ctor] .
  op 'withdraw : 'Nat -> 'Msg [ctor] .
  op '~ : 'Truth -> 'Truth [none] .
  none
  eq '_-_['n:Nat,'_+_['n:Nat,'m:Nat]] = '0.Nat [variant] .
  eq '_-_['_+_['n:Nat,'m:Nat],'n:Nat] = 'm:Nat [variant] .
  eq '_/\_['ff.Truth,'B:Truth] = 'ff.Truth [variant] .
  eq '_/\_['tt.Truth,'B:Truth] = 'B:Truth [variant] .
  eq '_==_['n:Nat,'n:Nat] = 'tt.Truth [variant] .
  eq '_==_['n:Nat,'_+_['1.Nat,'n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>=_['n:Nat,'_+_['1.Nat,'n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>=_['_+_['n:Nat,'m:Nat],'n:Nat] = 'tt.Truth [variant] .
  eq '_>_['n:Nat,'_+_['n:Nat,'m:Nat]] = 'ff.Truth [variant] .
  eq '_>_['_+_['1.Nat,'n:Nat,'m:Nat],'n:Nat] = 'tt.Truth [variant] .
  eq '_\/_['ff.Truth,'B:Truth] = 'B:Truth [variant] .
  eq '_\/_['tt.Truth,'B:Truth] = 'tt.Truth [variant] .
  eq '`[_`,_`,_`]['ff.Truth,'s:State,'s':State] = 's':State [variant] .
  eq '`[_`,_`,_`]['tt.Truth,'s:State,'s':State] = 's:State [variant] .
  eq '~['ff.Truth] = 'tt.Truth [variant] .
  eq '~['tt.Truth] = 'ff.Truth [variant] .
  rl '_#_['<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'ff.Truth],'_`,_[
    'M3:MsgConf,'withdraw['_+_['1.Nat,'N1:Nat,'N4:Nat]]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'tt.Truth],'M3:MsgConf] [
    narrowing label('overdraft)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['n:Nat,'x:Nat,'ff.Truth],'msgs:MsgConf] =>
    '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat],'x:Nat,'ff.Truth],
    'msgs:MsgConf] [nonexec narrowing label('deposit)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat],'_+_['N3:Nat,
    'N4:Nat],'ff.Truth],'_`,_['M2:MsgConf,'withdraw['N3:Nat]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N4:Nat,'ff.Truth],'M2:MsgConf] [
    narrowing label('doWithdrawal2)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat,'N4:Nat],'N3:Nat,
    'ff.Truth],'_`,_['M2:MsgConf,'withdraw['_+_['N3:Nat,'N4:Nat]]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'0.Nat,'ff.Truth],'M2:MsgConf] [
    narrowing label('doWithdrawal1)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat,'x:Nat],'x:Nat,
    'ff.Truth],'msgs:MsgConf] => '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,
    '_+_['m:Nat,'x:Nat]],'_+_['m:Nat,'x:Nat],'ff.Truth],'_`,_['msgs:MsgConf,
    'withdraw['m:Nat]]] [narrowing label('initWithdrawal)] .
endm
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M) .
rewrites: 2
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#MC) .
rewrites: 2
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#MO) .
rewrites: 2
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : leastSort(#M, init(0)) .
rewrites: 3
result Sort: 'State
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(0)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(1)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(2)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(3)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(4)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(5)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : leastSort(#M, pred(0)) .
rewrites: 3
result Sort: 'Truth
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(0)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(1)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(2)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(3)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(4)) .
rewrites: 43
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(5)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(6)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(7)) .
rewrites: 47
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : leastSort(#M, cinit(0)) .
rewrites: 5
result Sort: 'CState
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(0)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(1)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(2)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(3)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(4)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(5)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(6)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(7)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : bfs(state(cinit(0))) .
rewrites: 271
result FoldedLabeledGraph: (0 -[label('deposit, 
  'C:Truth <- '@4:Truth ; 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '@1:Nat ; 
  'X:Nat <- '@2:Nat)]-> 0[fold(
  'C:Truth <- '@4:Truth ; 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '_+_['@1:Nat,'@5:Nat] ; 
  'X:Nat <- '@2:Nat)]
0 -[label('deposit, 
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '@1:Nat ; 
  'X:Nat <- '@2:Nat)]-> 0[fold(
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '_+_['@1:Nat,'@4:Nat] ; 
  'X:Nat <- '@2:Nat)]
0 -[label('doWithdrawal1, 
  'C:Truth <- '@1:Truth ; 
  'MSGS:MsgConf <- '_`,_['@2:MsgConf,'withdraw['_+_['@3:Nat,'@4:Nat]]] ; 
  'N:Nat <- '_+_['@3:Nat,'@4:Nat,'@5:Nat] ; 
  'X:Nat <- '@3:Nat)]-> 0[fold(
  'C:Truth <- '@1:Truth ; 
  'MSGS:MsgConf <- '@2:MsgConf ; 
  'N:Nat <- '@5:Nat ; 
  'X:Nat <- '0.Nat)]
0 -[label('doWithdrawal1, 
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '_`,_['@1:MsgConf,'withdraw['_+_['@2:Nat,'@3:Nat]]] ; 
  'N:Nat <- '_+_['@2:Nat,'@3:Nat,'@4:Nat] ; 
  'X:Nat <- '@2:Nat)]-> 0[fold(
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '@1:MsgConf ; 
  'N:Nat <- '@4:Nat ; 
  'X:Nat <- '0.Nat)]
0 -[label('doWithdrawal2, 
  'C:Truth <- '@1:Truth ; 
  'MSGS:MsgConf <- '_`,_['@5:MsgConf,'withdraw['@2:Nat]] ; 
  'N:Nat <- '_+_['@2:Nat,'@4:Nat] ; 
  'X:Nat <- '_+_['@2:Nat,'@3:Nat])]-> 0[fold(
  'C:Truth <- '@1:Truth ; 
  'MSGS:MsgConf <- '@5:MsgConf ; 
  'N:Nat <- '@4:Nat ; 
  'X:Nat <- '@3:Nat)]
0 -[label('doWithdrawal2, 
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '_`,_['@4:MsgConf,'withdraw['@1:Nat]] ; 
  'N:Nat <- '_+_['@3:Nat,'@1:Nat] ; 
  'X:Nat <- '_+_['@2:Nat,'@1:Nat])]-> 0[fold(
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '@4:MsgConf ; 
  'N:Nat <- '@3:Nat ; 
  'X:Nat <- '@2:Nat)]
0 -[label('initWithdrawal, 
  'C:Truth <- '@2:Truth ; 
  'MSGS:MsgConf <- '@1:MsgConf ; 
  'N:Nat <- '_+_['@3:Nat,'@4:Nat,'@5:Nat] ; 
  'X:Nat <- '@5:Nat)]-> 0[fold(
  'C:Truth <- '@2:Truth ; 
  'MSGS:MsgConf <- '_`,_['@1:MsgConf,'withdraw['@4:Nat]] ; 
  'N:Nat <- '_+_['@3:Nat,'@4:Nat,'@5:Nat] ; 
  'X:Nat <- '_+_['@4:Nat,'@5:Nat])]
0 -[label('initWithdrawal, 
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '@1:MsgConf ; 
  'N:Nat <- '_+_['@2:Nat,'@3:Nat,'@4:Nat] ; 
  'X:Nat <- '@4:Nat)]-> 0[fold(
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '_`,_['@1:MsgConf,'withdraw['@3:Nat]] ; 
  'N:Nat <- '_+_['@2:Nat,'@3:Nat,'@4:Nat] ; 
  'X:Nat <- '_+_['@3:Nat,'@4:Nat])]
0 -[label('overdraft, 
  'C:Truth <- '@2:Truth ; 
  'MSGS:MsgConf <- '_`,_['@3:MsgConf,'withdraw['_+_['1.Nat,'@4:Nat,'@5:Nat]]] ;
    
  'N:Nat <- '@4:Nat ; 
  'X:Nat <- '@1:Nat)]-> 18
0 -[label('overdraft, 
  'C:Truth <- '@5:Truth ; 
  'MSGS:MsgConf <- '_`,_['@2:MsgConf,'withdraw['_+_['1.Nat,'@3:Nat,'@4:Nat]]] ;
    
  'N:Nat <- '@3:Nat ; 
  'X:Nat <- '@1:Nat)]-> 18[fold(
  '@1:Nat <- '@1:Nat ; 
  '@2:Truth <- '@5:Truth ; 
  '@3:MsgConf <- '@2:MsgConf ; 
  '@4:Nat <- '@3:Nat)])
| 0 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'ff.Truth],
    'MSGS:MsgConf],'C:Truth])
18 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['@4:Nat,'@1:Nat,'tt.Truth],
    '@3:MsgConf],'@2:Truth])
| 21
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : bfs(state(cinit(1)), 1) .
Warning: unsafe variable name @1:Nat in variant narrowing problem.
Warning: unsafe variable name @3:Nat in variant narrowing problem.
Warning: unsafe variable name @3:Nat in variant narrowing problem.
Warning: unsafe variable name @3:Nat in variant narrowing problem.
rewrites: 950
result FoldedLabeledGraph?: (0 -[label('deposit, 
  'MSGS:MsgConf <- '%1:MsgConf ; 
  'N:Nat <- '%2:Nat ; 
  'X:Nat <- '_+_['1.Nat,'%2:Nat,'%3:Nat])]-> 0[fold(
  'MSGS:MsgConf <- '%1:MsgConf ; 
  'N:Nat <- '_+_['%2:Nat,'%4:Nat] ; 
  'X:Nat <- '_+_['1.Nat,'%2:Nat,'%3:Nat])]
0 -[label('deposit, 
  'MSGS:MsgConf <- '%1:MsgConf ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat] ; 
  'X:Nat <- '%2:Nat)]-> 0[fold(
  'MSGS:MsgConf <- '%1:MsgConf ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat,'%4:Nat] ; 
  'X:Nat <- '%2:Nat)]
0 -[label('deposit, 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '@1:Nat ; 
  'X:Nat <- '@2:Nat)]-> 6
0 -[label('doWithdrawal1, 
  'MSGS:MsgConf <- '_`,_['%1:MsgConf,'withdraw['_+_['%2:Nat,'%3:Nat]]] ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat,'%4:Nat] ; 
  'X:Nat <- '%2:Nat)]-> 0[fold(
  'MSGS:MsgConf <- '%1:MsgConf ; 
  'N:Nat <- '%4:Nat ; 
  'X:Nat <- '0.Nat)]
0 -[label('doWithdrawal1, 
  'MSGS:MsgConf <- '_`,_['@1:MsgConf,'withdraw['_+_['@2:Nat,'@3:Nat]]] ; 
  'N:Nat <- '_+_['@2:Nat,'@3:Nat,'@4:Nat] ; 
  'X:Nat <- '@2:Nat)]-> 0[fold(
  'MSGS:MsgConf <- '@1:MsgConf ; 
  'N:Nat <- '@4:Nat ; 
  'X:Nat <- '0.Nat)]
0 -[label('doWithdrawal2, 
  'MSGS:MsgConf <- '_`,_['%4:MsgConf,'withdraw['%1:Nat]] ; 
  'N:Nat <- '_+_['%1:Nat,'%2:Nat] ; 
  'X:Nat <- '_+_['1.Nat,'%1:Nat,'%2:Nat,'%3:Nat])]-> 0[fold(
  'MSGS:MsgConf <- '%4:MsgConf ; 
  'N:Nat <- '%2:Nat ; 
  'X:Nat <- '_+_['1.Nat,'%2:Nat,'%3:Nat])]
0 -[label('doWithdrawal2, 
  'MSGS:MsgConf <- '_`,_['%4:MsgConf,'withdraw['%1:Nat]] ; 
  'N:Nat <- '_+_['%1:Nat,'%2:Nat,'%3:Nat] ; 
  'X:Nat <- '_+_['%1:Nat,'%2:Nat])]-> 0[fold(
  'MSGS:MsgConf <- '%4:MsgConf ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat] ; 
  'X:Nat <- '%2:Nat)]
0 -[label('doWithdrawal2, 
  'MSGS:MsgConf <- '_`,_['@4:MsgConf,'withdraw['@1:Nat]] ; 
  'N:Nat <- '_+_['@3:Nat,'@1:Nat] ; 
  'X:Nat <- '_+_['@2:Nat,'@1:Nat])]-> 16
0 -[label('initWithdrawal, 
  'MSGS:MsgConf <- '%2:MsgConf ; 
  'N:Nat <- '_+_['%1:Nat,'%3:Nat,'%4:Nat] ; 
  'X:Nat <- '%1:Nat)]-> 0[fold(
  'MSGS:MsgConf <- '_`,_['%2:MsgConf,'withdraw['%3:Nat]] ; 
  'N:Nat <- '_+_['%1:Nat,'%3:Nat,'%4:Nat] ; 
  'X:Nat <- '_+_['%1:Nat,'%3:Nat])]
0 -[label('initWithdrawal, 
  'MSGS:MsgConf <- '@1:MsgConf ; 
  'N:Nat <- '_+_['@2:Nat,'@3:Nat,'@4:Nat] ; 
  'X:Nat <- '@4:Nat)]-> 0[fold(
  'MSGS:MsgConf <- '_`,_['@1:MsgConf,'withdraw['@3:Nat]] ; 
  'N:Nat <- '_+_['@2:Nat,'@3:Nat,'@4:Nat] ; 
  'X:Nat <- '_+_['@3:Nat,'@4:Nat])]
0 -[label('overdraft, 
  'MSGS:MsgConf <- '_`,_['%1:MsgConf,'withdraw['_+_['1.Nat,'%2:Nat,'%3:Nat]]] ;
    
  'N:Nat <- '%2:Nat ; 
  'X:Nat <- '_+_['1.Nat,'%2:Nat,'%4:Nat])]-> 22
0 -[label('overdraft, 
  'MSGS:MsgConf <- '_`,_['%1:MsgConf,'withdraw['_+_['1.Nat,'%2:Nat,'%3:Nat,
    '%4:Nat]]] ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat] ; 
  'X:Nat <- '%2:Nat)]-> 24
0 -[label('overdraft, 
  'MSGS:MsgConf <- '_`,_['@2:MsgConf,'withdraw['_+_['1.Nat,'@3:Nat,'@4:Nat]]] ;
    
  'N:Nat <- '@3:Nat ; 
  'X:Nat <- '@1:Nat)]-> 26)
| 0 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'ff.Truth],
    'MSGS:MsgConf],'_>=_['N:Nat,'X:Nat]])
6 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['_+_['@1:Nat,'@4:Nat],'@2:Nat,
    'ff.Truth],'@3:MsgConf],'_>=_['@1:Nat,'@2:Nat]])
16 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['@3:Nat,'@2:Nat,'ff.Truth],
    '@4:MsgConf],'_>=_['_+_['@3:Nat,'@1:Nat],'_+_['@2:Nat,'@1:Nat]]])
22 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['%2:Nat,'_+_['1.Nat,'%2:Nat,
    '%4:Nat],'tt.Truth],'%1:MsgConf],'ff.Truth])
24 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['_+_['%2:Nat,'%3:Nat],
    '%2:Nat,'tt.Truth],'%1:MsgConf],'tt.Truth])
26 |-> state('_|_['_#_['<`bal:_pend:_overdraft:_>['@3:Nat,'@1:Nat,'tt.Truth],
    '@2:MsgConf],'_>=_['@3:Nat,'@1:Nat]])
| 27
| 6 ; 16 ; 22 ; 24 ; 26
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : state(pred(1)) <= state(pred(
    0)) .
rewrites: 7
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : states(1) <= states(0) .
rewrites: 13
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : states(1) <= states(2) .
rewrites: 16
result [Bool]: state('_|_['_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,
    'ff.Truth],'MSGS:MsgConf],'_>=_['N:Nat,'X:Nat]]) <= state('_|_['_#_[
    '<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'tt.Truth],'MSGS:MsgConf],
    'C:Truth])
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : intersect(states(0), states(2))
    .
rewrites: 208
result Bool: false
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : implies?(pred(0), pred(0)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : implies?(pred(0), pred(1)) .
rewrites: 56
result Bool: false
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : implies?(pred(1), pred(2)) .
rewrites: 30
result Bool: false
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : invariant(states(0)) .
rewrites: 266
result [Bool]: state('_|_['_#_['<`bal:_pend:_overdraft:_>['@4:Nat,'@1:Nat,
    'tt.Truth],'@3:MsgConf],'@2:Truth]) <= state('_|_['_#_[
    '<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'ff.Truth],'MSGS:MsgConf],
    'C:Truth])
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : invariant(states(2)) .
rewrites: 27
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : invariant(states(0 ; 2)) .
rewrites: 297
result Bool: true
Bye.
