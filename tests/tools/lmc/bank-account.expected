Warning: sort declarations for operator resolveNames failed preregularity check
    on 6 out of 48 sort tuples. First such tuple is (Type).
Warning: sort declarations for operator resolveNames failed preregularity check
    on 1 out of 26 sort tuples. First such tuple is (NullDeclSet).
Warning: ctor declarations for associative operator __ are conflict on 138 out
    of 17576 sort triples. First such triple is (ModuleDeclSet, SortDeclSet,
    SortDeclSet).
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : #M .
rewrites: 98
result SModule: mod 'BANK-ACCOUNT-CTOR is
  protecting 'FVP-BOOL-EQFORM .
  protecting 'FVP-NAT-PRED .
  sorts 'Account ; 'CState ; 'Msg ; 'MsgConf ; 'State ; 'StatePair .
  subsort 'Msg < 'MsgConf .
  op '<`bal:_pend:_overdraft:_> : 'Nat 'Nat 'Bool -> 'Account [ctor] .
  op '_#_ : 'Account 'MsgConf -> 'State [ctor] .
  op '_`,_ : 'MsgConf 'MsgConf -> 'MsgConf [assoc comm ctor id('mt.MsgConf)] .
  op '_st_ : 'State 'Form`{Bool`} -> 'CState [ctor prec(57)] .
  op '`[_`,_`,_`] : 'Bool 'State 'State -> 'State [frozen(1 2 3)] .
  op '`[_`,_`] : 'State 'State -> 'StatePair [ctor] .
  op 'debts : 'MsgConf -> 'Nat [none] .
  op 'mt : nil -> 'MsgConf [ctor] .
  op 'withdraw : 'Nat -> 'Msg [ctor] .
  none
  eq '`[_`,_`,_`]['false.Bool,'s:State,'s':State] = 's':State [variant] .
  eq '`[_`,_`,_`]['true.Bool,'s:State,'s':State] = 's:State [variant] .
  eq 'debts['mt.MsgConf] = '0.Nat [none] .
  eq 'debts['_`,_['MSGS:MsgConf,'withdraw['N:Nat]]] = '_+_['N:Nat,'debts[
    'MSGS:MsgConf]] [none] .
  rl '_st_['_#_['<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'false.Bool],'_`,_[
    'M3:MsgConf,'withdraw['_+_['1.NzNat,'N1:Nat,'N4:Nat]]]],
    '###COND###:Form`{Bool`}] => '_st_['_#_['<`bal:_pend:_overdraft:_>['N1:Nat,
    'N2:Nat,'true.Bool],'M3:MsgConf],'###COND###:Form`{Bool`}] [narrowing
    label('overdraft)] .
  rl '_st_['_#_['<`bal:_pend:_overdraft:_>['n:Nat,'x:Nat,'false.Bool],
    'msgs:MsgConf],'###COND###:Form`{Bool`}] => '_st_['_#_[
    '<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat],'x:Nat,'false.Bool],
    'msgs:MsgConf],'###COND###:Form`{Bool`}] [narrowing label('deposit)] .
  rl '_st_['_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat],'_+_['N3:Nat,
    'N4:Nat],'false.Bool],'_`,_['M2:MsgConf,'withdraw['N3:Nat]]],
    '###COND###:Form`{Bool`}] => '_st_['_#_['<`bal:_pend:_overdraft:_>['N1:Nat,
    'N4:Nat,'false.Bool],'M2:MsgConf],'###COND###:Form`{Bool`}] [narrowing
    label('doWithdrawal2)] .
  rl '_st_['_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat,'N4:Nat],
    'N3:Nat,'false.Bool],'_`,_['M2:MsgConf,'withdraw['_+_['N3:Nat,'N4:Nat]]]],
    '###COND###:Form`{Bool`}] => '_st_['_#_['<`bal:_pend:_overdraft:_>['N1:Nat,
    '0.Nat,'false.Bool],'M2:MsgConf],'###COND###:Form`{Bool`}] [narrowing
    label('doWithdrawal1)] .
  rl '_st_['_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat,'x:Nat],'x:Nat,
    'false.Bool],'msgs:MsgConf],'###COND###:Form`{Bool`}] => '_st_['_#_[
    '<`bal:_pend:_overdraft:_>['_+_['n:Nat,'_+_['m:Nat,'x:Nat]],'_+_['m:Nat,
    'x:Nat],'false.Bool],'_`,_['msgs:MsgConf,'withdraw['m:Nat]]],
    '###COND###:Form`{Bool`}] [narrowing label('initWithdrawal)] .
endm
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : #MC .
rewrites: 3
result FModule: fmod 'FVP-BOOL-EQFORM is
  protecting 'EQFORM-IMPL{'Bool} .
  sorts none .
  none
  none
  none
  eq '_!=_['false.Bool,'false.Bool] = 'ff.FalseLit`{Bool`} [none] .
  eq '_!=_['true.Bool,'false.Bool] = 'tt.TrueLit`{Bool`} [none] .
  eq '_!=_['true.Bool,'true.Bool] = 'ff.FalseLit`{Bool`} [none] .
  eq '_?=_['false.Bool,'false.Bool] = 'tt.TrueLit`{Bool`} [none] .
  eq '_?=_['true.Bool,'false.Bool] = 'ff.FalseLit`{Bool`} [none] .
  eq '_?=_['true.Bool,'true.Bool] = 'tt.TrueLit`{Bool`} [none] .
endfm
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : #MO .
rewrites: 1
result SModule: mod 'BANK-ACCOUNT-CTOR is
  protecting 'FVP-NAT-PRED .
  sorts 'Account ; 'Msg ; 'MsgConf ; 'State ; 'StatePair .
  subsort 'Msg < 'MsgConf .
  op '<`bal:_pend:_overdraft:_> : 'Nat 'Nat 'Bool -> 'Account [ctor] .
  op '_#_ : 'Account 'MsgConf -> 'State [ctor] .
  op '_`,_ : 'MsgConf 'MsgConf -> 'MsgConf [assoc comm ctor id('mt.MsgConf)] .
  op '`[_`,_`,_`] : 'Bool 'State 'State -> 'State [frozen(1 2 3)] .
  op '`[_`,_`] : 'State 'State -> 'StatePair [ctor] .
  op 'debts : 'MsgConf -> 'Nat [none] .
  op 'mt : nil -> 'MsgConf [ctor] .
  op 'withdraw : 'Nat -> 'Msg [ctor] .
  none
  eq '`[_`,_`,_`]['false.Bool,'s:State,'s':State] = 's':State [variant] .
  eq '`[_`,_`,_`]['true.Bool,'s:State,'s':State] = 's:State [variant] .
  eq 'debts['mt.MsgConf] = '0.Nat [none] .
  eq 'debts['_`,_['MSGS:MsgConf,'withdraw['N:Nat]]] = '_+_['N:Nat,'debts[
    'MSGS:MsgConf]] [none] .
  rl '_#_['<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'false.Bool],'_`,_[
    'M3:MsgConf,'withdraw['_+_['1.NzNat,'N1:Nat,'N4:Nat]]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N2:Nat,'true.Bool],'M3:MsgConf] [
    narrowing label('overdraft)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['n:Nat,'x:Nat,'false.Bool],'msgs:MsgConf]
    => '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat],'x:Nat,'false.Bool],
    'msgs:MsgConf] [nonexec narrowing label('deposit)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat],'_+_['N3:Nat,
    'N4:Nat],'false.Bool],'_`,_['M2:MsgConf,'withdraw['N3:Nat]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'N4:Nat,'false.Bool],'M2:MsgConf] [
    narrowing label('doWithdrawal2)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['N1:Nat,'N3:Nat,'N4:Nat],'N3:Nat,
    'false.Bool],'_`,_['M2:MsgConf,'withdraw['_+_['N3:Nat,'N4:Nat]]]] => '_#_[
    '<`bal:_pend:_overdraft:_>['N1:Nat,'0.Nat,'false.Bool],'M2:MsgConf] [
    narrowing label('doWithdrawal1)] .
  rl '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,'m:Nat,'x:Nat],'x:Nat,
    'false.Bool],'msgs:MsgConf] => '_#_['<`bal:_pend:_overdraft:_>['_+_['n:Nat,
    '_+_['m:Nat,'x:Nat]],'_+_['m:Nat,'x:Nat],'false.Bool],'_`,_['msgs:MsgConf,
    'withdraw['m:Nat]]] [narrowing label('initWithdrawal)] .
endm
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M) .
Warning: <automatic>: variable m:Nat is used before it is bound in rule:
rl < bal: n:Nat pend: x:Nat overdraft: false > # msgs:MsgConf st
    ###COND###:Form{Bool} => < bal: n:Nat + m:Nat pend: x:Nat overdraft: false
    > # msgs:MsgConf st ###COND###:Form{Bool} [narrowing label deposit] .
rewrites: 2
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#MC) .
rewrites: 4
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#MO) .
rewrites: 2
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : leastSort(#M, init(0)) .
rewrites: 3
result Sort: 'State
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(0)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(1)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(2)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(3)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(4)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, init(5)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : leastSort(#M, pred(0)) .
rewrites: 3
result Sort: 'Form`{Bool`}
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(0)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(1)) .
rewrites: 4
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(2)) .
rewrites: 3
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(3)) .
rewrites: 7
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(4)) .
rewrites: 73
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(5)) .
rewrites: 4
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(6)) .
rewrites: 4
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, pred(7)) .
rewrites: 55
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : leastSort(#M, cinit(0)) .
rewrites: 5
result Sort: 'CState
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(0)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(1)) .
rewrites: 6
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(2)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(3)) .
rewrites: 6
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(4)) .
rewrites: 5
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(5)) .
rewrites: 9
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(6)) .
rewrites: 6
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : wellFormed(#M, cinit(7)) .
rewrites: 6
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : bfs(state(cinit(0))) .
rewrites: 167
result FoldedLabeledGraph: (0 -[label('deposit, 
  'C:Form`{Bool`} <- '@4:Form`{Bool`} ; 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '@1:Nat ; 
  'X:Nat <- '@2:Nat)]-> 0[fold(
  'C:Form`{Bool`} <- '@4:Form`{Bool`} ; 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '_+_['@1:Nat,'@5:Nat] ; 
  'X:Nat <- '@2:Nat)]
0 -[label('doWithdrawal1, 
  'C:Form`{Bool`} <- '@1:Form`{Bool`} ; 
  'MSGS:MsgConf <- '_`,_['@2:MsgConf,'withdraw['_+_['@3:Nat,'@4:Nat]]] ; 
  'N:Nat <- '_+_['@3:Nat,'@4:Nat,'@5:Nat] ; 
  'X:Nat <- '@3:Nat)]-> 0[fold(
  'C:Form`{Bool`} <- '@1:Form`{Bool`} ; 
  'MSGS:MsgConf <- '@2:MsgConf ; 
  'N:Nat <- '@5:Nat ; 
  'X:Nat <- '0.Nat)]
0 -[label('doWithdrawal2, 
  'C:Form`{Bool`} <- '@1:Form`{Bool`} ; 
  'MSGS:MsgConf <- '_`,_['@5:MsgConf,'withdraw['@2:Nat]] ; 
  'N:Nat <- '_+_['@2:Nat,'@4:Nat] ; 
  'X:Nat <- '_+_['@2:Nat,'@3:Nat])]-> 0[fold(
  'C:Form`{Bool`} <- '@1:Form`{Bool`} ; 
  'MSGS:MsgConf <- '@5:MsgConf ; 
  'N:Nat <- '@4:Nat ; 
  'X:Nat <- '@3:Nat)]
0 -[label('initWithdrawal, 
  'C:Form`{Bool`} <- '@2:Form`{Bool`} ; 
  'MSGS:MsgConf <- '@1:MsgConf ; 
  'N:Nat <- '_+_['@3:Nat,'@4:Nat,'@5:Nat] ; 
  'X:Nat <- '@5:Nat)]-> 0[fold(
  'C:Form`{Bool`} <- '@2:Form`{Bool`} ; 
  'MSGS:MsgConf <- '_`,_['@1:MsgConf,'withdraw['@4:Nat]] ; 
  'N:Nat <- '_+_['@3:Nat,'@4:Nat,'@5:Nat] ; 
  'X:Nat <- '_+_['@4:Nat,'@5:Nat])]
0 -[label('overdraft, 
  'C:Form`{Bool`} <- '@2:Form`{Bool`} ; 
  'MSGS:MsgConf <- '_`,_['@3:MsgConf,'withdraw['_+_['1.NzNat,'@4:Nat,'@5:Nat]]]
    ; 
  'N:Nat <- '@4:Nat ; 
  'X:Nat <- '@1:Nat)]-> 10)
| 0 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'false.Bool],
    'MSGS:MsgConf],'C:Form`{Bool`}])
10 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['@4:Nat,'@1:Nat,'true.Bool],
    '@3:MsgConf],'@2:Form`{Bool`}])
| 11
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : bfs(state(cinit(1)), 1) .
rewrites: 1107
result FoldedLabeledGraph?: (0 -[label('deposit, 
  'MSGS:MsgConf <- '%1:MsgConf ; 
  'N:Nat <- '%2:Nat ; 
  'X:Nat <- '_+_['%2:Nat,'%3:NzNat])]-> 2
0 -[label('deposit, 
  'MSGS:MsgConf <- '%1:MsgConf ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat] ; 
  'X:Nat <- '%2:Nat)]-> 4
0 -[label('deposit, 
  'MSGS:MsgConf <- '@3:MsgConf ; 
  'N:Nat <- '@1:Nat ; 
  'X:Nat <- '@2:Nat)]-> 6
0 -[label('doWithdrawal1, 
  'MSGS:MsgConf <- '_`,_['%1:MsgConf,'withdraw['_+_['%2:Nat,'%3:Nat]]] ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat,'%4:Nat] ; 
  'X:Nat <- '%2:Nat)]-> 4[fold(
  '%1:MsgConf <- '%1:MsgConf ; 
  '%2:Nat <- '0.Nat ; 
  '%3:Nat <- '%4:Nat ; 
  '%4:Nat <- '0.Nat)]
0 -[label('doWithdrawal2, 
  'MSGS:MsgConf <- '_`,_['%4:MsgConf,'withdraw['%1:Nat]] ; 
  'N:Nat <- '_+_['%1:Nat,'%2:Nat] ; 
  'X:Nat <- '_+_['%1:Nat,'%2:Nat,'%3:NzNat])]-> 2[fold(
  '%1:MsgConf <- '%4:MsgConf ; 
  '%2:Nat <- '%2:Nat ; 
  '%3:NzNat <- '%3:NzNat ; 
  '%4:Nat <- '0.Nat)]
0 -[label('doWithdrawal2, 
  'MSGS:MsgConf <- '_`,_['%4:MsgConf,'withdraw['%1:Nat]] ; 
  'N:Nat <- '_+_['%1:Nat,'%2:Nat,'%3:Nat] ; 
  'X:Nat <- '_+_['%1:Nat,'%2:Nat])]-> 4[fold(
  '%1:MsgConf <- '%4:MsgConf ; 
  '%2:Nat <- '%2:Nat ; 
  '%3:Nat <- '0.Nat ; 
  '%4:Nat <- '%3:Nat)]
0 -[label('doWithdrawal2, 
  'MSGS:MsgConf <- '_`,_['@4:MsgConf,'withdraw['@1:Nat]] ; 
  'N:Nat <- '_+_['@3:Nat,'@1:Nat] ; 
  'X:Nat <- '_+_['@2:Nat,'@1:Nat])]-> 14
0 -[label('initWithdrawal, 
  'MSGS:MsgConf <- '%2:MsgConf ; 
  'N:Nat <- '_+_['%1:Nat,'%3:Nat,'%4:Nat] ; 
  'X:Nat <- '%1:Nat)]-> 4[fold(
  '%1:MsgConf <- '_`,_['%2:MsgConf,'withdraw['%3:Nat]] ; 
  '%2:Nat <- '_+_['%1:Nat,'%3:Nat] ; 
  '%3:Nat <- '0.Nat ; 
  '%4:Nat <- '%4:Nat)]
0 -[label('overdraft, 
  'MSGS:MsgConf <- '_`,_['%1:MsgConf,'withdraw['_+_['1.NzNat,'%2:Nat,'%3:Nat]]]
    ; 
  'N:Nat <- '%2:Nat ; 
  'X:Nat <- '_+_['%2:Nat,'%4:NzNat])]-> 18
0 -[label('overdraft, 
  'MSGS:MsgConf <- '_`,_['%1:MsgConf,'withdraw['_+_['1.NzNat,'%2:Nat,'%3:Nat,
    '%4:Nat]]] ; 
  'N:Nat <- '_+_['%2:Nat,'%3:Nat] ; 
  'X:Nat <- '%2:Nat)]-> 20
0 -[label('overdraft, 
  'MSGS:MsgConf <- '_`,_['@2:MsgConf,'withdraw['_+_['1.NzNat,'@3:Nat,'@4:Nat]]]
    ; 
  'N:Nat <- '@3:Nat ; 
  'X:Nat <- '@1:Nat)]-> 22)
| 0 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'false.Bool],
    'MSGS:MsgConf],'_?=_['true.Bool,'_<=_['X:Nat,'N:Nat]]])
2 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['_+_['%2:Nat,'%4:Nat],'_+_[
    '%2:Nat,'%3:NzNat],'false.Bool],'%1:MsgConf],'ff.FalseLit`{Bool`}])
4 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['_+_['%2:Nat,'%3:Nat,
    '%4:Nat],'%2:Nat,'false.Bool],'%1:MsgConf],'tt.TrueLit`{Bool`}])
6 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['_+_['@1:Nat,'@4:Nat],
    '@2:Nat,'false.Bool],'@3:MsgConf],'_?=_['true.Bool,'_<=_['@2:Nat,
    '@1:Nat]]])
14 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['@3:Nat,'@2:Nat,
    'false.Bool],'@4:MsgConf],'_?=_['true.Bool,'_<=_['_+_['@2:Nat,'@1:Nat],
    '_+_['@3:Nat,'@1:Nat]]]])
18 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['%2:Nat,'_+_['%2:Nat,
    '%4:NzNat],'true.Bool],'%1:MsgConf],'ff.FalseLit`{Bool`}])
20 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['_+_['%2:Nat,'%3:Nat],
    '%2:Nat,'true.Bool],'%1:MsgConf],'tt.TrueLit`{Bool`}])
22 |-> state('_st_['_#_['<`bal:_pend:_overdraft:_>['@3:Nat,'@1:Nat,'true.Bool],
    '@2:MsgConf],'_?=_['true.Bool,'_<=_['@1:Nat,'@3:Nat]]])
| 23
| 2 ; 4 ; 6 ; 14 ; 18 ; 20 ; 22
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : state(pred(1)) <= state(pred(
    0)) .
rewrites: 8
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : state(cinit(1)) <= state(cinit(
    0)) .
rewrites: 12
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : state(cinit(1)) <= state(cinit(
    2)) .
rewrites: 14
result [Bool]: state('_st_['_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,
    'false.Bool],'MSGS:MsgConf],'_?=_['true.Bool,'_<=_['X:Nat,'N:Nat]]]) <=
    state('_st_['_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'true.Bool],
    'MSGS:MsgConf],'C:Form`{Bool`}])
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : intersect(state(cinit(0)),
    state(cinit(2))) .
rewrites: 283
result NodeSet: .NodeSet
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : implies?(pred(0), pred(0)) .
rewrites: 2
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : implies?(pred(0), pred(1)) .
rewrites: 13
result Bool: false
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : implies?(pred(1), pred(2)) .
rewrites: 13
result Bool: false
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : invariant(state(cinit(0))) .
rewrites: 162
result [Bool]: state('_st_['_#_['<`bal:_pend:_overdraft:_>['@4:Nat,'@1:Nat,
    'true.Bool],'@3:MsgConf],'@2:Form`{Bool`}]) <= state('_st_['_#_[
    '<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'false.Bool],'MSGS:MsgConf],
    'C:Form`{Bool`}])
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : invariant(state(cinit(2))) .
rewrites: 28
result Bool: true
==========================================
reduce in BANK-ACCOUNT-CTOR-UNCONDITIONALIZED : invariant(state(cinit(0)) ;
    state(cinit(2))) .
rewrites: 204
result Bool: true
Bye.
