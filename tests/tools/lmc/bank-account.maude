set show timing off .

load ../../../contrib/systems/bank-account.maude
load ../../../contrib/tools/lmc/lgraph-search.maude
load ../../../contrib/tools/meta/narrowing.maude

--- Initial states
--- --------------

mod BANK-ACCOUNT-INIT-STATES is
    extending FVP-NARROWING-GRAPH .

    op init : Nat -> [Term] .
    -------------------------
    eq init(0) = '_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'ff.Truth],'MSGS:MsgConf] .
endm

--- Module BANK-ACCOUNT-CTOR
--- ------------------------

mod BANK-ACCOUNT-CTOR-NARROWING-GRAPH is
    extending BANK-ACCOUNT-INIT-STATES .
    extending GRAPH-ANALYSIS .

    eq ##m## = upModule('BANK-ACCOUNT-CTOR, true) .
endm

reduce wellFormed(##m##, init(0)) .
reduce bfs(state(init(0))) .

--- Module BANK-ACCOUNT-DEFINEDOPS
--- ------------------------------

mod BANK-ACCOUNT-CTOR-NARROWING-MODULO-T-GRAPH is
    extending FVP-NARROWING-MODULO-T-GRAPH .
    extending GRAPH-ANALYSIS .

    eq ##m## = upModule('BANK-ACCOUNT-DEFINEDOPS, true) .

    op init : Nat -> [Term] .
    -------------------------
    eq init(0) = '_#_['<`bal:_pend:_overdraft:_>['N:Nat,'X:Nat,'ff.Truth],'MSGS:MsgConf] .
endm

reduce wellFormed(##m##, init(0)) .
reduce bfs(state(init(0))) .

--- set trace on .
--- reduce bfs(state(init(0) | '_>=_['N:Nat, 'X:Nat] ?= 'tt.Truth /\ 'X:Nat ?= 'debts['MSGS:MsgConf]), 3) .

--- ; The invariant satisfied by this protocol can be expressed as the constrained term:
--- ;
--- ;     < bal: n pend: x overdraft: ff > # msgs | n >= x = tt /\ x = debts(msgs)
--- ;
--- ; where debts is the recursive function:
--- ;
--- ;  op debts : MsgConf -> Nat .
--- ;
--- ;  eq debts(mt) = 0 .
--- ;  eq debts(withdraw(m),msgs) = m + debts(msgs) .
--- ;
--- ; Note that this predicate should have an easy proof by contextual rewriting in reachability logic.
