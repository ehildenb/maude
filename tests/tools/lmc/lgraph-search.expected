==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : ((B -[y]-> C
C -[z]-> D)
A -[x]-> B) :: NeLGraph .
rewrites: 1
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (< x,A >,< y,B >),< x,A > == < x,A >,<
    y,B > .
rewrites: 2
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : B -> < x,A > == B -[x]-> A .
rewrites: 2
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : B -> < x,A >,< y,D > == (B -[x]-> A
B -[y]-> D) .
rewrites: 4
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : fold(A, A) == .Fold .
rewrites: 2
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : step(3[F:Fold]) == .TransitionSet .
rewrites: 2
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : step(E) == < x,E > .
rewrites: 2
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : step(D) == < y,C >,< z,G > .
rewrites: 2
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : [0 : A -> < x,B >,< y,D >] == ([0 : A -[
    y]-> D],[0 : A -[x]-> B]) .
rewrites: 5
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (3 |-> E,[2 : B -[x]-> C]) == ([3 : B -[
    x]-> C],3 |-> E) .
rewrites: 3
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (3 |-> E,[2 : B -[x]-> D]) == ([3 : B -[
    x]-> 3[<]],3 |-> E) .
rewrites: 5
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (3 |-> E,[2 : E -[x]-> C]) == ([3 : 3 -[
    x]-> C],3 |-> E) .
rewrites: 4
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (3 |-> E,[2 : E -[x]-> D]) == ([2 : 3 -[
    x]-> 3[<]],3 |-> E) .
rewrites: 5
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (4 |-> A,3 |-> B,[0 : (A -[y]-> D
A -[z]-> D)
A -[x]-> B]) == (4 |-> A,3 |-> B,[0 : A -[z]-> D],[0 : A -[y]-> D],[0 : A -[
    x]-> B]) .
rewrites: 35
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (0 |-> E,[0 : B -[x]-> D]) == ([0 : B -[
    x]-> 0[<]],0 |-> E) .
rewrites: 5
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (1 |-> B,0 |-> E,[0 : B -[x]-> D]) == ([
    0 : 1 -[x]-> 0[<]],1 |-> B,0 |-> E) .
rewrites: 7
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (1 |-> B,0 |-> E,[0 : F -[x]-> F]) == ([
    1 : F -[x]-> F],1 |-> B,0 |-> E) .
rewrites: 5
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (.LGraph | 0 |-> E,[0 : B -[x]-> D] |
    .Frontier) == (1 -[x]-> 0[<] | 1 |-> B,0 |-> E | .Frontier) .
rewrites: 7
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (.LGraph | 0 |-> E,[0 : B -[x]-> F] |
    .Frontier) == (1 -[x]-> 2 | 2 |-> F,1 |-> B,0 |-> E | F) .
rewrites: 29
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : (.LGraph | 0 |-> E,[0 : B -[x]-> F] |
    .Frontier) == (1 -[x]-> 2
2 -[x]-> 0 | 2 |-> F,1 |-> B,0 |-> E | .Frontier) .
rewrites: 17
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : bfs(A) == (((((((4 -[y]-> 2
5 -[x]-> 1)
3 -[y]-> 3)
2 -[y]-> 5)
2 -[z]-> 4)
1 -[x]-> 3)
1 -[z]-> 2)
1 -[y]-> 2 | 5 |-> C,4 |-> G,3 |-> B,2 |-> D,1 |-> A | .Frontier) .
rewrites: 94
result Bool: true
==========================================
reduce in GRAPH-FOLDING-SEARCH-TEST1 : bfs(C) == ((((((3 -[z]-> 4
4 -[y]-> 3)
3 -[y]-> 1)
2 -[z]-> 3)
2 -[y]-> 3)
2 -[x]-> 1[<])
1 -[x]-> 2 | 4 |-> G,3 |-> D,2 |-> A,1 |-> C | .Frontier) .
rewrites: 77
result Bool: true
Bye.
