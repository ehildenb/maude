set show timing off .

load ../../../contrib/tools/lmc/lgraph-search.maude

--- Testing Harness GRAPH-FOLDING-SEARCH-TEST1
--- ==========================================

fmod GRAPH-FOLDING-SEARCH-TEST1 is
    extending GRAPH-FOLDING-SEARCH .

    ops A B C D E F G : -> State .
    ops x y z : -> Label .

    op < : -> Fold .

    eq fold(D, E) = < .
    eq fold(B, C) = < .

    eq step(A) = < x , B > , < y , D > , < z , D > .
    eq step(B) = < y , B > .
    eq step(C) = < x , A > .
    eq step(D) = < y , C > , < z , G > .
    eq step(E) = < x , E > .
    eq step(F) = < x , E > .
    eq step(G) = < y , D > .
endfm

--- Test Module LABELLED-GRAPH
--- --------------------------

reduce (A -[x]-> B B -[y]-> C C -[z]-> D) :: NeLGraph .

reduce < x , A > , < y , B > , < x , A > == < y , B > , < x , A > .

reduce B -> < x , A >             == B -[ x ]-> A .
reduce B -> < x , A > , < y , D > == (B -[ x ]-> A B -[ y ]-> D) .

--- Test Module GRAPH-FOLDING-SEARCH
--- --------------------------------

reduce 3 [ .Fold ] < 4 [ .Fold ] .
reduce not (4 [ .Fold ] < 3 [ .Fold ]) .
reduce 3 [ < ] < 4 .
reduce 4 [ < ] < 3 .
reduce not (3 < 4 [ < ]) .
reduce not (4 < 3 [ < ]) .
reduce 3 [ < ] < 4 [ < ] .
reduce not (4 [ < ] < 3 [ < ]) .

reduce fold(A, A) == .Fold .

reduce step(E) == < x , E > .
reduce step(D) == < z , G > , < y , C > .

reduce insert( 3 |-> A , .Environment ) == { 3    , 3 |-> A } .
reduce insert( 3 |-> A , 2 |-> A      ) == { 2    , 2 |-> A } .
reduce insert( 3 |-> D , 2 |-> E      ) == { 2[<] , 2 |-> E } .

reduce insert( 2 |-> D , 4 |-> A 1 |-> D ) == { 1 , 4 |-> A 1 |-> D } .
reduce insert( 2 |-> E , 4 |-> A 1 |-> D ) == { 2 , 4 |-> A 1 |-> D 2 |-> E } .

reduce ( .LGraph               | 1 |-> A         | 1 | 1 -[x]-> B )
    == ( 1 -[x]-> 2 2 -[y]-> 2 | 1 |-> A 2 |-> B | 3 | .LGraph    ) .

reduce bfs(A)
    == ( 1 -[x]-> 2
         1 -[y]-> 3
         1 -[z]-> 3
         2 -[y]-> 2
         3 -[y]-> 6
         3 -[z]-> 7
         6 -[x]-> 1
         7 -[y]-> 3
       | 1 |-> A 2 |-> B 3 |-> D 6 |-> C 7 |-> G
       | 9
       | .LGraph
       ) .

reduce bfs(C)
    == ( 1 -[x]-> 2
         2 -[x]-> 1[<]
         2 -[y]-> 4
         2 -[z]-> 4
         4 -[y]-> 1
         4 -[z]-> 7
         7 -[y]-> 4
       | 1 |-> C 2 |-> A 4 |-> D 7 |-> G
       | 8
       | .LGraph
       ) .

eof

--- fmod GRAPH-FOLDING-SEARCH-TEST2 is
---     extending GRAPH-FOLDING-SEARCH .
---
---     ops A B C D E F G : -> State .
---     ops x y z : -> Label .
---
---     op < : -> Fold .
---
---     eq fold(F, E) = < .
---     eq fold(G, F) = < .
---
---     eq step(A) = < y , C > .
---     eq step(B) = < x , A > , < y , D > .
---     eq step(C) = < x , E > , < z , G > , < y , F > .
---     eq step(D) = < x , F > , < y , C > , < z , A > .
---     eq step(E) = .TransitionSet .
---     eq step(F) = .TransitionSet .
---     eq step(G) = < y , E > .
--- endfm
---
--- reduce bfs(B) .
--- reduce bfs(B) .
--- reduce bfs(B) .
--- reduce bfs(B) .
--- reduce bfs(B) .
--- reduce bfs(B) .
--- reduce bfs(B) .
--- reduce bfs(C) .
