
--- The Readers-Writers problem with explicit shared variables
--- from: Constrained Monotonic Abstraction, P.A. Abdulla, et. al.

fmod RW-CONF is
  sort Natural . 
  op 0 : -> Natural [ctor] . 
  op s : Natural -> Natural [ctor] .  

  sort Truth .
  ops true false : -> Truth [ctor] .

  sorts ProcIdle ProcRead ProcWrite Proc .
  subsort ProcIdle ProcRead ProcWrite < Proc .
  op think : -> ProcIdle [ctor] .
  ops read : -> ProcRead[ctor] .
  ops write : -> ProcWrite [ctor] .

  sorts ProcIdleSet ProcReadSet ProcWriteSet ProcSet .
  subsort ProcIdle < ProcIdleSet .
  subsort ProcRead < ProcReadSet .
  subsort ProcWrite < ProcWriteSet .
  subsort Proc < ProcSet .
  subsort ProcIdleSet < ProcReadSet ProcWriteSet < ProcSet .
  op none : -> ProcIdleSet [ctor] .
  op _;_ : ProcIdleSet ProcIdleSet -> ProcIdleSet [ctor comm assoc id: none] .
  op _;_ : ProcReadSet ProcReadSet -> ProcReadSet [ctor ditto] .
  op _;_ : ProcWriteSet ProcWriteSet -> ProcWriteSet [ctor ditto] .
  op _;_ : ProcSet ProcSet -> ProcSet [ctor ditto] .

  sort Conf .
  op <_,_|_> : Natural Truth ProcSet -> Conf [ctor] .
endfm

mod RW is
  protecting RW-CONF .

  var N : Natural . var B : Truth . var PS : ProcSet .

  rl [r1]: < 0, true | think ; PS >     =>  < s(0), false | read ; PS > .
  rl [r2]: < s(N), B | think ; PS >     =>  < s(s(N)), B | read ; PS > .
  rl [r3]: < s(s(N)), B | read ; PS >   =>  < s(N), B | think ; PS > .
  rl [r4]: < s(0), false | read ; PS >  =>  < 0, true | think ; PS > .
  rl [w1]: < N, true | think ; PS >     =>  < N, false | write ; PS > .
  rl [w2]: < N, false | write ; PS >    =>  < N, true | think ; PS > .
endm

---(
search < 0, true | think ; think ; think ; think > 
   =>* < N, B | read ; write ; PS > .

eof
---)

load symbolic-checker .

(mod RW-PROPS is
  pr RW .
  pr SYMBOLIC-CHECKER .

  subsort Conf < State .

  var N : Natural . var B : Truth . var PS : ProcSet .
  var IS : ProcIdleSet .  var RS : ProcReadSet .  var WS : ProcWriteSet . 

  op ex? : -> Prop .

  eq < N, B | RS > |= ex? = true [variant] .
  eq < N, B | WS > |= ex? = true [variant] .
  eq < N, B | read ; write ; PS > |= ex? = false [variant] .

--- equational abstractions 
  eq < s(s(N)),false | read ; read ; IS >  
   = <    s(N),false | read ; IS > [variant] .
endm)

set verbose on .

(lfmc < 0, true | IS > |= [] ex? .)

