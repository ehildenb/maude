==========================================
reduce in EQFORM-TEST : ('_*_['Y:Nat,'X:Nat] ?= '_+_['1.Nat,'X:Nat] /\
    'true.Bool != '_<_['Y:Nat,'Z:Nat]) << (
  'Y:Nat <- '3.Nat) == ('_*_['3.Nat,'X:Nat] ?= '_+_['1.Nat,'X:Nat] /\
    'true.Bool != '_<_['3.Nat,'Z:Nat]) .
rewrites: 30
result Bool: true
==========================================
reduce in EQFORM-TEST : ('true.Bool != '_<_['Y:Nat,'Z:Nat] \/ '_*_['Y:Nat,
    'X:Nat] != '_+_['1.Nat,'X:Nat]) << (
  'X:Nat <- '7.Nat) == ('true.Bool != '_<_['Y:Nat,'Z:Nat] \/ '_*_['Y:Nat,
    '7.Nat] != '_+_['1.Nat,'7.Nat]) .
rewrites: 30
result Bool: true
==========================================
reduce in EQFORM-TEST : f1 << (
  'F:Foo <- 'F2:Foo ; 
  'I:Wop <- 'I2:Wop ; 
  'U:Stu <- 'U2:Stu) .
rewrites: 94
result NonTrivForm: ~ ('B:Bar ?= 'foo.Foo /\ 'F2:Foo != 'f['bar.Bar]) \/ ~ (
    'K:Foo ?= 'L:Bar /\ 'H:Baz ?= 'f['I2:Wop] \/ 'f['H:Baz] != 'f['f['I2:Wop]])
==========================================
reduce in EQFORM-TEST : f2 << (
  'F:Foo <- 'F2:Foo ; 
  'I:Wop <- 'I2:Wop ; 
  'U:Stu <- 'U2:Stu) .
rewrites: 123
result NonTrivForm: ~ 'U2:Stu ?= 'W:Roc /\ ~ ('B:Bar ?= 'foo.Foo /\ 'F2:Foo !=
    'f['bar.Bar]) \/ ~ ('K:Foo ?= 'L:Bar /\ 'H:Baz ?= 'f['I2:Wop] \/ 'f['H:Baz]
    != 'f['f['I2:Wop]])
==========================================
reduce in EQFORM-TEST : f1 :: Form .
rewrites: 12
result Bool: true
==========================================
reduce in EQFORM-TEST : f2 :: Form .
rewrites: 19
result Bool: true
==========================================
reduce in EQFORM-TEST : ff .
rewrites: 0
result FalseLit: ff
==========================================
reduce in EQFORM-TEST : tt .
rewrites: 0
result TrueLit: tt
==========================================
reduce in EQFORM-TEST : F:Form .
rewrites: 0
result Form: F:Form
==========================================
reduce in EQFORM-TEST : F:Form .
rewrites: 0
result Form: F:Form
==========================================
reduce in EQFORM-TEST : nnf(f1) .
rewrites: 20
result EqForm: 'F:Foo ?= 'f['bar.Bar] \/ 'B:Bar != 'foo.Foo \/ 'K:Foo != 'L:Bar
    \/ 'f['H:Baz] ?= 'f['f['I:Wop]] /\ 'H:Baz != 'f['I:Wop]
==========================================
reduce in EQFORM-TEST : nnf(f2) .
rewrites: 29
result EqForm: 'U:Stu != 'W:Roc /\ 'F:Foo ?= 'f['bar.Bar] \/ 'B:Bar != 'foo.Foo
    \/ 'K:Foo != 'L:Bar \/ 'f['H:Baz] ?= 'f['f['I:Wop]] /\ 'H:Baz != 'f['I:Wop]
==========================================
reduce in EQFORM-TEST : nef(f1) .
rewrites: 22
result EqForm: 'F:Foo ?= 'f['bar.Bar] \/ 'B:Bar != 'foo.Foo \/ 'K:Foo != 'L:Bar
    \/ 'f['H:Baz] ?= 'f['f['I:Wop]] /\ 'H:Baz != 'f['I:Wop]
==========================================
reduce in EQFORM-TEST : nef(f2) .
rewrites: 31
result EqForm: 'U:Stu != 'W:Roc /\ 'F:Foo ?= 'f['bar.Bar] \/ 'B:Bar != 'foo.Foo
    \/ 'K:Foo != 'L:Bar \/ 'f['H:Baz] ?= 'f['f['I:Wop]] /\ 'H:Baz != 'f['I:Wop]
==========================================
reduce in EQFORM-TEST : cnf(f1) .
rewrites: 62
result EqForm: ('F:Foo ?= 'f['bar.Bar] \/ 'f['H:Baz] ?= 'f['f['I:Wop]] \/
    'B:Bar != 'foo.Foo \/ 'K:Foo != 'L:Bar) /\ 'F:Foo ?= 'f['bar.Bar] \/ 'B:Bar
    != 'foo.Foo \/ 'H:Baz != 'f['I:Wop] \/ 'K:Foo != 'L:Bar
==========================================
reduce in EQFORM-TEST : cnf(f2) .
rewrites: 75
result EqForm: 'U:Stu != 'W:Roc /\ ('F:Foo ?= 'f['bar.Bar] \/ 'f['H:Baz] ?= 'f[
    'f['I:Wop]] \/ 'B:Bar != 'foo.Foo \/ 'K:Foo != 'L:Bar) /\ 'F:Foo ?= 'f[
    'bar.Bar] \/ 'B:Bar != 'foo.Foo \/ 'H:Baz != 'f['I:Wop] \/ 'K:Foo != 'L:Bar
==========================================
reduce in EQFORM-TEST : dnf(f1) .
rewrites: 36
result EqForm: 'F:Foo ?= 'f['bar.Bar] \/ 'B:Bar != 'foo.Foo \/ 'K:Foo != 'L:Bar
    \/ 'f['H:Baz] ?= 'f['f['I:Wop]] /\ 'H:Baz != 'f['I:Wop]
==========================================
reduce in EQFORM-TEST : dnf(f2) .
rewrites: 77
result EqForm: ('F:Foo ?= 'f['bar.Bar] /\ 'U:Stu != 'W:Roc) \/ ('B:Bar !=
    'foo.Foo /\ 'U:Stu != 'W:Roc) \/ ('K:Foo != 'L:Bar /\ 'U:Stu != 'W:Roc) \/
    'f['H:Baz] ?= 'f['f['I:Wop]] /\ 'H:Baz != 'f['I:Wop] /\ 'U:Stu != 'W:Roc
==========================================
reduce in EQFORM-TEST : wellFormed(upModule('EQFORM-TEST-MODULE), t1 ?= t2) .
rewrites: 22
result Bool: true
==========================================
reduce in EQFORM-TEST : wellFormed(upModule('EQFORM-TEST-MODULE), c) .
rewrites: 19
result Bool: true
==========================================
reduce in EQFORM-TEST : wellFormed(upModule('EQFORM-TEST-MODULE), f1) .
rewrites: 112
result Bool: true
==========================================
reduce in EQFORM-TEST : wellFormed(upModule('EQFORM-TEST-MODULE), f2) .
rewrites: 139
result Bool: true
==========================================
reduce in EQFORM-TEST : wellFormed(upModule('EQFORM-TEST-MODULE), f1 /\ '0.Term
    ?= 'T:BadSort) .
rewrites: 28
result Bool: false
==========================================
reduce in EQFORM-TEST : normalize(upModule('NAT), '0.Nat ?= 's_['s_['0.Nat]]) .
rewrites: 13
result PosEqLit: '0.Zero ?= 's_^2['0.Zero]
==========================================
reduce in EQFORM-TEST : normalize(upModule('EQFORM-TEST-MODULE), t1 ?= t2) .
rewrites: 16
result PosEqLit: 'bar.Bar ?= 'f['f['B:Baz]]
==========================================
reduce in EQFORM-TEST : reduce(upModule('EQFORM-TEST-MODULE), t1 ?= t2) .
rewrites: 16
result PosEqLit: 'bar.Bar ?= 'f['f['B:Baz]]
==========================================
reduce in EQFORM-TEST : normalize(upModule('EQFORM-TEST-MODULE), f(t2) ?= f(f(
    t1))) .
rewrites: 19
result PosEqLit: 'f['bar.Bar] ?= 'f['f['f['f['B:Baz]]]]
==========================================
reduce in EQFORM-TEST : reduce(upModule('EQFORM-TEST-MODULE), f(t2) ?= f(f(
    t1))) .
rewrites: 20
result PosEqLit: 'baz.Baz ?= 'f['f['f['f['B:Baz]]]]
==========================================
reduce in EQFORM-TEST : normalize(upModule('EQFORM-TEST-MODULE), f1) .
rewrites: 91
result NonTrivForm: ~ ('B:Bar ?= 'foo.Foo /\ 'F:Foo != 'f['bar.Bar]) \/ ~ (
    'K:Foo ?= 'L:Bar /\ 'H:Baz ?= 'f['I:Wop] \/ 'f['H:Baz] != 'f['f['I:Wop]])
==========================================
reduce in EQFORM-TEST : reduce(upModule('EQFORM-TEST-MODULE), f1) .
rewrites: 92
result NonTrivForm: ~ ('B:Bar ?= 'foo.Foo /\ 'F:Foo != 'baz.Baz) \/ ~ ('K:Foo
    ?= 'L:Bar /\ 'H:Baz ?= 'f['I:Wop] \/ 'f['H:Baz] != 'f['f['I:Wop]])
==========================================
reduce in EQFORM-TEST : normalize(upModule('EQFORM-TEST-MODULE), f2) .
rewrites: 114
result NonTrivForm: ~ 'U:Stu ?= 'W:Roc /\ ~ ('B:Bar ?= 'foo.Foo /\ 'F:Foo !=
    'f['bar.Bar]) \/ ~ ('K:Foo ?= 'L:Bar /\ 'H:Baz ?= 'f['I:Wop] \/ 'f['H:Baz]
    != 'f['f['I:Wop]])
==========================================
reduce in EQFORM-TEST : reduce(upModule('EQFORM-TEST-MODULE), f2) .
rewrites: 115
result NonTrivForm: ~ 'U:Stu ?= 'W:Roc /\ ~ ('B:Bar ?= 'foo.Foo /\ 'F:Foo !=
    'baz.Baz) \/ ~ ('K:Foo ?= 'L:Bar /\ 'H:Baz ?= 'f['I:Wop] \/ 'f['H:Baz] !=
    'f['f['I:Wop]])
==========================================
reduce in EQFORM-TEST : vars('0.Nat ?= 's_['s_['X:Nat]]) .
rewrites: 11
result Variable: 'X:Nat
==========================================
reduce in EQFORM-TEST : vars(f1) .
rewrites: 86
result NeQidSet: 'B:Bar ; 'F:Foo ; 'H:Baz ; 'I:Wop ; 'K:Foo ; 'L:Bar
==========================================
reduce in EQFORM-TEST : vars(f2) .
rewrites: 107
result NeQidSet: 'B:Bar ; 'F:Foo ; 'H:Baz ; 'I:Wop ; 'K:Foo ; 'L:Bar ; 'U:Stu ;
    'W:Roc
==========================================
reduce in EQFORM-TEST : toUnifProb(a /\ c /\ e) .
rewrites: 7
result UnificationProblem: 'B:Bar =? 'foo.Foo /\ 'H:Baz =? 'f['I:Wop] /\ 'U:Stu
    =? 'W:Roc
Bye.
