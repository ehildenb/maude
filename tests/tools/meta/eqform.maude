load ../../../contrib/tools/meta/eqform.maude

fmod EQFORM-TEST-MODULE is
    sorts Foo Bar Baz Wop Stu Roc .
    -------------------------------
    subsorts Wop < Foo Bar < Baz .
    subsorts Roc < Stu .

    op wop : -> Wop .
    op foo : -> Foo .
    op bar : -> Bar .
    op baz : -> Baz .
    op roc : -> Roc .
    op stu : -> Stu .

    op f : Baz -> Baz .
    -------------------
    eq f(baz) = baz .
    eq f(bar) = baz .
    eq f(foo) = bar .
    eq f(wop) = wop .
endfm

fmod EQFORM-TEST is
  inc EQFORM-CNF .
  inc EQFORM-DNF .
  inc EQFORM-LIST .
  inc EQFORM-SET .
  inc EQFORM-OPERATIONS .

  var T : Term .

  op f : Term -> Term .
  ---------------------
  eq f(T) = 'f[T] .

  ops t1 t2 : -> Term .
  ---------------------
  eq t1 = f(f('B:Baz)) .
  eq t2 = 'bar.Bar .

  ops a b c d e : -> EqLit .
  --------------------------
  eq a = 'foo.Foo ?= 'B:Bar .
  eq b = 'F:Foo != f('bar.Bar) .
  eq c = 'H:Baz ?= f('I:Wop) .
  eq d = f('H:Baz) != f(f('I:Wop)) .
  eq e = 'U:Stu ?= 'W:Roc .

  op f1 : -> Form .
  eq f1 = ~ (a /\ b) \/ ~ ((c \/ d) /\ 'K:Foo ?= 'L:Bar \/ (a /\ ff)) .

  op f2 : -> Form .
  eq f2 = (f1 /\ ~ e) /\ (d \/ tt) .
endfm

--- substitutions
reduce ('_+_['1.Nat, 'X:Nat] ?= '_*_['Y:Nat, 'X:Nat] /\ '_<_['Y:Nat, 'Z:Nat] != 'true.Bool) << ('Y:Nat <- '3.Nat)
    == ('_+_['1.Nat, 'X:Nat] ?= '_*_['3.Nat, 'X:Nat] /\ '_<_['3.Nat, 'Z:Nat] != 'true.Bool) .

reduce ('_+_['1.Nat, 'X:Nat] != '_*_['Y:Nat, 'X:Nat] \/ '_<_['Y:Nat, 'Z:Nat] != 'true.Bool) << ('X:Nat <- '7.Nat)
    == ('_+_['1.Nat, '7.Nat] != '_*_['Y:Nat, '7.Nat] \/ '_<_['Y:Nat, 'Z:Nat] != 'true.Bool) .

reduce f1 << ('F:Foo <- 'F2:Foo ; 'I:Wop <- 'I2:Wop ; 'U:Stu <- 'U2:Stu) .
reduce f2 << ('F:Foo <- 'F2:Foo ; 'I:Wop <- 'I2:Wop ; 'U:Stu <- 'U2:Stu) .

--- sort check
reduce f1 :: Form .
reduce f2 :: Form .

--- testing identities
reduce tt /\ ff .
reduce tt \/ ff .

--- testing idempotency
reduce tt /\ F:Form .
reduce ff \/ F:Form .

--- testing transformations
reduce nnf(f1) .
reduce nnf(f2) .

reduce nef(f1) .
reduce nef(f2) .

reduce cnf(f1) .
reduce cnf(f2) .

reduce dnf(f1) .
reduce dnf(f2) .

--- testing operations
reduce wellFormed(upModule('EQFORM-TEST-MODULE), t1 ?= t2) .
reduce wellFormed(upModule('EQFORM-TEST-MODULE), c) .
reduce wellFormed(upModule('EQFORM-TEST-MODULE), f1) .
reduce wellFormed(upModule('EQFORM-TEST-MODULE), f2) .
reduce wellFormed(upModule('EQFORM-TEST-MODULE), f1 /\ 'T:BadSort ?= '0.Term) .

reduce normalize(upModule('NAT), 's_['s_['0.Nat]] ?= '0.Nat) .

reduce normalize(upModule('EQFORM-TEST-MODULE), t1 ?= t2) .
reduce    reduce(upModule('EQFORM-TEST-MODULE), t1 ?= t2) .
reduce normalize(upModule('EQFORM-TEST-MODULE), f(f(t1)) ?= f(t2)) .
reduce    reduce(upModule('EQFORM-TEST-MODULE), f(f(t1)) ?= f(t2)) .
reduce normalize(upModule('EQFORM-TEST-MODULE), f1) .
reduce    reduce(upModule('EQFORM-TEST-MODULE), f1) .
reduce normalize(upModule('EQFORM-TEST-MODULE), f2) .
reduce    reduce(upModule('EQFORM-TEST-MODULE), f2) .

reduce vars('s_ ['s_['X:Nat]] ?= '0.Nat) .
reduce vars(f1) .
reduce vars(f2) .

reduce toUnifProb(a /\ c /\ e) .
