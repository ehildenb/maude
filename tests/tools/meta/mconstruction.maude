

load ../../../contrib/tools/meta/mconstruction.maude

set include BOOL off .

--- Testing Modules
--- ===============

fmod EMPTY is endfm

fmod TEST-MODULE is
  sorts A B .
  subsort A < B .

  op a : -> A .
  op b : -> B .

  op f : B -> A .
  ---------------
  eq f(b) = a .

  op g : B -> B .
  ---------------
  eq g(a) = a .
endfm

fmod TEST-MODULE2 is
  sorts C D .
  subsort C < D .

  op c : -> C .
  op d : -> D .

  op g : C -> D .
  ---------------
  eq g(c) = d .
endfm

fmod TEST-MODULE3 is
  sorts A B C D .
  subsort A < B C < D .

  op a : -> A .
  op b : -> B .
  op c : -> C .
  op d : -> D .

  op g : C -> D .
  ---------------
  eq g(c) = d .
endfm

--- Module MODULE-CONSTRUCTION
--- ==========================

select MODULE-CONSTRUCTION .

reduce forall ( sorts var<Sort>('X) . ) exists ( sorts var<Sort>('X) . ) .

reduce FUNCTOR(var<Sort>('X), var<Sort>('X)) .
reduce FUNCTOR(var<Sort>('X), 'F { var<Sort>('X) }) .
reduce FUNCTOR(var<Sort>('X), (                'F { var<Sort>('X) } < 'G { var<Sort>('X) })) .
reduce FUNCTOR(var<Sort>('X), (var<Sort>('X) < 'F { var<Sort>('X) } < 'G { var<Sort>('X) })) .
reduce FUNCTOR(var<Sort>('X), (var<Sort>('X) < 'F { var<Sort>('X) } < 'G { var<Sort>('X) } < 'H { var<Sort>('X) })) .
reduce FUNCTOR(var<Sort>('X), var<Sort>('F) { var<Sort>('X) }) .

reduce COFUNCTOR(var<Sort>('X), 'F { var<Sort>('X) }) .
reduce COFUNCTOR(var<Sort>('X), ('F { var<Sort>('X) } < 'G { var<Sort>('X) })) .
reduce COFUNCTOR(var<Sort>('X), ('F { var<Sort>('X) } < 'G { var<Sort>('X) } < 'H { var<Sort>('X) })) .
reduce COFUNCTOR(var<Sort>('X), var<Sort>('F) { var<Sort>('X) }) .

reduce upModule('TEST-MODULE, false) deriving   FUNCTOR(var<Sort>('X), 'F { var<Sort>('X) }) .
reduce upModule('TEST-MODULE, false) deriving COFUNCTOR(var<Sort>('X), 'F { var<Sort>('X) }) .
reduce upModule('TEST-MODULE, false) deriving (   FUNCTOR(var<Sort>('X), 'F { var<Sort>('X) })
                                              | COFUNCTOR(var<Sort>('X), 'G { var<Sort>('X) })
                                              ) .
reduce upModule('TEST-MODULE, false) deriving (   FUNCTOR(var<Sort>('X), 'F { var<Sort>('X) })
                                              ; COFUNCTOR(var<Sort>('X), 'G { var<Sort>('X) })
                                              ) .
reduce upModule('TEST-MODULE, false) deriving ( FUNCTOR(var<Sort>('X), var<Sort>('F) { var<Sort>('X) })
                                              ; FUNCTOR(var<Sort>('X), var<Sort>('G) { var<Sort>('X) })
                                              ) .

reduce upModule('TEST-MODULE, false) deriving LIST .
reduce upModule('TEST-MODULE, false) deriving SET  .
reduce upModule('TEST-MODULE, false) deriving MSET .

reduce upModule('TEST-MODULE2, false) deriving LIST .
reduce upModule('EMPTY,        false) deriving LIST .

reduce wellFormed(resolveNames(upModule('TEST-MODULE,  false) deriving LIST)) .
reduce wellFormed(resolveNames(upModule('TEST-MODULE,  false) deriving SET )) .
reduce wellFormed(resolveNames(upModule('TEST-MODULE,  false) deriving MSET)) .
reduce wellFormed(resolveNames(upModule('TEST-MODULE2, false) deriving LIST)) .
reduce wellFormed(resolveNames(upModule('EMPTY,        false) deriving LIST)) .

reduce upModule('TEST-MODULE, false) deriving PROFUNCTOR(var<Sort>('X), var<Sort>('Y), var<Sort>('Y) ==> var<Sort>('X)) .
reduce upModule('TEST-MODULE, false) deriving LIST ; PROFUNCTOR(var<Sort>('X), var<Sort>('Y), var<Sort>('Y) ==> var<Sort>('X)) .

reduce wellFormed(resolveNames(upModule('TEST-MODULE, false) deriving LIST ; PROFUNCTOR(var<Sort>('X), var<Sort>('Y), var<Sort>('Y) ==> var<Sort>('X)))) .

reduce upModule('TEST-MODULE, false) deriving ARROW .
reduce upModule('TEST-MODULE, false) deriving LIST ; ARROW .
reduce upModule('TEST-MODULE, false) deriving ARROW ; ARROW .

reduce wellFormed(resolveNames(upModule('TEST-MODULE, false) deriving ARROW)) .
reduce wellFormed(resolveNames(upModule('TEST-MODULE, false) deriving LIST ; ARROW)) .
reduce wellFormed(resolveNames(upModule('TEST-MODULE, false) deriving ARROW ; ARROW)) .

reduce upModule('TEST-MODULE deriving DOWN-TERM < 'TEST-MODULE >) .
reduce wellFormed(resolveNames(upModule('TEST-MODULE deriving DOWN-TERM < 'TEST-MODULE >))) .
