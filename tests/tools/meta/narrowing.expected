==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(0)) .
rewrites: 4
result Bool: true
==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(1)) .
rewrites: 3
result Bool: true
==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(2)) .
rewrites: 3
result Bool: true
==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(3)) .
rewrites: 5
result Bool: true
==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(4)) .
rewrites: 5
result Bool: true
==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(5)) .
rewrites: 5
result Bool: true
==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(6)) .
rewrites: 4
result Bool: true
==========================================
reduce in NAT>-HARNESS : wellFormed(##m##, init(7)) .
rewrites: 5
result Bool: true
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(0)) .
rewrites: 8
result Variant: {'#1:Nat>,
  'X:Nat> <- '#1:Nat>,1,none,false}
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(1)) .
rewrites: 8
result Variant: {'_+_['1.NzNat>,'#1:Nat>],
  'Y:Nat> <- '#1:Nat>,1,none,false}
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(2)) .
rewrites: 8
result Variant: {'#1:NzNat>,
  'Z:NzNat> <- '#1:NzNat>,1,none,false}
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(3)) .
rewrites: 22
result VariantSet: {'ff.Bool>,
  'X:Nat> <- '%1:Nat> ; 
  'Z:NzNat> <- '_+_['%1:Nat>,'%2:NzNat>],2,0,true} #
{'ff.Bool>,
  'X:Nat> <- '%1:NzNat> ; 
  'Z:NzNat> <- '_+_['%2:Nat>,'%1:NzNat>],2,0,true} #
{'tt.Bool>,
  'X:Nat> <- '_+_['%1:NzNat>,'%2:NzNat>] ; 
  'Z:NzNat> <- '%1:NzNat>,2,0,false} #
{'_>_['#1:Nat>,'#2:NzNat>],
  'X:Nat> <- '#1:Nat> ; 
  'Z:NzNat> <- '#2:NzNat>,2,none,false}
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(4)) .
rewrites: 22
result VariantSet: {'ff.Bool>,
  'X:Nat> <- '%1:Nat> ; 
  'Y:Nat> <- '_+_['%1:Nat>,'%2:Nat>],2,0,true} #
{'ff.Bool>,
  'X:Nat> <- '_+_['1.NzNat>,'%1:Nat>] ; 
  'Y:Nat> <- '_+_['%1:Nat>,'%2:Nat>],2,0,true} #
{'tt.Bool>,
  'X:Nat> <- '_+_['1.NzNat>,'%1:Nat>,'%2:NzNat>] ; 
  'Y:Nat> <- '%1:Nat>,2,0,false} #
{'_>_['#1:Nat>,'_+_['1.NzNat>,'#2:Nat>]],
  'X:Nat> <- '#1:Nat> ; 
  'Y:Nat> <- '#2:Nat>,2,none,false}
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(5)) .
rewrites: 22
result VariantSet: {'ff.Bool>,
  'Y:Nat> <- '_+_['%1:Nat>,'%2:Nat>] ; 
  'Z:NzNat> <- '_+_['1.NzNat>,'%1:Nat>],2,0,true} #
{'ff.Bool>,
  'Y:Nat> <- '_+_['%2:Nat>,'%1:NzNat>] ; 
  'Z:NzNat> <- '%1:NzNat>,2,0,true} #
{'tt.Bool>,
  'Y:Nat> <- '%1:Nat> ; 
  'Z:NzNat> <- '_+_['1.NzNat>,'%1:Nat>,'%2:NzNat>],2,0,false} #
{'_>_['#1:NzNat>,'_+_['1.NzNat>,'#2:Nat>]],
  'Y:Nat> <- '#2:Nat> ; 
  'Z:NzNat> <- '#1:NzNat>,2,none,false}
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(6)) .
rewrites: 10
result Variant: {'tt.Bool>,
  'Y:Nat> <- '#1:Nat>,1,none,false}
==========================================
reduce in NAT>-HARNESS : variants(##m##, init(7)) .
rewrites: 11
result Variant: {'ff.Bool>,
  'X:Nat> <- '#1:Nat> ; 
  'Y:Nat> <- '#2:Nat>,2,none,false}
==========================================
reduce in NAT>-HARNESS : getTerms(variants(##m##, init(0))) .
rewrites: 10
result Variable: '#1:Nat>
==========================================
reduce in NAT>-HARNESS : getTerms(variants(##m##, init(3))) .
rewrites: 27
result NeTermList: 'ff.Bool>,'ff.Bool>,'tt.Bool>,'_>_['#1:Nat>,'#2:NzNat>]
==========================================
reduce in NAT>-HARNESS : getTerms(variants(##m##, init(4))) .
rewrites: 27
result NeTermList: 'ff.Bool>,'ff.Bool>,'tt.Bool>,'_>_['#1:Nat>,'_+_['1.NzNat>,
    '#2:Nat>]]
==========================================
reduce in NAT>-HARNESS : getTerms(variants(##m##, init(5))) .
rewrites: 27
result NeTermList: 'ff.Bool>,'ff.Bool>,'tt.Bool>,'_>_['#1:NzNat>,'_+_[
    '1.NzNat>,'#2:Nat>]]
==========================================
reduce in NAT>-HARNESS : getTerms(variants(##m##, init(6))) .
rewrites: 12
result Constant: 'tt.Bool>
==========================================
reduce in NAT>-HARNESS : getTerms(variants(##m##, init(7))) .
rewrites: 13
result Constant: 'ff.Bool>
==========================================
reduce in NARROWING : allNarrowSteps(upModule('EXT-CYCLE, true), 'f[
    'a.PreState], 0) .
rewrites: 12
result NeNarrowStepResults: {'a2b : 'f['b.PreState],none} || {'a2c : 'g[
    'c.PreState],none}
==========================================
reduce in NARROWING : allNarrowSteps(upModule('EXT-CYCLE, true), 'f[
    'a.PreState], 1) .
rewrites: 8
result NarrowStepResult: {'a2c : 'g['c.PreState],none}
==========================================
reduce in NARROWING : allNarrowSteps(upModule('EXT-CYCLE, true), 'f[
    'a.PreState], 2) .
rewrites: 4
result NarrowStepResults: .NarrowStepResults
==========================================
reduce in NARROWING : allNarrowSteps(upModule('EXT-CYCLE, true), 'f[
    'c.PreState], 0) .
rewrites: 8
result NarrowStepResult: {'c2a : 'f['a.PreState],none}
==========================================
reduce in NARROWING : allNarrowSteps(upModule('EXT-CYCLE, true), 'g[
    'b.PreState], 0) .
rewrites: 4
result NarrowStepResults: .NarrowStepResults
==========================================
reduce in NARROWING : allNarrowSteps(upModule('EXT-CYCLE, true), 'g[
    'a.PreState], 0) .
rewrites: 8
result NarrowStepResult: {'a2c : 'g['c.PreState],none}
==========================================
reduce in NARROWING : allNarrowSteps(upModule('2TOKEN, true), '`{_`}['__[
    '$.Token,'`[_`,wait`]['a.Name]]], 0) .
rewrites: 7
result NarrowStepResult: {'a-enter : '`{_`}['`[_`,crit`]['a.Name]],none}
==========================================
reduce in NARROWING : allNarrowSteps(upModule('2TOKEN, true), '`{_`}['__[
    'T:Token,'P:Proc]], 0) .
rewrites: 19
result NeNarrowStepResults: {'a-enter : '`{_`}['`[_`,crit`]['a.Name]],
  'P:Proc <- '`[_`,wait`]['a.Name] ; 
  'T:Token <- '$.Token} || {'a-exit : '`{_`}['__['*.Token,'@1:Token,
    '`[_`,wait`]['a.Name]]],
  'P:Proc <- '`[_`,crit`]['a.Name] ; 
  'T:Token <- '@1:Token} || {'b-enter : '`{_`}['`[_`,crit`]['b.Name]],
  'P:Proc <- '`[_`,wait`]['b.Name] ; 
  'T:Token <- '*.Token} || {'b-exit : '`{_`}['__['$.Token,'@1:Token,
    '`[_`,wait`]['b.Name]]],
  'P:Proc <- '`[_`,crit`]['b.Name] ; 
  'T:Token <- '@1:Token}
==========================================
reduce in NARROWING : narrowSteps(upModule('BAKERY, true), '_;_;_['N:Name,
    'N:Name,'__['`[_`]['idle.ModeIdle],'`[_`]['idle.ModeIdle]]]) .
rewrites: 8
result NarrowStepResult: {'wake : '_;_;_['__['s.Name,'@1:Name],'@1:Name,'__[
    '`[_`]['idle.ModeIdle],'`[_`]['wait['@1:Name]]]],
  'N:Name <- '@1:Name}
==========================================
reduce in NARROWING : narrowSteps(upModule('BAKERY, true), '_;_;_['N:Name,
    'M:Name,'IS:ProcIdleSet]) .
rewrites: 8
result NarrowStepResult: {'wake : '_;_;_['__['s.Name,'@1:Name],'@2:Name,'__[
    '@3:ProcIdleSet,'`[_`]['wait['@1:Name]]]],
  'IS:ProcIdleSet <- '__['@3:ProcIdleSet,'`[_`]['idle.ModeIdle]] ; 
  'M:Name <- '@2:Name ; 
  'N:Name <- '@1:Name}
==========================================
reduce in NARROWING : narrowSteps(upModule('BAKERY, true), '_;_;_['N:Name,
    'M:Name,'WS:ProcWaitSet]) .
rewrites: 12
result NeNarrowStepResults: {'crit : '_;_;_['@1:Name,'@2:Name,'__[
    '@3:ProcWaitSet,'`[_`]['crit['@2:Name]]]],
  'M:Name <- '@2:Name ; 
  'N:Name <- '@1:Name ; 
  'WS:ProcWaitSet <- '__['@3:ProcWaitSet,'`[_`]['wait['@2:Name]]]} || {'wake :
    '_;_;_['__['s.Name,'@1:Name],'@2:Name,'__['@3:ProcWaitSet,'`[_`]['wait[
    '@1:Name]]]],
  'M:Name <- '@2:Name ; 
  'N:Name <- '@1:Name ; 
  'WS:ProcWaitSet <- '__['@3:ProcWaitSet,'`[_`]['idle.ModeIdle]]}
Bye.
