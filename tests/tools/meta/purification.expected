Warning: sort declarations for operator resolveNames failed preregularity check
    on 6 out of 43 sort tuples. First such tuple is (Type).
Warning: sort declarations for operator resolveNames failed preregularity check
    on 1 out of 26 sort tuples. First such tuple is (NullDeclSet).
Warning: ctor declarations for associative operator __ are conflict on 138 out
    of 17576 sort triples. First such triple is (ModuleDeclSet, SortDeclSet,
    SortDeclSet).
==========================================
reduce in PURIFICATION : subtheoryPurify(asTemplate(upModule('FVP-NAT, true)),
    upModule('FVP-NAT-MULT, true), '0.Nat) == '0.Nat .
rewrites: 10
result Bool: true
==========================================
reduce in PURIFICATION : subtheoryPurify(asTemplate(upModule('FVP-NAT, true)),
    upModule('FVP-NAT-MULT, true), 'X:Nat) == 'X:Nat .
rewrites: 10
result Bool: true
==========================================
reduce in PURIFICATION : subtheoryPurify(asTemplate(upModule('FVP-NAT, true)),
    upModule('FVP-NAT-MULT, true), '_+_['0.Nat,'1.Nat]) == '_+_['0.Nat,'1.Nat]
    .
rewrites: 10
result Bool: true
==========================================
reduce in PURIFICATION : subtheoryPurify(asTemplate(upModule('FVP-NAT, true)),
    upModule('FVP-NAT-MULT, true), '_+_['0.Nat,'X:Nat]) == '_+_['0.Nat,'X:Nat]
    .
rewrites: 10
result Bool: true
==========================================
reduce in PURIFICATION : subtheoryPurify(asTemplate(upModule('FVP-NAT, true)),
    upModule('FVP-NAT-MULT, true), '_*_['0.Nat,'1.Nat]) == (
    '#makeVariable`(_*_`[0.Nat`,1.Nat`]`):Nat st
    '#makeVariable`(_*_`[0.Nat`,1.Nat`]`):Nat ?= '_*_['0.Nat,'1.Nat]) .
rewrites: 39
result Bool: true
==========================================
reduce in PURIFICATION : subtheoryPurify(asTemplate(upModule('FVP-NAT, true)),
    upModule('FVP-NAT-MULT, true), '_+_['_*_['0.Nat,'1.Nat],'X:Nat]) == ('_+_[
    '#makeVariable`(_*_`[0.Nat`,1.Nat`]`):Nat,'X:Nat] st
    '#makeVariable`(_*_`[0.Nat`,1.Nat`]`):Nat ?= '_*_['0.Nat,'1.Nat]) .
rewrites: 52
result Bool: true
==========================================
reduce in PURIFICATION : subtheoryPurify(asTemplate(upModule('FVP-NAT, true)),
    upModule('FVP-NAT-MULT, true), '_+_['_*_['0.Nat,'1.Nat],'X:Nat,'_*_['0.Nat,
    '1.Nat]]) == ('_+_['#makeVariable`(_*_`[0.Nat`,1.Nat`]`):Nat,'X:Nat,
    '#makeVariable`(_*_`[0.Nat`,1.Nat`]`):Nat] st
    '#makeVariable`(_*_`[0.Nat`,1.Nat`]`):Nat ?= '_*_['0.Nat,'1.Nat]) .
rewrites: 88
result Bool: true
Warning: sort declarations for operator resolveNames failed preregularity check
    on 6 out of 43 sort tuples. First such tuple is (Type).
Warning: sort declarations for operator resolveNames failed preregularity check
    on 1 out of 26 sort tuples. First such tuple is (NullDeclSet).
Warning: ctor declarations for associative operator __ are conflict on 138 out
    of 17576 sort triples. First such triple is (ModuleDeclSet, SortDeclSet,
    SortDeclSet).
==========================================
reduce in TEST-PURIFY : moduleIntersect(asTemplate(natMultMod), asTemplate(
    natMultMod)) == asTemplate(natMultMod) .
rewrites: 26
result Bool: true
==========================================
reduce in TEST-PURIFY : moduleIntersect(asTemplate(natOrderMod), asTemplate(
    natOrderMod)) == asTemplate(natOrderMod) .
rewrites: 30
result Bool: true
==========================================
reduce in TEST-PURIFY : moduleIntersect(asTemplate(natListMod), asTemplate(
    natListMod)) == asTemplate(natListMod) .
rewrites: 16
result Bool: true
==========================================
reduce in TEST-PURIFY : moduleIntersect(asTemplate(natMultMod), asTemplate(
    natOrderMod)) == asTemplate(upModule('FVP-NAT, true)) .
rewrites: 33
result Bool: true
==========================================
reduce in TEST-PURIFY : moduleIntersect(asTemplate(natMultMod), asTemplate(
    natListMod)) == asTemplate(upModule('FVP-NAT-SORT, true)) .
rewrites: 18
result Bool: true
==========================================
reduce in TEST-PURIFY : moduleIntersect(asTemplate(natOrderMod), asTemplate(
    natListMod)) == asTemplate(upModule('FVP-BOOL-CTOR, true))
asTemplate(upModule('FVP-NAT-SORT, true)) .
rewrites: 26
result Bool: true
==========================================
reduce in TEST-PURIFY : 'Foo inS moduleIntersect(asTemplate(natOrderMod),
    asTemplate(natListMod)) == false .
rewrites: 21
result Bool: true
==========================================
reduce in TEST-PURIFY : 'NatList inS moduleIntersect(asTemplate(natOrderMod),
    asTemplate(natListMod)) == false .
rewrites: 21
result Bool: true
==========================================
reduce in TEST-PURIFY : joint-variable(natListMod, natOrderMod, 'head[
    'L2:NeNatList]) .
rewrites: 39
result Variable: '#makeVariable`(head`[L2:NeNatList`]`):Nat
==========================================
reduce in TEST-PURIFY : joint-variable(natOrderMod, natListMod, 'head[
    'L2:NeNatList]) .
rewrites: 40
result Variable: '#makeVariable`(head`[L2:NeNatList`]`):Nat
==========================================
reduce in TEST-PURIFY : joint-variable(natListMod, natOrderMod, '_<_['N1:Nat,
    'N2:Nat]) .
rewrites: 45
result Variable: '#makeVariable`(_<_`[N1:Nat`,N2:Nat`]`):Bool
==========================================
reduce in TEST-PURIFY : purify(natOrderMod, natListMod, '_<_['head[
    'L1:NeNatList],'head['L2:NeNatList]]) .
rewrites: 103
result CTerm: '_<_['#makeVariable`(head`[L1:NeNatList`]`):Nat,
    '#makeVariable`(head`[L2:NeNatList`]`):Nat] st
    '#makeVariable`(head`[L1:NeNatList`]`):Nat ?= 'head['L1:NeNatList] /\
    '#makeVariable`(head`[L2:NeNatList`]`):Nat ?= 'head['L2:NeNatList]
==========================================
reduce in TEST-PURIFY : purify(natListMod, natOrderMod, '_<_['head[
    'L1:NeNatList],'head['L2:NeNatList]]) .
rewrites: 200
result CTerm: '#makeVariable`(_<_`[#makeVariable`(head`[L1:NeNatList`]`):Nat`,#makeVariable`(head`[L2:NeNatList`]`):Nat`]`):Bool st '#makeVariable`(_<_`[#makeVariable`(head`[L1:NeNatList`]`):Nat`,#makeVariable`(head`[L2:NeNatList`]`):Nat`]`):Bool ?= '_<_['#makeVariable`(head`[L1:NeNatList`]`):Nat,
    '#makeVariable`(head`[L2:NeNatList`]`):Nat] /\
    '#makeVariable`(head`[L1:NeNatList`]`):Nat ?= 'head['L1:NeNatList] /\
    '#makeVariable`(head`[L2:NeNatList`]`):Nat ?= 'head['L2:NeNatList]
==========================================
reduce in TEST-PURIFY : purify(natListMod, natOrderMod, '_<_['_+_['head[
    'L':NeNatList],'head['L':NeNatList]],'_+_['head['L:NeNatList],'head[
    'L:NeNatList]]]) .
rewrites: 340
result CTerm: '#makeVariable`(_<_`[_+_`[#makeVariable`(head`[L':NeNatList`]`):Nat`,#makeVariable`(head`[L':NeNatList`]`):Nat`]`,_+_`[#makeVariable`(head`[L:NeNatList`]`):Nat`,#makeVariable`(head`[L:NeNatList`]`):Nat`]`]`):Bool st '#makeVariable`(_<_`[_+_`[#makeVariable`(head`[L':NeNatList`]`):Nat`,#makeVariable`(head`[L':NeNatList`]`):Nat`]`,_+_`[#makeVariable`(head`[L:NeNatList`]`):Nat`,#makeVariable`(head`[L:NeNatList`]`):Nat`]`]`):Bool ?= '_<_['_+_[
    '#makeVariable`(head`[L':NeNatList`]`):Nat,
    '#makeVariable`(head`[L':NeNatList`]`):Nat],'_+_[
    '#makeVariable`(head`[L:NeNatList`]`):Nat,
    '#makeVariable`(head`[L:NeNatList`]`):Nat]] /\
    '#makeVariable`(head`[L':NeNatList`]`):Nat ?= 'head['L':NeNatList] /\
    '#makeVariable`(head`[L:NeNatList`]`):Nat ?= 'head['L:NeNatList]
==========================================
reduce in TEST-PURIFY : purify(natOrderMod, natMultMod, deepLeft) .
rewrites: 117
result CTerm: '#makeVariable`(_*_`[1.Nat`,min`[0.Nat`,_*_`[1.Nat`,max`[0.Nat`,_*_`[1.Nat`,_+_`[1.Nat`,1.Nat`]`]`]`]`]`]`):Nat st '#makeVariable`(_*_`[1.Nat`,min`[0.Nat`,_*_`[1.Nat`,max`[0.Nat`,_*_`[1.Nat`,_+_`[1.Nat`,1.Nat`]`]`]`]`]`]`):Nat ?= '_*_['1.Nat,'min['0.Nat,'_*_['1.Nat,'max['0.Nat,'_*_['1.Nat,'_+_['1.Nat,
    '1.Nat]]]]]]
==========================================
reduce in TEST-PURIFY : purify(natMultMod, natOrderMod, deepLeft) .
rewrites: 8
result GroundTerm: '_*_['1.Nat,'min['0.Nat,'_*_['1.Nat,'max['0.Nat,'_*_['1.Nat,
    '_+_['1.Nat,'1.Nat]]]]]]
==========================================
reduce in TEST-PURIFY : purify(natOrderMod, natMultMod, deepRight) .
rewrites: 117
result CTerm: '#makeVariable`(_*_`[min`[_*_`[max`[_*_`[_+_`[1.Nat`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`):Nat st '#makeVariable`(_*_`[min`[_*_`[max`[_*_`[_+_`[1.Nat`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`):Nat ?= '_*_['min['_*_['max['_*_['_+_['1.Nat,'1.Nat],'1.Nat],'1.Nat],'1.Nat],
    '1.Nat],'1.Nat]
==========================================
reduce in TEST-PURIFY : purify(natOrderMod, natMultMod, deepMixed) .
rewrites: 196
result CTerm: '#makeVariable`(_+_`[_*_`[min`[_*_`[max`[_*_`[_+_`[1.Nat`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,_*_`[1.Nat`,min`[0.Nat`,_*_`[1.Nat`,max`[0.Nat`,_*_`[1.Nat`,_+_`[1.Nat`,1.Nat`]`]`]`]`]`]`]`):Nat st '#makeVariable`(_+_`[_*_`[min`[_*_`[max`[_*_`[_+_`[1.Nat`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,1.Nat`]`,_*_`[1.Nat`,min`[0.Nat`,_*_`[1.Nat`,max`[0.Nat`,_*_`[1.Nat`,_+_`[1.Nat`,1.Nat`]`]`]`]`]`]`]`):Nat ?= '_+_['_*_['min['_*_['max['_*_['_+_[
    '1.Nat,'1.Nat],'1.Nat],'1.Nat],'1.Nat],'1.Nat],'1.Nat],'_*_['1.Nat,'min[
    '0.Nat,'_*_['1.Nat,'max['0.Nat,'_*_['1.Nat,'_+_['1.Nat,'1.Nat]]]]]]]
==========================================
reduce in TEST-PURIFY : purify('MYLISTNAT, 'FVP-NAT-PRED, 'true.Bool ?= '_<_[
    'head['L1:NeNatList],'head['L2:NeNatList]]) .
rewrites: 206
result PosEqConj: '#makeVariable`(head`[L1:NeNatList`]`):Nat ?= 'head[
    'L1:NeNatList] /\ '#makeVariable`(head`[L2:NeNatList`]`):Nat ?= 'head[
    'L2:NeNatList] /\ 'true.Bool ?= '_<_[
    '#makeVariable`(head`[L1:NeNatList`]`):Nat,
    '#makeVariable`(head`[L2:NeNatList`]`):Nat]
==========================================
reduce in TEST-PURIFY : purify('FVP-NAT-PRED, 'MYLISTNAT, 'true.Bool != '_<_[
    '_+_['head['L':NeNatList],'head['L':NeNatList]],'_+_['head['L:NeNatList],
    'head['L:NeNatList]]]) .
rewrites: 324
result EqConj: '#makeVariable`(head`[L':NeNatList`]`):Nat ?= 'head[
    'L':NeNatList] /\ '#makeVariable`(head`[L:NeNatList`]`):Nat ?= 'head[
    'L:NeNatList] /\ 'true.Bool != '_<_['_+_[
    '#makeVariable`(head`[L':NeNatList`]`):Nat,
    '#makeVariable`(head`[L':NeNatList`]`):Nat],'_+_[
    '#makeVariable`(head`[L:NeNatList`]`):Nat,
    '#makeVariable`(head`[L:NeNatList`]`):Nat]]
==========================================
reduce in TEST-PURIFY : purify('MYLISTNAT, 'FVP-NAT-PRED, 'false.Bool != '_<_[
    '_+_['head['L':NeNatList],'head['L':NeNatList]],'_+_['head['L:NeNatList],
    'head['L:NeNatList]]]) .
rewrites: 324
result EqConj: '#makeVariable`(head`[L':NeNatList`]`):Nat ?= 'head[
    'L':NeNatList] /\ '#makeVariable`(head`[L:NeNatList`]`):Nat ?= 'head[
    'L:NeNatList] /\ 'false.Bool != '_<_['_+_[
    '#makeVariable`(head`[L':NeNatList`]`):Nat,
    '#makeVariable`(head`[L':NeNatList`]`):Nat],'_+_[
    '#makeVariable`(head`[L:NeNatList`]`):Nat,
    '#makeVariable`(head`[L:NeNatList`]`):Nat]]
Bye.
