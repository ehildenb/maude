==========================================
reduce in PSI-INTERNAL : dirac(r) * 2/5 + dirac(r) * 3/5 .
rewrites: 0
result DExp: dirac(r) * 2/5 + dirac(r) * 3/5
==========================================
reduce in PSI-INTERNAL : dirac(r) * 2/5 + dirac(r) * 3/5 .
rewrites: 0
result DExp: dirac(r) * 2/5 + dirac(r) * 3/5
==========================================
reduce in PSI-INTERNAL : dirac(r) * [3 < 4] .
rewrites: 0
result DExp: dirac(r) * [3 < 4]
==========================================
reduce in PSI-INTERNAL : dirac(r) * [4 < 3] .
rewrites: 0
result DExp: dirac(r) * [4 < 3]
==========================================
reduce in PSI-INTERNAL : int x . x .
rewrites: 0
result DExp: int x . x
==========================================
reduce in PSI-INTERNAL : int x . gaussAnti(x, x) .
rewrites: 0
result DExp: int x . gaussAnti(x, x)
==========================================
reduce in PSI-INTERNAL : gaussAnti(x, 0) .
rewrites: 0
result DExp: gaussAnti(x, 0)
==========================================
reduce in PSI-INTERNAL : sum x . int x . gaussAnti(x, 0) .
rewrites: 0
result DExp: sum x . int x . gaussAnti(x, 0)
==========================================
reduce in PSI-INTERNAL : dirac(r) * gaussAnti(x, 0) .
rewrites: 0
result DExp: dirac(r) * gaussAnti(x, 0)
==========================================
reduce in PSI-INTERNAL : ln(x + y * 3) .
rewrites: 0
result DExp: ln(x + y * 3)
==========================================
reduce in PSI-INTERNAL : 3 [5 / y] .
rewrites: 1
result NzNat: 3
==========================================
reduce in PSI-INTERNAL : pi [5 / y] .
rewrites: 1
result DConst: pi
==========================================
reduce in PSI-INTERNAL : x + y [3 / x] .
rewrites: 7
result DExp: y + 3
==========================================
reduce in PSI-INTERNAL : x + y [3 / y] .
rewrites: 7
result DExp: x + 3
==========================================
reduce in PSI-INTERNAL : ln((x + y * 3) - 22) [x / y] .
rewrites: 12
result DExp: ln(x + 22 + x * 3)
==========================================
reduce in PSI-INTERNAL : ln((x + y * 3) - 22) [x / y] [5 / x] .
rewrites: 27
result DExp: ln(42)
==========================================
reduce in PSI-INTERNAL : ln((x + y * 3) - 22) [x / y] [5 / x] [7 / z] .
rewrites: 29
result DExp: ln(42)
==========================================
reduce in PSI-INTERNAL : x * [3 < 45] [3 / x] .
rewrites: 7
result DExp: 3 * [3 < 45]
==========================================
reduce in PSI-INTERNAL : y * [x = 45] [3 / x] .
rewrites: 9
result DExp: y * [3 = 45]
==========================================
reduce in PSI-INTERNAL : dirac(y + x * 3) [5 / x] .
rewrites: 11
result DExp: dirac(y + 15)
==========================================
reduce in PSI-INTERNAL : dirac(y + x * 3) [5 / y] .
rewrites: 10
result DExp: dirac(5 + x * 3)
==========================================
reduce in PSI-INTERNAL : int x . (y + x * 3) [5 / x] .
rewrites: 3
result DExp: int x . (y + x * 3)
==========================================
reduce in PSI-INTERNAL : int x . (y + x * 3) [5 / y] .
rewrites: 12
result DExp: int x . (5 + x * 3)
==========================================
reduce in PSI-DSL : uniformInt(0, x) .
rewrites: 0
result Exp: uniformInt(0, x)
==========================================
reduce in PSI-DSL : 4 * uniformInt(0, x) .
rewrites: 0
result Exp: 4 * uniformInt(0, x)
==========================================
reduce in PSI-DSL : m(r) .
rewrites: 0
result Exp: m(r)
==========================================
reduce in PSI-DSL : fun m(x)= 4 * uniformInt(0, x) .
rewrites: 0
result Function: fun m(x)= 4 * uniformInt(0, x)
==========================================
reduce in PSI-DSL : fun m(x)= 4 * uniformInt(0, x) fun n(y)= 3 * uniformInt(y,
    7) .
rewrites: 0
result Program: fun m(x)= 4 * uniformInt(0, x) fun n(y)= 3 * uniformInt(y, 7)
==========================================
reduce in PSI-DSL : fun m(x)= 4 * uniformInt(0, x) .
rewrites: 0
result Function: fun m(x)= 4 * uniformInt(0, x)
==========================================
reduce in PSI-DSL : fun m(x)= 4 * uniformInt(0, x) fun n(y)= 3 * uniformInt(y,
    7) .
rewrites: 0
result Program: fun m(x)= 4 * uniformInt(0, x) fun n(y)= 3 * uniformInt(y, 7)
==========================================
reduce in PSI-TRANSLATION : dist: m(r) .
rewrites: 0
result Query: dist: m(r)
==========================================
reduce in PSI-TRANSLATION : dist: n(m(r)) .
rewrites: 0
result Query: dist: n(m(r))
==========================================
reduce in PSI-TRANSLATION : dist: uniformInt(0, 5) .
rewrites: 0
result Query: dist: uniformInt(0, 5)
==========================================
reduce in PSI-TRANSLATION : fun m(x)= 4 * uniformInt(0, x) fun n(y)= 3 *
    uniformInt(y, 7) dist: n(m(r)) .
rewrites: 0
result Program?: fun m(x)= 4 * uniformInt(0, x) fun n(y)= 3 * uniformInt(y, 7)
    dist: n(m(r))
==========================================
reduce in PSI-TRANSLATION : translate(x) .
rewrites: 2
result TranslateEnv: x | .TranslateEnv
==========================================
reduce in PSI-TRANSLATION : translate(x * y) .
rewrites: 5
result TranslateEnv: x * y | .TranslateEnv
==========================================
reduce in PSI-TRANSLATION : translate(x / y) .
rewrites: 5
result TranslateEnv: x / y | Assert([y ≠ 0])
==========================================
reduce in PSI-TRANSLATION : translate(x / (y + z)) .
rewrites: 8
result TranslateEnv: x / (y + z) | Assert([0 ≠ y + z])
==========================================
reduce in PSI-TRANSLATION : translate(3 / (y + z)) .
rewrites: 8
result TranslateEnv: 3 / (y + z) | Assert([0 ≠ y + z])
==========================================
reduce in PSI-TRANSLATION : translate(x / (y + z),y) .
rewrites: 10
result TranslateEnv: x / (y + z),y | Assert([0 ≠ y + z])
==========================================
reduce in PSI-TRANSLATION : translate(x / (y + z) < 4) .
rewrites: 11
result TranslateEnv: [x / (y + z) < 4] | Assert([0 ≠ y + z])
==========================================
reduce in PSI-TRANSLATION : translate(x * bernoulli(x * 3)) .
rewrites: 9
result TranslateEnv: x * (dirac(fv(x * 3)) * (1 - x * 3) + x * 3 * dirac(1 -
    fv(x * 3))) | Assert([0 ≤ x * 3] * [x * 3 ≤ 1])
==========================================
reduce in PSI-TRANSLATION : translate((x * bernoulli(x * 3)) / z) .
rewrites: 12
result TranslateEnv: (x * (dirac(fv(x * 3)) * (1 - x * 3) + x * 3 * dirac(1 -
    fv(x * 3)))) / z | Assert([0 ≤ x * 3] * [x * 3 ≤ 1]) ; Assert([z ≠
    0])
Bye.
