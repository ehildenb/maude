set show timing off .

load ../../../contrib/systems/caut.maude
load ../../../contrib/tools/solvers/psi.maude

--- Test Module PSI-INTERNAL
--- ========================

select PSI-INTERNAL .

reduce ((2/5) * dirac(r)) + ((3/5) * dirac(r)) .
reduce ((2/5) * dirac(r)) + ((3/5) * dirac(r)) .
reduce [ 3 < 4 ] * dirac(r) .
reduce [ 4 < 3 ] * dirac(r) .
reduce ln(x + y * 3) .
reduce gaussAnti(x,0) .
reduce gaussAnti(x,0) * dirac(r) .
reduce int x . x .
reduce int x . gaussAnti(x,x) .
reduce sum x . (int x . gaussAnti(x,0)) .

reduce 3  [ 5 / y ] .
reduce pi [ 5 / y ] .
reduce x + y [ 3 / x ] .
reduce x + y [ 3 / y ] .
reduce ln((x + y * 3) - 22) [ x / y ] .
reduce ln((x + y * 3) - 22) [ x / y ] [ 5 / x ] .
reduce ln((x + y * 3) - 22) [ x / y ] [ 5 / x ] [ 7 / z ] .

reduce [ 3 < 45 ] * x [ 3 / x ] .
reduce [ x = 45 ] * y [ 3 / x ] .

reduce dirac(3 * x + y)    [ 5 / x ] .
reduce dirac(3 * x + y)    [ 5 / y ] .
reduce int x . (3 * x + y) [ 5 / x ] .
reduce int x . (3 * x + y) [ 5 / y ] .

--- Test Module PSI-USER
--- ====================

select PSI-USER .

reduce uniformInt(0, x) .
reduce 4 * uniformInt(0, x) .

reduce   (- ((dirac( -1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac( -1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [ dirac(1) = dirac(-1)])) * 1/2) + (dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2 < 0 || exp(- (- ((dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)])) * 1/2) + ( dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2) / 30))
       ? dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]
       : dirac(-1) .

reduce m(r) .

reduce fun m(x) = 4 * uniformInt(0, x)  .
reduce fun m(x) = 4 * uniformInt(0, x)
       fun n(y) = 3 * uniformInt(y, 7)  .
reduce fun m(x) = 4 * uniformInt(0, x)  .
reduce fun m(x) = 4 * uniformInt(0, x)
       fun n(y) = 3 * uniformInt(y, 7)  .

--- Test Module PSI-TRANSLATION
--- ===========================

select PSI-TRANSLATION .

reduce dist: m(r) .
reduce dist: n(m(r)) .
reduce dist: uniformInt(0,5) .
reduce fun m(x) = 4 * uniformInt(0, x)
       fun n(y) = 3 * uniformInt(y, 7)
       dist: n(m(r)) .

reduce dirac(1) .
reduce { dirac(1) | .TranslateEnv } .
reduce { dirac(1) , dirac(2) | .TranslateEnv } .
reduce { dirac(1) , dirac(2) , dirac(3) | .TranslateEnv } .
reduce { [ dirac(1) > 3 / 4 ] | .TranslateEnv } .

reduce { (- ((dirac( -1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac( -1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [ dirac(1) = dirac(-1)])) * 1/2) + (dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2 < 0 || exp(- (- ((dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)])) * 1/2) + ( dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2) / 30))
       , dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]
       | .TranslateEnv
       } .

reduce translate(x) .
reduce translate(x * y) .
reduce translateExp(x * y) .
reduce translate(x / y) .
reduce translate(x / (y + z)) .
reduce translate(3 / (y + z)) .
reduce translateExp(3 / (y + z)) .

reduce translate(x / (y + z) , y) .
reduce translate(x / (y + z) < 4) .
reduce translateExp(x / (y + z) < 4) .

reduce translate(x < y ? z * 3 : k + 4) .
reduce translateExp(x < y ? z * 3 : k + 4) .

reduce translate(- ((dirac( -1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac( -1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [ dirac(1) = dirac(-1)])) * 1/2) + (dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2 < 0 || exp(- (- ((dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)])) * 1/2) + ( dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2) / 30)) .
reduce translate(dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]) .

reduce translate(dirac(1) ? dirac(2) : dirac(3)) .
reduce dirac(3) .

reduce translate(   (- ((dirac( -1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac( -1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [ dirac(1) = dirac(-1)])) * 1/2) + (dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2 < 0 || exp(- (- ((dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]) + dirac(-1) * (dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)])) * 1/2) + ( dirac(-1) * dirac(-1) + dirac(-1) * dirac(-1)) * 1/2) / 30))
                  ? dirac(1) * [dirac(-1) = dirac(-1)] + dirac(-1) * [dirac(1) = dirac(-1)]
                  : dirac(-1)
                ) .

reduce translate(x * bernoulli(3 * x)) .
reduce translate((x * bernoulli(3 * x)) / z) .

--- Ising Model example
--- ===================

mod ISING-MODEL is
   protecting PSI-TRANSLATION + PSI-INTERNAL-SIMPLIFICATION .
    extending PERIODIC-GRID * ( op true  to tt
                              , op false to ff
                              , op _<_   to _P<_
                              , op _>_   to _P>_
                              ) .

    vars DE DE' DE'' DH PF : DExp . var SS : States .

    eq height = 1 .
    eq width  = 10 .
    ----------------

    op dist : DExp -> State .
    -------------------------

   ops spinUp spinDown : -> DExp .
   -------------------------------
    eq spinUp   = dirac(1)  .
    eq spinDown = dirac(-1) .

   ops J T : -> Rat .
   ------------------
    eq J = 1/2 .
    eq T = 30 .

    op H : DExp DExp DExp -> [DExp] .
    ---------------------------------
    eq H(DE, DE', DE'') = - (J * (DE * DE' + DE * DE'')) .

    op flip : DExp -> [DExp] .
    --------------------------
    eq flip(DE) = [ DE = spinUp   ] * spinDown
                + [ DE = spinDown ] * spinUp .

    op init : -> Cells .
    --------------------
    eq init = < 0 , 0 > :: dist(dirac(a))
            ; < 0 , 1 > :: dist(dirac(b))
            ; < 0 , 2 > :: dist(dirac(c))
            ; < 0 , 3 > :: dist(dirac(d))
            ; < 0 , 4 > :: dist(dirac(f))
            ; < 0 , 5 > :: dist(dirac(g))
            ; < 0 , 6 > :: dist(dirac(h))
            ; < 0 , 7 > :: dist(dirac(i))
            ; < 0 , 8 > :: dist(dirac(j))
            ; < 0 , 9 > :: dist(dirac(k)) .

    --- ; from querying PSI for the transition probability:
    --- ; p(r|x,y,z) = ([-1+-x=0]+[-x+1=0])·[-x·y+-x·z != 0]·[-x·y+-x·z <= 0]·dirac(0)[-e^(-1/30·x·y+-1/30·x·z)+r]
    --- ;            + ([-1+-x=0]+[-x+1=0])·[x·y+x·z <= 0]·dirac(1)[r]
    --- ; 
    --- ; Pr[error|x,y,z] = [-1+-x≠0]·[-x+1≠0]

    eq dist(DE) -> left[dist(DE')] right[dist(DE'')] SS
     = dist(DE) -> dist( ( ([(- 1) + (- DE) = 0] + [(- DE) + 1 = 0])
                         * [(- DE * DE') + (- DE * DE'') ≠ 0] 
                         * [(- DE * DE') + (- DE * DE'') ≤ 0]
                         * dirac(- e ^ (((- 1 / 30) * DE * DE') + ((- 1 / 30) * DE * DE'')))
                         )
                       + ( ([ (- 1) + (- DE) = 0] + [(- DE) + 1 = 0])
                         * [(DE * DE' + DE * DE'') ≤ 0]
                         * dirac(1)
                         )
                       ) .
endm

search [1] [ init ] =>* { CS:Cells } .
