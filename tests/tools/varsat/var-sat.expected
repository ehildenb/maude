==========================================
reduce in TEST-NAT : addDecls(emptyFModule, setRls(nat, none)) == nat .
rewrites: 39
result Bool: false
==========================================
reduce in TEST-NAT : fin-sorts(nat, 'true.Bool != '_<_['X:Nat,'Y:Nat], none,
    none) .
rewrites: 700
result EmptyTypeSet: (none).EmptyTypeSet
==========================================
reduce in TEST-NAT : var-sat-disj(nat, none, 'true.Bool != '_<_['X:Nat,'Y:Nat])
    .
rewrites: 1553
result Bool: true
==========================================
reduce in TEST-NAT : var-sat-conj(nat, none, 'true.Bool != '_<_['X:Nat,'Y:Nat])
    .
rewrites: 173
result Bool: true
==========================================
reduce in TEST-NAT : var-sat-opt(addDecls(emptyFModule, setRls(nat, none)),
    fin-sorts(nat, 'true.Bool != '_<_['X:Nat,'Y:Nat], none, none), 'true.Bool
    != '_<_['X:Nat,'Y:Nat]) .
rewrites: 1646
result Bool: true
==========================================
reduce in TEST-NAT : hl-func(nat) .
rewrites: 3
result FModule: fmod 'FVP-NAT-PRED is
  nil
  sorts '@HeterogeneousList ; 'Bool ; 'Nat ; 'NzNat .
  subsort 'NzNat < 'Nat .
  op '0 : nil -> 'Nat [ctor] .
  op '1 : nil -> 'NzNat [ctor] .
  op '@S : 'Bool -> '@HeterogeneousList [ctor] .
  op '@S : 'Nat -> '@HeterogeneousList [ctor] .
  op '_+_ : 'Nat 'Nat -> 'Nat [assoc comm ctor id('0.Nat)] .
  op '_+_ : 'Nat 'NzNat -> 'NzNat [assoc comm ctor id('0.Nat)] .
  op '_<=_ : 'Nat 'Nat -> 'Bool [none] .
  op '_<_ : 'Nat 'Nat -> 'Bool [none] .
  op '_monus_ : 'Nat 'Nat -> 'Nat [none] .
  op '_|_ : '@HeterogeneousList '@HeterogeneousList -> '@HeterogeneousList [
    assoc ctor] .
  op 'false : nil -> 'Bool [ctor special(
    id-hook('SystemFalse, nil))] .
  op 'max : 'Nat 'Nat -> 'Nat [assoc comm] .
  op 'min : 'Nat 'Nat -> 'Nat [assoc comm] .
  op 's : 'Nat -> 'Nat [none] .
  op 'sd : 'Nat 'Nat -> 'Nat [comm] .
  op 'singleton : '@HeterogeneousList -> '@HeterogeneousList [ctor] .
  op 'true : nil -> 'Bool [ctor special(
    id-hook('SystemTrue, nil))] .
  none
  eq '_<=_['N:Nat,'_+_['N:Nat,'N':Nat]] = 'true.Bool [variant] .
  eq '_<=_['_+_['NzN:NzNat,'N:Nat],'N:Nat] = 'false.Bool [variant] .
  eq '_<=_['_+_['NzN:NzNat,'N:Nat],'_+_['NzN:NzNat,'N':Nat]] = '_<=_['N:Nat,
    'N':Nat] [none] .
  eq '_<_['N:Nat,'_+_['NzN:NzNat,'N:Nat]] = 'true.Bool [variant] .
  eq '_<_['_+_['N:Nat,'N':Nat],'N:Nat] = 'false.Bool [variant] .
  eq '_<_['_+_['NzN:NzNat,'N:Nat],'_+_['NzN:NzNat,'N':Nat]] = '_<_['N:Nat,
    'N':Nat] [none] .
  eq '_monus_['N:Nat,'_+_['N:Nat,'M:Nat]] = '0.Nat [variant] .
  eq '_monus_['_+_['N:Nat,'M:Nat],'N:Nat] = 'M:Nat [variant] .
  eq 'max['N:Nat,'_+_['N:Nat,'M:Nat]] = '_+_['N:Nat,'M:Nat] [variant] .
  eq 'min['N:Nat,'_+_['N:Nat,'M:Nat]] = 'N:Nat [variant] .
  eq 's['N:Nat] = '_+_['1.NzNat,'N:Nat] [variant] .
  eq 'sd['N:Nat,'_+_['N:Nat,'M:Nat]] = 'M:Nat [variant] .
endfm
==========================================
reduce in TEST-NAT : toHL(nat, FormToTL('true.Bool != '_<_['X:Nat,'Y:Nat])) .
rewrites: 29
result Term: '_|_['@S['true.Bool],'@S['_<_['X:Nat,'Y:Nat]]]
==========================================
reduce in TEST-NAT : consistent?(nat, 'Bool, ('false.Bool != 'true.Bool) | (
    'true.Bool != 'true.Bool)) .
rewrites: 18
result Bool: true
==========================================
reduce in TEST-NAT : consistent?(nat, 'Bool, tt | ('false.Bool != 'true.Bool))
    .
rewrites: 3
result Bool: true
==========================================
reduce in TEST-NAT : consistent?(nat, 'Bool, ff | ('false.Bool != 'true.Bool))
    .
rewrites: 19
result Bool: true
==========================================
reduce in TEST-NAT : consistent?(nat, 'Bool, tt | ff | ('false.Bool !=
    'true.Bool)) .
rewrites: 3
result Bool: true
==========================================
reduce in TEST-NAT : nf-ctor-variants(nat, 'true.Bool != '_<_['X:Nat,'Y:Nat]) .
rewrites: 160
result NegEqLitNeSet: ('false.Bool != 'true.Bool) | ('true.Bool != 'true.Bool)
==========================================
reduce in TEST-NAT : toDUPs(getTerms(ctor-variants(hl-func(nat), toHL(nat,
    FormToTL('true.Bool != '_<_['X:Nat,'Y:Nat]))))) .
rewrites: 155
result NegEqLitNeSet: ('false.Bool != 'true.Bool) | ('true.Bool != 'true.Bool)
==========================================
reduce in TEST-NAT : getTerms(ctor-variants(hl-func(nat), toHL(nat, FormToTL(
    'true.Bool != '_<_['X:Nat,'Y:Nat])))) .
rewrites: 142
result NeTermSet: ('_|_['@S['true.Bool],'@S['false.Bool]]) | ('_|_['@S[
    'true.Bool],'@S['true.Bool]])
==========================================
reduce in TEST-NAT : ctor-variants(hl-func(nat), toHL(nat, FormToTL('true.Bool
    != '_<_['X:Nat,'Y:Nat]))) .
rewrites: 139
result VariantTripleSet: {'_|_['@S['true.Bool],'@S['false.Bool]],
  'X:Nat <- '_+_['%7:Nat,'%8:Nat] ; 
  'Y:Nat <- '%7:Nat,8,0,false} |
{'_|_['@S['true.Bool],'@S['true.Bool]],
  'X:Nat <- '%4:Nat ; 
  'Y:Nat <- '_+_['%4:Nat,'%5:NzNat],5,0,true}
==========================================
reduce in TEST-NAT : toHL(nat, FormToTL('true.Bool != '_<_['X:Nat,'Y:Nat])) .
rewrites: 29
result Term: '_|_['@S['true.Bool],'@S['_<_['X:Nat,'Y:Nat]]]
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X < Y)) == true .
rewrites: 153
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool != upTerm(X < Y)) == true .
rewrites: 262
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X < X)) == false .
rewrites: 103
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X <= Y)) == true .
rewrites: 153
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X <= X)) == true .
rewrites: 141
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X < Y) /\ 'true.Bool ?=
    upTerm(Y <= Z)) == true .
rewrites: 220
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X < Y) \/ 'true.Bool ?=
    upTerm(Y <= Z)) == true .
rewrites: 175
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X < Y) /\ 'true.Bool ?=
    upTerm(Y < X)) == false .
rewrites: 140
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X < Y) \/ 'true.Bool ?=
    upTerm(Y < X)) == true .
rewrites: 166
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool ?= upTerm(X < Y) /\ 'true.Bool ?=
    upTerm(Z < X) /\ 'true.Bool ?= upTerm(Y < Z)) == false .
rewrites: 176
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, ('true.Bool ?= upTerm(X < Y)) => ('true.Bool
    ?= '_<_['_+_['X:Nat,'1.NzNat],'Y:Nat])) == true .
rewrites: 172
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'Z:Bool ?= '_<_['_+_['N:Nat,'N:Nat],'_+_[
    'M:Nat,'M:Nat]] /\ 'M:Nat != 'N:Nat /\ 'Z:Bool != 'true.Bool) == true .
rewrites: 1512
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'B1:Bool ?= '_<_['N:Nat,'M:Nat] /\ 'M:Nat !=
    'N:Nat) == true .
rewrites: 990
result Bool: true
==========================================
reduce in TEST-NAT : var-valid(nat, ('true.Bool ?= upTerm(X < Y)) => (
    'true.Bool ?= '_<_['X:Nat,'_+_['Y:Nat,'1.NzNat]])) == true .
rewrites: 621
result Bool: true
==========================================
reduce in TEST-NAT : var-valid(nat, ('true.Bool ?= upTerm(X < Y)) => (
    'true.Bool ?= '_<_['_+_['X:Nat,'1.NzNat],'Y:Nat])) == false .
rewrites: 692
result Bool: true
==========================================
reduce in TEST-NAT : var-valid(nat, ('true.Bool ?= upTerm(X < Y)) => (
    'true.Bool ?= upTerm(Y < X))) == false .
rewrites: 580
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'B2:Bool ?= 'true.Bool /\ 'B2:Bool ?= '_<_[
    'N2:Nat,'N1:Nat]) == true .
rewrites: 200
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'B2:Bool ?= '_<_['N2:Nat,'N1:Nat] /\ 'N1:Nat
    ?= 'N2:Nat) == true .
rewrites: 280
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'B2:Bool ?= 'true.Bool /\ 'B2:Bool ?= '_<_[
    'N2:Nat,'N1:Nat] /\ 'N1:Nat ?= 'N2:Nat) == false .
rewrites: 172
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'B1:Bool ?= '_<_['N1:Nat,'N2:Nat] /\ 'N1:Nat
    != 'N2:Nat) == true .
rewrites: 990
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'B2:Bool ?= 'true.Bool /\ 'B2:Bool ?= '_<_[
    'N2:Nat,'N1:Nat] /\ 'N1:Nat != 'N2:Nat) == true .
rewrites: 1002
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'B1:Bool ?= '_<_['N2:Nat,'_+_['N1:Nat,
    'N1:Nat]] /\ 'B1:Bool != 'true.Bool) == true .
rewrites: 526
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'false.Bool ?= upTerm(X + X < Y + Y)) .
rewrites: 160
result Bool: true
==========================================
reduce in TEST-NAT : var-sat(nat, 'true.Bool != upTerm(X + X < Y + Y)) .
rewrites: 269
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'N1:Nat ?= 'head['L':NeNatList] /\ 'N2:Nat
    ?= 'head['L:NeNatList] /\ 'N1:Nat != 'N2:Nat) == true .
rewrites: 2953
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'B2:Bool ?= 'true.Bool /\ 'N2:Nat ?= 'head[
    'L':NeNatList] /\ 'N1:Nat ?= 'head['L:NeNatList] /\ 'L':NeNatList ?=
    'L:NeNatList /\ 'N1:Nat != 'N2:Nat) == false .
rewrites: 3723
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'N2:Nat ?= 'head['L':NeNatList] /\ 'N1:Nat
    ?= 'head['L:NeNatList] /\ 'B1:Bool != 'true.Bool /\ 'N1:Nat != 'N2:Nat) ==
    true .
rewrites: 2388
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'I2:Nat
    ?= 'head['M:NeNatList] /\ 'I1:Nat != 'I2:Nat) == true .
rewrites: 1557
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'I2:Nat /\ 'I1:Nat ?= 'head[
    'L:NeNatList] /\ 'I2:Nat ?= 'head['M:NeNatList]) == true .
rewrites: 1110
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'N2:Nat ?= 'head['L':NeNatList] /\ 'N1:Nat
    ?= 'head['L:NeNatList] /\ 'B1:Bool != 'true.Bool) == true .
rewrites: 1450
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'I2:Nat
    ?= 'head['M:NeNatList]) == true .
rewrites: 1370
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'B2:Bool ?= 'true.Bool /\ 'N2:Nat ?= 'head[
    'L':NeNatList] /\ 'L':NeNatList ?= 'L:NeNatList /\ 'N1:Nat ?= 'head[
    'L:NeNatList]) == true .
rewrites: 751
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'X:Nat !=
    'head['L:NeNatList] /\ 'Y:Nat != 'head['L:NeNatList]) == true .
rewrites: 1338
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'I1:Nat
    != 'X:Nat /\ 'X:Nat != 'head['L:NeNatList] /\ 'Y:Nat != 'head[
    'L:NeNatList]) == true .
rewrites: 1430
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'I1:Nat
    != 'Y:Nat /\ 'X:Nat != 'head['L:NeNatList] /\ 'Y:Nat != 'head[
    'L:NeNatList]) == true .
rewrites: 1430
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'X:Nat !=
    'Y:Nat /\ 'X:Nat != 'head['L:NeNatList] /\ 'Y:Nat != 'head['L:NeNatList])
    == true .
rewrites: 1440
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'I1:Nat
    != 'X:Nat /\ 'I1:Nat != 'Y:Nat /\ 'X:Nat != 'Y:Nat /\ 'X:Nat != 'head[
    'L:NeNatList] /\ 'Y:Nat != 'head['L:NeNatList]) == true .
rewrites: 1633
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'X:Nat /\ 'I1:Nat ?= 'head[
    'L:NeNatList] /\ 'X:Nat != 'head['L:NeNatList] /\ 'Y:Nat != 'head[
    'L:NeNatList]) == false .
rewrites: 1989
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'Y:Nat /\ 'I1:Nat ?= 'head[
    'L:NeNatList] /\ 'X:Nat != 'head['L:NeNatList] /\ 'Y:Nat != 'head[
    'L:NeNatList]) == false .
rewrites: 1989
result Bool: true
==========================================
reduce in TEST-LIST : var-sat(list, 'I1:Nat ?= 'head['L:NeNatList] /\ 'X:Nat ?=
    'Y:Nat /\ 'X:Nat != 'head['L:NeNatList] /\ 'Y:Nat != 'head['L:NeNatList])
    == true .
rewrites: 1608
result Bool: true
Bye.
