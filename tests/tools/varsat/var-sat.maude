

load ../../../contrib/tools/fvp/numbers.maude
load ../../../contrib/tools/varsat/var-sat.maude

fmod TEST-NAT is
  pr VAR-SAT .
  pr EQFORM-OPERATIONS .
  pr NAT       . op nat  : -> Module . vars U V W X Y Z : Nat .
  var F : Form .
  eq nat = upModule('FVP-NAT-PRED, true) .
endfm

red nf-ctor-variants(nat, 'true.Bool != '_<_['X:Nat,'Y:Nat]) .
red toDUPs(getTerms(ctor-variants(hl-func(nat),toHL(nat,FormToTL('true.Bool != '_<_['X:Nat,'Y:Nat]))))) .
red getTerms(ctor-variants(hl-func(nat),toHL(nat,FormToTL('true.Bool != '_<_['X:Nat,'Y:Nat])))) .
red ctor-variants(hl-func(nat),toHL(nat,FormToTL('true.Bool != '_<_['X:Nat,'Y:Nat]))) .
red toHL(nat,FormToTL('true.Bool != '_<_['X:Nat,'Y:Nat])) .

--- Satisfiability
red var-sat(nat, upTerm(X <  Y) ?= 'true.Bool)    == true  .
red var-sat(nat, upTerm(X <  Y) != 'true.Bool)    == true  .
red var-sat(nat, upTerm(X <  X) ?= 'true.Bool)    == false .
red var-sat(nat, upTerm(X <= Y) ?= 'true.Bool)    == true  .
red var-sat(nat, upTerm(X <= X) ?= 'true.Bool)    == true  .
red var-sat(nat, upTerm(X <  Y) ?= 'true.Bool
              /\ upTerm(Y <= Z) ?= 'true.Bool)    == true  .
red var-sat(nat, upTerm(X <  Y) ?= 'true.Bool
              \/ upTerm(Y <= Z) ?= 'true.Bool)    == true  .
red var-sat(nat, upTerm(X <  Y) ?= 'true.Bool
              /\ upTerm(Y <  X) ?= 'true.Bool)    == false .
red var-sat(nat, upTerm(X <  Y) ?= 'true.Bool
              \/ upTerm(Y <  X) ?= 'true.Bool)    == true  .
red var-sat(nat, upTerm(X <  Y) ?= 'true.Bool
              /\ upTerm(Y <  Z) ?= 'true.Bool
              /\ upTerm(Z <  X) ?= 'true.Bool)    == false .

red var-sat(nat, (upTerm(X <  Y       ) ?= 'true.Bool)
              => ('_<_['_+_['X:Nat,'1.NzNat],'Y:Nat] ?= 'true.Bool)) == true .

red var-sat(nat,
       'Z:Bool ?= '_<_['_+_[ 'N:Nat , 'N:Nat ]
                          ,'_+_[ 'M:Nat , 'M:Nat ]]
    /\ 'Z:Bool != 'true.Bool
    /\ 'N:Nat != 'M:Nat)
    == true .

red var-sat(nat,
       'B1:Bool ?= '_<_[ 'N:Nat, 'M:Nat ]
    /\ 'N:Nat != 'M:Nat)
    == true .

red var-valid(nat, (upTerm(X <  Y      ) ?= 'true.Bool)
                => ('_<_['X:Nat,'_+_['Y:Nat,'1.NzNat]] ?= 'true.Bool)) == true .
red var-valid(nat, (upTerm(X <  Y      ) ?= 'true.Bool)
                => ('_<_['_+_['X:Nat,'1.NzNat],'Y:Nat] ?= 'true.Bool)) == false .
red var-valid(nat, (upTerm(X <  Y) ?= 'true.Bool)
                => (upTerm(Y <  X) ?= 'true.Bool)) == false .

reduce var-sat(nat,
        'B2:Bool ?= 'true.Bool
     /\ 'B2:Bool ?= '_<_['N2:Nat,'N1:Nat])
     == true .

reduce var-sat(nat,
            'B2:Bool ?= '_<_['N2:Nat, 'N1:Nat]
         /\ 'N2:Nat ?= 'N1:Nat)
    == true .

reduce var-sat(nat,
            'B2:Bool ?= 'true.Bool
         /\ 'B2:Bool ?= '_<_[ 'N2:Nat, 'N1:Nat]
         /\ 'N2:Nat ?= 'N1:Nat)
    == false .

reduce var-sat(nat,
                'B1:Bool ?= '_<_[ 'N1:Nat, 'N2:Nat  ]
             /\ 'N1:Nat != 'N2:Nat )
    == true .

reduce var-sat(nat,
            'B2:Bool ?= 'true.Bool
         /\ 'B2:Bool ?= '_<_['N2:Nat,'N1:Nat]
         /\ 'N2:Nat != 'N1:Nat)
      == true .

reduce var-sat(nat,
        'B1:Bool ?= '_<_['N2:Nat, '_+_['N1:Nat,'N1:Nat]]
     /\ 'B1:Bool != 'true.Bool)
     == true .


--- These checks are to make sure we work with the theories that nelson oppen
--- uses for testing.

fmod MYNATLIST is
  protecting FVP-BOOL-CTOR .
  sort Nat .

  op fake-zero :     -> Nat [ctor] .
  op fake-succ : Nat -> Nat [ctor] .

  sort NeNatList NatList .
  subsort Nat < NeNatList < NatList .
  op __  : NeNatList NeNatList -> NeNatList [ctor assoc] .
  op nil : -> NatList [ctor] .

  op head : NeNatList -> Nat .
  var N : Nat . var L : NeNatList .
  eq head(N)   = N [variant] .
  eq head(N L) = N [variant] .
endfm

fmod TEST-LIST is
  pr VAR-SAT .
  pr EQFORM-OPERATIONS .
  var F : Form .
  op list : -> Module .
  eq list = upModule('MYNATLIST, true) .
endfm

reduce var-sat(list,
                'N1:Nat ?= 'head['L':NeNatList]
             /\ 'N2:Nat ?= 'head['L:NeNatList]
             /\ 'N1:Nat != 'N2:Nat )
    == true .

reduce var-sat(list,
            'B2:Bool ?= 'true.Bool
         /\ 'N2:Nat ?= 'head['L':NeNatList]
         /\ 'N1:Nat ?= 'head['L:NeNatList]
         /\ 'L':NeNatList ?= 'L:NeNatList
         /\ 'N2:Nat != 'N1:Nat
        )
    == false .

reduce var-sat(list,
            'N2:Nat ?= 'head['L':NeNatList]
         /\ 'N1:Nat ?= 'head['L:NeNatList]
         /\ 'B1:Bool != 'true.Bool
         /\ 'N2:Nat != 'N1:Nat)
      == true .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'I2:Nat ?= 'head['M:NeNatList]
     /\ 'I1:Nat != 'I2:Nat)
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'I2:Nat
     /\ 'I1:Nat ?= 'head['L:NeNatList]
     /\ 'I2:Nat ?= 'head['M:NeNatList])
     == true .

reduce var-sat(list,
        'N2:Nat ?= 'head['L':NeNatList]
     /\ 'N1:Nat ?= 'head['L:NeNatList]
     /\ 'B1:Bool != 'true.Bool)
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'I2:Nat ?= 'head['M:NeNatList])
     == true .

reduce var-sat(list,
        'B2:Bool ?= 'true.Bool
     /\ 'N2:Nat ?= 'head['L':NeNatList]
     /\ 'N1:Nat ?= 'head['L:NeNatList]
     /\ 'L':NeNatList ?= 'L:NeNatList)
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'X:Nat  != 'head['L:NeNatList]
     /\ 'Y:Nat  != 'head['L:NeNatList])
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'I1:Nat != 'X:Nat
     /\ 'X:Nat  != 'head['L:NeNatList]
     /\ 'Y:Nat  != 'head['L:NeNatList])
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'I1:Nat != 'Y:Nat
     /\ 'X:Nat != 'head['L:NeNatList]
     /\ 'Y:Nat != 'head['L:NeNatList])
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'X:Nat != 'Y:Nat
     /\ 'X:Nat != 'head['L:NeNatList]
     /\ 'Y:Nat != 'head['L:NeNatList])
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'I1:Nat != 'X:Nat
     /\ 'I1:Nat != 'Y:Nat
     /\ 'X:Nat != 'Y:Nat
     /\ 'X:Nat != 'head['L:NeNatList]
     /\ 'Y:Nat != 'head['L:NeNatList])
     == true .

reduce var-sat(list,
        'I1:Nat ?= 'X:Nat
     /\ 'I1:Nat ?= 'head['L:NeNatList]
     /\ 'X:Nat != 'head['L:NeNatList]
     /\ 'Y:Nat != 'head['L:NeNatList])
     == false .

reduce var-sat(list,
        'I1:Nat ?= 'Y:Nat
     /\ 'I1:Nat ?= 'head['L:NeNatList]
     /\ 'X:Nat != 'head['L:NeNatList]
     /\ 'Y:Nat != 'head['L:NeNatList])
     == false .

reduce var-sat(list,
        'I1:Nat ?= 'head['L:NeNatList]
     /\ 'X:Nat ?= 'Y:Nat
     /\ 'X:Nat != 'head['L:NeNatList]
     /\ 'Y:Nat != 'head['L:NeNatList])
     == true
     .
